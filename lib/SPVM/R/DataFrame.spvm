# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::DataFrame {
  
  use StringList;
  use List;
  use R::NDArray;
  use R::DataFrame::Column;
  
  # Fields
  has columns_list : List of R::DataFrame::Column;
  
  has columns_h : Hash of R::DataFrame::Column;
  
  # Class Methods
  static method new : R::DataFrame () {
    
    my $self = new R::DataFrame;
    
    my $columns_list = List->new(new R::DataFrame::Column[0]);
    $self->{columns_list} = $columns_list;
    
    my $columns_h = Hash->new;
    $self->{columns_h} = $columns_h;
    
    return $self;
  }
  
  # Instance Methods
  method get_columns_length : int () {
    
    my $columns_list = $self->{columns_list};
    
    my $columns_length = $columns_list->length;
    
    return $columns_length;
  }
  
  method colnames : string[] () {
    
    my $columns_list = $self->{columns_list};
    
    my $columns_length = $columns_list->length;
    
    my $column_names = new string[$columns_length];
    
    for (my $i = 0; $i < $columns_length; $i++) {
      $column_names->[$i] = $self->get_column_name($i);
    }
    
    return $column_names;
  }
  
  method exists_column : int ($column_name : string) {
    
    my $columns_h = $self->{columns_h};
    
    my $column = (R::DataFrame::Column)$columns_h->get($column_name);
    
    my $exists = 0;
    if ($column) {
      $exists = 1;
    }
    
    return $exists;
  }
  
  method get_column_name : string ($column_index : int) {
    
    my $columns_list = $self->{columns_list};
    
    unless ($column_index >= 0 && $column_index < $columns_list->length) {
      die "The column at index $column_index is not found.";
    }
    
    my $column = (R::DataFrame::Column)$columns_list->get($column_index);
    
    my $column_name = $column->{name};
    
    return $column_name;
  }
  
  method get_column_index : int ($column_name : string) {
    
    my $columns_length = $self->get_columns_length;
    
    my $match = 0;
    for (my $column_index = 0; $column_index < $columns_length; $column_index++) {
      my $column_name_cmp = $self->get_column_name($column_index);
      
      if ($column_name eq $column_name_cmp) {
        return $column_index;
      }
    }
    
    die "The column specified by the column name \$column_name does not found.";
  }
  
  method get_ndarray_by_index : R::NDArray ($column_index : int) {
    
    my $columns_list = $self->{columns_list};
    
    unless ($column_index >= 0 && $column_index < $columns_list->length) {
      die "The column at index $column_index is not found.";
    }
    
    my $column = (R::DataFrame::Column)$columns_list->get($column_index);
    
    my $ndarray = $column->{ndarray};
    
    return $ndarray;
  }
  
  method get_ndarray : R::NDArray ($column_name : string) {
    
    my $columns_h = $self->{columns_h};
    
    my $column = (R::DataFrame::Column)$columns_h->get($column_name);
    
    unless ($column) {
      die "The column which name is \"$column_name\" is not found.";
    }
    
    my $ndarray = $column->{ndarray};
    
    return $ndarray;
  }
  
  method push_column : void ($column_name : string, $ndarray : R::NDArray) {
    
    my $columns_length = $self->get_columns_length;
    
    $self->insert_column($column_name, $ndarray);
  }
  
  method insert_column : void ($column_name : string, $ndarray : R::NDArray, $before_column_name : string = undef) {
    
    $self->check_column($column_name, $ndarray);
    
    my $column = new R::DataFrame::Column;
    $column->{name} = $column_name;
    $ndarray->make_dim_read_only;
    $column->{ndarray} = $ndarray;
    
    my $column_index = -1;
    if ($before_column_name) {
      $column_index = $self->get_column_index($before_column_name);
    }
    else {
      $column_index = $self->get_columns_length;
    }
    
    my $columns_list = $self->{columns_list};
    
    $columns_list->insert($column_index, $column);
  }
  
  method remove_column : void ($column_name : string) {
    
    my $column_index = $self->get_column_index($column_name);
    
    $self->remove_column($column_index);
  }
  
  private method check_column : void ($column_name : string, $ndarray : R::NDArray) {
    
    my $columns_h = $self->{columns_h};
    
    my $column = $columns_h->get($column_name);
    
    if ($column) {
      die "The column name \$column_name is already used.";
    }
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $columns_length = $self->get_columns_length;
    
    if ($columns_length != 0) {
      my $ndarray_length = $ndarray->length;
      
      unless ($ndarray_length == $self->get_ndarray_by_index(0)->length) {
        die "The length of n-dimension array \$ndarray must be the same as the return value of ndarray_length method given the invocant.";
      }
    }
  }
  
  method slice : R::DataFrame ($column_names : string[], $vector_indexes : R::NDArray::Int[]) {
    
    my $columns_length = $self->get_columns_length;
    
    my $columns_h = $self->{columns_h};
    
    my $ret_data_frame = R::DataFrame->new;
    for my $column_name (@$column_names) {
      my $column = (R::DataFrame::Column)$columns_h->get($column_name);
      
      my $ndarray = $column->{ndarray};
      
      my $ret_ndarray = $ndarray->slice($vector_indexes);
      
      $ret_data_frame->push_column($column_name, $ndarray);
    }
    
    return $ret_data_frame;
  }
  
  method to_string : string () {
    
    my $columns_length = $self->get_columns_length;
    
    my $string_buffer = StringBuffer->new;
    for (my $column_index = 0; $column_index < $columns_length; $column_index++) {
      
      my $column_name = $self->get_column_name($column_index);
      
      my $ndarray = $self->get_ndarray($column_index);
      
      $string_buffer->push("[[");
      
      if ($column_name) {
        $string_buffer->push($column_name);
      }
      else {
        $string_buffer->push($column_index);
      }
      
      $string_buffer->push("]]\n");
      
      my $ndarray_string = $ndarray->to_string;
      
      $string_buffer->push($ndarray_string);
    }
    
    my $string = $string_buffer->to_string;
    
    return $string;
  }
  
  method set_order : void ($indexes_ndarray : R::NDArray::Int) {
    
    my $columns_length = $self->get_columns_length;
    
    for (my $column_index = 0; $column_index < $columns_length; $column_index++) {
      my $ndarray = $self->get_ndarray($column_index);
      
      $ndarray->set_order($indexes_ndarray);
    }
  }
  
  method clone : R::DataFrame ($deep : int = 0) {
    
    my $columns_length = $self->get_columns_length;
    
    my $columns_h = $self->{columns_h};
    
    my $column_names = $self->colnames;
    
    my $ret_data_frame = R::DataFrame->new;
    for my $column_name (@$column_names) {
      my $column = (R::DataFrame::Column)$columns_h->get($column_name);
      
      my $ndarray = $column->{ndarray};
      
      my $ret_ndarray = $ndarray->clone($deep);
      
      $ret_data_frame->push_column($column_name, $ndarray);
    }
    
    return $ret_data_frame;
  }
  
  method ncol : int () {
    
    my $ncol = $self->get_columns_length;
    
    return $ncol;
  }
  
  method nrow : int () {
    
    my $columns_length = $self->get_columns_length;
    
    my $nrow = 0;
    if ($columns_length > 0) {
      $nrow = $self->get_ndarray_by_index(0)->length;
    }
    
    return $nrow;
  }
  
}

