# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::DataFrame {
  
  use StringList;
  use List;
  use R::NDArray;
  use R::DataFrame::Column;
  
  # Fields
  has cols_list : List of R::DataFrame::Column;
  
  has cols_h : Hash of R::DataFrame::Column;
  
  # Class Methods
  static method new : R::DataFrame () {
    
    my $self = new R::DataFrame;
    
    my $cols_list = List->new(new R::DataFrame::Column[0]);
    $self->{cols_list} = $cols_list;
    
    my $cols_h = Hash->new;
    $self->{cols_h} = $cols_h;
    
    return $self;
  }
  
  # Instance Methods
  method colnames : string[] () {
    
    my $cols_list = $self->{cols_list};
    
    my $cols_length = $cols_list->length;
    
    my $colnames = new string[$cols_length];
    
    for (my $i = 0; $i < $cols_length; $i++) {
      $colnames->[$i] = $self->get_colname($i);
    }
    
    return $colnames;
  }
  
  method exists_col : int ($colname : string) {
    
    my $cols_h = $self->{cols_h};
    
    my $col = (R::DataFrame::Column)$cols_h->get($colname);
    
    my $exists = 0;
    if ($col) {
      $exists = 1;
    }
    
    return $exists;
  }
  
  method get_colname : string ($col_index : int) {
    
    my $cols_list = $self->{cols_list};
    
    unless ($col_index >= 0 && $col_index < $cols_list->length) {
      die "The col at index $col_index is not found.";
    }
    
    my $col = (R::DataFrame::Column)$cols_list->get($col_index);
    
    my $colname = $col->{name};
    
    return $colname;
  }
  
  method get_col_index : int ($colname : string) {
    
    my $cols_length = $self->ncol;
    
    my $match = 0;
    for (my $col_index = 0; $col_index < $cols_length; $col_index++) {
      my $colname_cmp = $self->get_colname($col_index);
      
      if ($colname eq $colname_cmp) {
        return $col_index;
      }
    }
    
    die "The col specified by the col name \$colname does not found.";
  }
  
  method get_ndarray_by_index : R::NDArray ($col_index : int) {
    
    my $cols_list = $self->{cols_list};
    
    unless ($col_index >= 0 && $col_index < $cols_list->length) {
      die "The col at index $col_index is not found.";
    }
    
    my $col = (R::DataFrame::Column)$cols_list->get($col_index);
    
    my $ndarray = $col->{ndarray};
    
    return $ndarray;
  }
  
  method get_ndarray : R::NDArray ($colname : string) {
    
    my $cols_h = $self->{cols_h};
    
    my $col = (R::DataFrame::Column)$cols_h->get($colname);
    
    unless ($col) {
      die "The col which name is \"$colname\" is not found.";
    }
    
    my $ndarray = $col->{ndarray};
    
    return $ndarray;
  }
  
  method push_col : void ($colname : string, $ndarray : R::NDArray) {
    
    my $cols_length = $self->ncol;
    
    $self->insert_col($colname, $ndarray);
  }
  
  method insert_col : void ($colname : string, $ndarray : R::NDArray, $before_colname : string = undef) {
    
    $self->check_col($colname, $ndarray);
    
    my $col = new R::DataFrame::Column;
    $col->{name} = $colname;
    $ndarray->make_dim_read_only;
    $col->{ndarray} = $ndarray;
    
    my $col_index = -1;
    if ($before_colname) {
      $col_index = $self->get_col_index($before_colname);
    }
    else {
      $col_index = $self->ncol;
    }
    
    my $cols_list = $self->{cols_list};
    
    $cols_list->insert($col_index, $col);
  }
  
  method remove_col : void ($colname : string) {
    
    my $col_index = $self->get_col_index($colname);
    
    $self->remove_col($col_index);
  }
  
  private method check_col : void ($colname : string, $ndarray : R::NDArray) {
    
    my $cols_h = $self->{cols_h};
    
    my $col = $cols_h->get($colname);
    
    if ($col) {
      die "The col name \$colname is already used.";
    }
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $cols_length = $self->ncol;
    
    if ($cols_length != 0) {
      my $ndarray_length = $ndarray->length;
      
      unless ($ndarray_length == $self->get_ndarray_by_index(0)->length) {
        die "The length of n-dimension array \$ndarray must be the same as the return value of ndarray_length method given the invocant.";
      }
    }
  }
  
  method slice : R::DataFrame ($colnames : string[], $vector_indexes : R::NDArray::Int[]) {
    
    my $cols_length = $self->ncol;
    
    my $cols_h = $self->{cols_h};
    
    my $ret_data_frame = R::DataFrame->new;
    for my $colname (@$colnames) {
      my $col = (R::DataFrame::Column)$cols_h->get($colname);
      
      my $ndarray = $col->{ndarray};
      
      my $ret_ndarray = $ndarray->slice($vector_indexes);
      
      $ret_data_frame->push_col($colname, $ndarray);
    }
    
    return $ret_data_frame;
  }
  
  method to_string : string () {
    
    my $cols_length = $self->ncol;
    
    my $string_buffer = StringBuffer->new;
    for (my $col_index = 0; $col_index < $cols_length; $col_index++) {
      
      my $colname = $self->get_colname($col_index);
      
      my $ndarray = $self->get_ndarray($col_index);
      
      $string_buffer->push("[[");
      
      if ($colname) {
        $string_buffer->push($colname);
      }
      else {
        $string_buffer->push($col_index);
      }
      
      $string_buffer->push("]]\n");
      
      my $ndarray_string = $ndarray->to_string;
      
      $string_buffer->push($ndarray_string);
    }
    
    my $string = $string_buffer->to_string;
    
    return $string;
  }
  
  method set_order : void ($indexes_ndarray : R::NDArray::Int) {
    
    my $cols_length = $self->ncol;
    
    for (my $col_index = 0; $col_index < $cols_length; $col_index++) {
      my $ndarray = $self->get_ndarray($col_index);
      
      $ndarray->set_order($indexes_ndarray);
    }
  }
  
  method clone : R::DataFrame ($deep : int = 0) {
    
    my $cols_length = $self->ncol;
    
    my $cols_h = $self->{cols_h};
    
    my $colnames = $self->colnames;
    
    my $ret_data_frame = R::DataFrame->new;
    for my $colname (@$colnames) {
      my $col = (R::DataFrame::Column)$cols_h->get($colname);
      
      my $ndarray = $col->{ndarray};
      
      my $ret_ndarray = $ndarray->clone($deep);
      
      $ret_data_frame->push_col($colname, $ndarray);
    }
    
    return $ret_data_frame;
  }
  
  method ncol : int () {
    
    my $cols_list = $self->{cols_list};
    
    my $cols_length = $cols_list->length;
    
    return $cols_length;
  }
  
  method nrow : int () {
    
    my $cols_length = $self->ncol;
    
    my $nrow = 0;
    if ($cols_length > 0) {
      $nrow = $self->get_ndarray_by_index(0)->length;
    }
    
    return $nrow;
  }
  
}

