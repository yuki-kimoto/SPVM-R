# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::DataFrame {
  
  use StringList;
  use List;
  use R::NDArray;
  use R::DataFrame::Column;
  
  # Fields
  has colobjs_list : List of R::DataFrame::Column;
  
  has colobjs_indexes_h : Hash of Int;
  
  # Class Methods
  static method new : R::DataFrame () {
    
    my $self = new R::DataFrame;
    
    my $colobjs_list = List->new(new R::DataFrame::Column[0]);
    $self->{colobjs_list} = $colobjs_list;
    
    my $colobjs_indexes_h = Hash->new;
    $self->{colobjs_indexes_h} = $colobjs_indexes_h;
    
    return $self;
  }
  
  # Instance Methods
  method colnames : string[] () {
    
    my $ncol = $self->ncol;
    
    my $colnames = new string[$ncol];
    
    for (my $i = 0; $i < $ncol; $i++) {
      $colnames->[$i] = $self->colname($i);
    }
    
    return $colnames;
  }
  
  method exists_col : int ($colname : string) {
    
    my $colobjs_indexes_h = $self->{colobjs_indexes_h};
    
    my $exists = $colobjs_indexes_h->exists($colname);
    
    return $exists;
  }
  
  method colname : string ($col : int) {
    
    my $colobjs_list = $self->{colobjs_list};
    
    unless ($col >= 0 && $col < $colobjs_list->length) {
      die "The column at index $col is not found.";
    }
    
    my $colobj = (R::DataFrame::Column)$colobjs_list->get($col);
    
    my $colname = $colobj->{name};
    
    return $colname;
  }
  
  method colindex : int ($colname : string) {
    
    my $ncol = $self->ncol;
    
    my $match = 0;
    for (my $col = 0; $col < $ncol; $col++) {
      my $colname_cmp = $self->colname($col);
      
      if ($colname eq $colname_cmp) {
        return $col;
      }
    }
    
    die "The column specified by the column name \"$colname\" does not found.";
  }
  
  method col_by_index : R::NDArray ($col : int) {
    
    my $colobjs_list = $self->{colobjs_list};
    
    unless ($col >= 0 && $col < $colobjs_list->length) {
      die "The column at index $col is not found.";
    }
    
    my $colobj = (R::DataFrame::Column)$colobjs_list->get($col);
    
    my $ndarray = $colobj->{ndarray};
    
    return $ndarray;
  }
  
  method col : R::NDArray ($colname : string) {
    
    unless ($self->exists_col($colname)) {
      die "The column which name is \"$colname\" is not found.";
    }
    
    my $col = $self->colindex($colname);
    
    my $ndarray = $self->col_by_index($col);
    
    return $ndarray;
  }
  
  method set_col : void ($colname : string, $ndarray : R::NDArray) {
    
    my $exists_col = $self->exists_col($colname);
    
    if ($exists_col) {
      my $col = $self->colindex($colname);
      
      my $colobjs_list = $self->{colobjs_list};
      
      my $colobj = (R::DataFrame::Column)$colobjs_list->get($col);
      
      $colobj->{ndarray} = $ndarray;
      $ndarray->make_dim_read_only;
    }
    else {
      $self->insert_col($colname, $ndarray);
    }
  }
  
  method insert_col : void ($colname : string, $ndarray : R::NDArray, $before_colname : string = undef) {
    
    unless (length $colname) {
      die "The column name \$colname must be a non-empty string.";
    }
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $exists_col = $self->exists_col($colname);
    
    if ($exists_col) {
      die "The column with the name \$colname already exists.";
    }
    
    if ($self->ncol > 0) {
      my $nrow = $self->nrow;
      
      unless (R::OP->equals_dim($ndarray, $self->col_by_index(0))) {
        die "The dimension of the n-dimension array \$ndarray must be equal to the dimension of the n-dimension array which is the invocant.";
      }
    }
    
    my $colobj = new R::DataFrame::Column;
    $colobj->{name} = $colname;
    $colobj->{ndarray} = $ndarray;
    $ndarray->make_dim_read_only;
    
    my $col = -1;
    if ($before_colname) {
      $col = $self->colindex($before_colname);
    }
    else {
      $col = $self->ncol;
    }
    
    my $colobjs_list = $self->{colobjs_list};
    
    $colobjs_list->insert($col, $colobj);
    
    $self->update_colobjs_indexes_h($col);
  }
  
  private method update_colobjs_indexes_h : void ($begin_col : int) {
    
    my $colobjs_list = $self->{colobjs_list};
    
    my $colobjs_indexes_h = $self->{colobjs_indexes_h};
    for (my $i = $begin_col; $i < $colobjs_list->length; $i++) {
      my $colobj = (R::DataFrame::Column)$colobjs_list->get($i);
      my $colname = $colobj->{name};
      $colobjs_indexes_h->set($colname, $i);
    }
  }
  
  method remove_col : void ($colname : string) {
    
    my $col = $self->colindex($colname);
    
    my $colobjs_list = $self->{colobjs_list};
    
    $colobjs_list->remove($col);
    
    my $colobjs_indexes_h = $self->{colobjs_indexes_h};
    
    $colobjs_indexes_h->delete($colname);
    
    $self->update_colobjs_indexes_h($col);
  }
  
  method slice : R::DataFrame ($colnames : string[], $vector_indexes : R::NDArray::Int[]) {
    
    my $ncol = $self->ncol;
    
    my $colobjs_indexes_h = $self->{colobjs_indexes_h};
    
    my $ret_data_frame = R::DataFrame->new;
    for my $colname (@$colnames) {
      my $col = (R::DataFrame::Column)$colobjs_indexes_h->get($colname);
      
      my $ndarray = $col->{ndarray};
      
      my $ret_ndarray = $ndarray->slice($vector_indexes);
      
      $ret_data_frame->insert_col($colname, $ndarray);
    }
    
    return $ret_data_frame;
  }
  
  method to_string : string () {
    
    my $ncol = $self->ncol;
    
    my $string_buffer = StringBuffer->new;
    
    if ($ncol == 0) {
      $string_buffer->push("Empty");
    }
    else {
      my $first_ndarray = $self->col_by_index(0);
      
      my $first_dim = $first_ndarray->dim;
      
      my $first_dim_length = @$first_dim;
      
      if ($first_dim_length <= 1) {
        for (my $col = 0; $col < $ncol; $col++) {
          my $colname = $self->colname($col);
          
          $string_buffer->push("$colname");
          
          unless ($col == $ncol - 1) {
            $string_buffer->push("\t");
          }
        }
        
        $string_buffer->push("\n");
            
        for (my $col = 0; $col < $ncol; $col++) {
          my $ndarray = $self->col_by_index($col);
          
          my $nrow = $self->nrow;
          
          for (my $row = 0; $row < $nrow; $row++) {
            my $elem_string = $ndarray->elem_to_string($row);
            $string_buffer->push($elem_string);
          }
          
          unless ($col == $ncol - 1) {
            $string_buffer->push("\t");
          }
        }
      }
      else {
        for (my $col = 0; $col < $ncol; $col++) {
          
          my $colname = $self->colname($col);
          
          my $ndarray = $self->col_by_index($col);
          
          my $dim = $ndarray->dim;
          
          my $dim_length = @$dim;
          
          $string_buffer->push("$colname\n");
          
          my $ndarray_string = $ndarray->to_string;
          
          $string_buffer->push($ndarray_string);
          
          $string_buffer->push("\n\n");
        }
      }
    }
    
    my $string = $string_buffer->to_string;
    
    return $string;
  }
  
  method set_order : void ($indexes_ndarray : R::NDArray::Int) {
    
    my $ncol = $self->ncol;
    
    for (my $col = 0; $col < $ncol; $col++) {
      my $ndarray = $self->col($col);
      
      $ndarray->set_order($indexes_ndarray);
    }
  }
  
  method clone : R::DataFrame ($elem_shallow_clone : int = 0) {
    
    my $ncol = $self->ncol;
    
    my $colnames = $self->colnames;
    
    my $ret_data_frame = R::DataFrame->new;
    for my $colname (@$colnames) {
      my $ndarray = $self->col($colname);
      
      my $ret_ndarray = $ndarray->clone($elem_shallow_clone);
      
      $ret_data_frame->insert_col($colname, $ndarray);
    }
    
    return $ret_data_frame;
  }
  
  method ncol : int () {
    
    my $colobjs_list = $self->{colobjs_list};
    
    my $ncol = $colobjs_list->length;
    
    return $ncol;
  }
  
  method nrow : int () {
    
    my $ncol = $self->ncol;
    
    my $nrow = 0;
    if ($ncol > 0) {
      $nrow = $self->col_by_index(0)->length;
    }
    
    return $nrow;
  }
  
}

