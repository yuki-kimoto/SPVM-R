# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::DataFrame {
  
  use StringList;
  use List;
  use R::NDArray;
  
  # Fields
  has names_list : StringList;
  
  has ndarrays_list : List of R::NDArray;
  
  # Class Methods
  static method new : R::DataFrame () {
    
    my $self = new R::DataFrame;
    
    my $names_list = StringList->new;
    $self->{names_list} = $names_list;
    
    my $ndarrays_list = StringList->new;
    $self->{ndarrays_list} = $ndarrays_list;
    
    return $self;
  }
  
  # Instance Methods
  method ncol : int () {
    
    my $names_list = $self->{names_list};
    
    my $names_length = $names_list->length;
    
    return $names_length;
  }
  
  method nrow : int () {
    
    my $ncol = $self->ncol;
    
    if ($ncol == 0) {
      return 0;
    }
    
    my $ndarrays_list = $self->{ndarrays_list};
    
    my $ndarrays_length = $ndarrays_list->length;
    
    return $ndarrays_length;
  }
  
  method names : string[] () {
    
    my $names_list = $self->{names_list};
    
    my $names = $names_list->to_array;
    
    return $names;
  }
  
  method name : string ($index : int) {
    
    my $names_list = $self->{names_list};
    
    my $name = $names_list->get($index);
    
    return $name;
  }
  
  method set_name : void ($index : int, $name : string) {
    
    my $names_list = $self->{names_list};
    
    $names_list->set($index, $name);
  }
  
  method push : void ($ndarray : R::NDArray) {
    
    $self->check_ndarray($ndarray);
    
    my $ndarrays_list = $self->{ndarrays_list};
    
    $ndarrays_list->push($ndarray);
    
    my $names_list = $self->{ndarrays_list};
    
    $names_list->push(undef);
    
    unless ($ndarrays_list->length == $names_list->length) {
      die "[Unexpected Error]Invalid length.";
    }
  }
  
  method insert : void ($index : int, $ndarray : R::NDArray) {
    
    $self->check_ndarray($ndarray);
    
    my $names_list = $self->{names_list};
    
    my $ndarrays_list = $self->{ndarrays_list};
    
    $ndarrays_list->insert($index, $ndarray);
    
    $names_list->insert($index, undef);
    
    unless ($ndarrays_list->length == $names_list->length) {
      die "[Unexpected Error]Invalid length.";
    }
  }
  
  method remove : R::NDArray ($index : int) {
    
    my $names_list = $self->{names_list};
    
    my $ndarrays_list = $self->{ndarrays_list};
    
    my $ndarray = (R::NDArray)$ndarrays_list->remove($index);
    
    $names_list->remove($index);
    
    unless ($ndarrays_list->length == $names_list->length) {
      die "[Unexpected Error]Invalid length.";
    }
    
    return $ndarray;
  }
  
  method get : R::NDArray ($index : int) {
    
    my $ndarrays_list = $self->{ndarrays_list};
    
    my $ndarray = (R::NDArray)$ndarrays_list->get($index);
    
    return $ndarray;
  }
  
  method set : void ($index : int, $ndarray : R::NDArray) {
    
    $self->check_ndarray($ndarray);
    
    my $ndarrays_list = $self->{ndarrays_list};
    
    $ndarrays_list->set($index, $ndarray);
  }
  
  method get_index_by_name : int ($name : string) {
    
    my $names_list = $self->{names_list};
    
    my $names_length = $names_list->length;
    
    my $match = 0;
    for (my $index = 0; $index < $names_length; $index++) {
      my $name_cmp = $names_list->get($index);
      
      if ($name eq $name_cmp) {
        return $index;
      }
    }
    
    return -1;
  }
  
  method to_string : string () {
    
    my $names = $self->names;
    
    my $names_length = @$names;
    
    my $string_buffer = StringBuffer->new;
    for (my $name_index = 0; $name_index < $names_length; $name_index++) {
      my $name = $names->[$name_index];
      
      $string_buffer->push("[[");
      
      if ($name) {
        $string_buffer->push($name);
      }
      else {
        $string_buffer->push($name_index);
      }
      
      $string_buffer->push("]]\n");
      
      my $ndarray = $self->get($name_index);
      
      my $ndarray_string = $ndarray->to_string;
      
      $string_buffer->push($ndarray_string);
    }
    
    my $string = $string_buffer->to_string;
    
    return $string;
  }
 
  private method check_ndarray : void ($ndarray : R::NDArray) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    unless ($ndarray->is_vector) {
      die "The n-dimension array \$ndarray must be a vector.";
    }
    
    my $ndarray_length = $ndarray->length;
    
    my $names_list = $self->{names_list};
    
    my $names_length = $names_list->length;
    
    if ($names_length != 0) {
      unless ($ndarray_length == $names_length) {
        die "The length of n-dimension array \$ndarray must be the same as the length of names_list field.";
      }
    }
  }
  
}

=pod TODO

set_order

=cut
