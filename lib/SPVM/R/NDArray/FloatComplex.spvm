# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray::FloatComplex extends R::NDArray {
  
  use Complex_2f;
  
  # Fields
  method data : Complex_2f[] () {
    
    return (Complex_2f[])$self->{data};
  }
  
  # Class Mehtods
  static method new : R::NDArray::FloatComplex ($options : object[] = undef) {
    
    my $self = new R::NDArray::FloatComplex;
    
    $self->init($options);
    
    return $self;
  }
  
  # Instance Methods
  protected method init : void ($options : object[] = undef) {
    
    $self->SUPER::init($options);
  }
  
  method create_default_data : Complex_2f[] ($length : int = 0) {
    
    unless ($length >= 0) {
      die "The length \$length must be more than or equal to 0.";
    }
    
    my $data = new Complex_2f[$length];
    
    return $data;
  }
  
  method elem_to_string : string ($data : Complex_2f[], $data_index : int) {
    
    my $elem = $data->[$data_index];
    
    my $string = (string)(float)$elem->{re} . " + " . (string)(float)$elem->{im};
    
    return $string;
  }
  
  method elem_clone : void ($dist_data : Complex_2f[], $dist_data_index : int, $src_data : Complex_2f[], $src_data_index : int) {
    
    $dist_data->[$dist_data_index] = $src_data->[$src_data_index];
  }
  
  precompile method to_double_complex_ndarray : R::NDArray::DoubleComplex () {
    
    unless ($self) {
      die "The n-dimension array \$self must be defined.";
    }
    
    my $length = $self->length;
    
    my $dim = $self->dim;
    
    my $ret_ndarray = R::OP::DoubleComplex->c(undef, $dim);
    
    my $data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i]{re} = (double)$data->[$i]{re};
      $ret_data->[$i]{im} = (double)$data->[$i]{im};
    }
    
    return $ret_ndarray;
  }
  
  method slice : R::NDArray::FloatComplex ($vector_indexes : R::NDArray::Int[]) {
    return (R::NDArray::FloatComplex)$self->SUPER::slice($vector_indexes);
  }
  
  method clone : R::NDArray::FloatComplex ($elem_shallow_clone : int = 0) {
    return (R::NDArray::FloatComplex)$self->SUPER::clone($elem_shallow_clone);
  }
  
}
