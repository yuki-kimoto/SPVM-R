# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray::FloatComplex extends R::NDArray {
  
  use Complex_2f;
  
  # Class Mehtods
  static method new : R::NDArray::FloatComplex ($options : object[] = undef) {
    
    my $self = new R::NDArray::FloatComplex;
    
    $self->init($options);
    
    return $self;
  }
  
  protected method init : void ($options : object[] = undef) {
    
    $self->SUPER::init($options);
  }
  
  method data : Complex_2f[] () {
    
    return (Complex_2f[])$self->{data};
  }
  
  protected method check : void () {
    
    my $data = (Complex_2f[])$self->{data};
    
    my $length = $self->length;
    
    unless (@$data == $length) {
      die "The length of data field must be the same as length field.";
    }
  }
  
  protected method create_default_data : Complex_2f[] ($length : int = 0) {
    
    unless ($length >= 0) {
      die "The length \$length must be more than or equal to 0.";
    }
    
    my $data = new Complex_2f[$length];
    
    return $data;
  }
  
  method clone : R::NDArray::FloatComplex ($elem_shallow_clone : int = 0) {
    return (R::NDArray::FloatComplex)$self->SUPER::clone($elem_shallow_clone);
  }
  
  method elem_to_string : string ($data_index : int) {
    my $data = $self->data;
    
    my $elem = $data->[$data_index];
    
    my $string = (string)(float)$elem->{re} . " + " . (string)(float)$elem->{im};
    
    return $string;
  }
  
  precompile method set_order : void ($indexes_ndarray : R::NDArray::Int) {
    
    $self->check_set_order_args($indexes_ndarray);
    
    my $indexes = $indexes_ndarray->data;
    
    my $data = (Complex_2f[])$self->{data};
    
    my $tmp = $self->clone;
    
    my $tmp_data = $tmp->data;
    
    my $length = $self->length;
    for (my $i = 0; $i < $length; $i++) {
      my $order_index = $indexes->[$i];
      
      $data->[$i] = $tmp_data->[$order_index];
    }
  }
  
  precompile method to_double_complex_ndarray : R::NDArray::DoubleComplex () {
    
    unless ($self) {
      die "The n-dimension array \$self must be defined.";
    }
    
    my $length = $self->length;
    
    my $dim = $self->dim;
    
    my $ret_ndarray = R::OP::DoubleComplex->c(undef, $dim);
    
    my $data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i]{re} = (double)$data->[$i]{re};
      $ret_data->[$i]{im} = (double)$data->[$i]{im};
    }
    
    return $ret_ndarray;
  }
  
  protected method slice_data : object ($data_indexes : int[]) {
    
    unless ($data_indexes) {
      die "The data indexes \$data_indexes must be defined.";
    }
    
    my $data_indexes_length = @$data_indexes;
    my $data = $self->data;
    my $ret_data = new Complex_2f[$data_indexes_length];
    for (my $i = 0; $i < $data_indexes_length; $i++) {
      $ret_data->(Complex_2f[])->[$i] = $data->(Complex_2f[])->[$i];
    }
    
    return $ret_data;
  }
  
  protected method slice_set_data : void ($data_indexes : int[], $data : object) {
    
    my $self_data = $self->{data};
    
    unless ($data_indexes) {
      die "The data indexes \$data_indexes must be defined.";
    }
    
    my $data_index = 0;
    my $data_indexes_length = @$data_indexes;
    for (my $i = 0; $i < $data_indexes_length; $i++) {
      $self_data->(Complex_2f[])->[$i] = $data->(Complex_2f[])->[$data_index];
      $data_index++;
    }
  }
  
  method slice : R::NDArray::FloatComplex ($vector_indexes : R::NDArray::Int[]) {
    return (R::NDArray::FloatComplex)$self->SUPER::slice($vector_indexes);
  }
  
  method slice_set : void ($vector_indexes : R::NDArray::Int[], $ndarray : R::NDArray::FloatComplex) {
    $self->SUPER::slice_set($vector_indexes, $ndarray);
  }
  
}
