# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray::Short extends R::NDArray {
  
  # Fields
  method data : short[] () {
    
    return (short[])$self->{data};
  }
  
  # Class Mehtods
  static method new : R::NDArray::Short ($options : object[] = undef) {
    
    my $self = new R::NDArray::Short;
    
    $self->init($options);
    
    return $self;
  }
  
  protected method init : void ($options : object[] = undef) {
    
    $self->SUPER::init($options);
  }
  
  method create_default_data : short[] ($length : int = 0) {
    
    unless ($length >= 0) {
      die "The length \$length must be more than or equal to 0.";
    }
    
    my $data = new short[$length];
    
    return $data;
  }
  
  method clone : R::NDArray::Short ($elem_shallow_clone : int = 0) {
    return (R::NDArray::Short)$self->SUPER::clone($elem_shallow_clone);
  }
  
  method elem_to_string : string ($data : short[], $data_index : int) {
    
    my $elem = $data->[$data_index];
    
    my $string = (string)(short)$elem;
    
    return $string;
  }
  
  method elem_assign : void ($dist_data : short[], $dist_data_index : int, $src_data : short[], $src_data_index : int) {
    
    $dist_data->[$dist_data_index] = $src_data->[$src_data_index];
  }
  
  method elem_clone : void ($dist_data : short[], $dist_data_index : int, $src_data : short[], $src_data_index : int) {
    
    $dist_data->[$dist_data_index] = $src_data->[$src_data_index];
  }
  
  method elem_cmp : int ($data : short[], $a_data_index : int, $b_data_index : int) {
    
    my $cmp = $data->[$a_data_index] <=> $data->[$b_data_index];
    
    return $cmp;
  }
  
  method slice : R::NDArray::Short ($vector_indexes : R::NDArray::Int[]) {
    return (R::NDArray::Short)$self->SUPER::slice($vector_indexes);
  }
  
}
