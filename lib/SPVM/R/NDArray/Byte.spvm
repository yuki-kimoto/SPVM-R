# Copyright (c) 2024 Yuki Kimoto
# MIT License

# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray::Byte extends R::NDArray {
  
  use Sort;
  
  # Fields
  method data : byte[] () {
    
    return (byte[])$self->{data};
  }
  
  # Class Mehtods
  static method new : R::NDArray::Byte ($options : object[] = undef) {
    
    my $self = new R::NDArray::Byte;
    
    $self->init($options);
    
    return $self;
  }
  
  protected method init : void ($options : object[] = undef) {
    
    $self->SUPER::init($options);
  }
  
  method create_default_data : byte[] ($length : int = 0) {
    
    unless ($length >= 0) {
      die "The length \$length must be more than or equal to 0.";
    }
    
    my $data = new byte[$length];
    
    return $data;
  }
  
  method elem_to_string : string ($data : byte[], $data_index : int) {
    
    my $elem = $data->[$data_index];
    
    my $string = (string)(byte)$elem;
    
    return $string;
  }
  
  method elem_assign : void ($dist_data : byte[], $dist_data_index : int, $src_data : byte[], $src_data_index : int) {
    
    $dist_data->[$dist_data_index] = $src_data->[$src_data_index];
  }
  
  method elem_clone : void ($dist_data : byte[], $dist_data_index : int, $src_data : byte[], $src_data_index : int) {
    
    $dist_data->[$dist_data_index] = $src_data->[$src_data_index];
  }
  
  method elem_cmp : int ($data : byte[], $a_data_index : int, $b_data_index : int) {
    
    my $cmp = $data->[$a_data_index] <=> $data->[$b_data_index];
    
    return $cmp;
  }
  
  method clone : R::NDArray::Byte ($elem_shallow_clone : int = 0) {
    return (R::NDArray::Byte)$self->SUPER::clone($elem_shallow_clone);
  }
  
  method slice : R::NDArray::Byte ($vector_indexes : R::NDArray::Int[]) {
    return (R::NDArray::Byte)$self->SUPER::slice($vector_indexes);
  }
  
  method slice_set : void ($vector_indexes : R::NDArray::Int[], $ndarray : R::NDArray::Byte) {
    $self->SUPER::slice_set($vector_indexes, $ndarray);
  }
  
}
