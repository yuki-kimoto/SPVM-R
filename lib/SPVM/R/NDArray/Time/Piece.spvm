# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray::Time::Piece extends R::NDArray {
  
  use Fn;
  use Array;
  use Time::Piece;
  
  # Fields
  method data : Time::Piece[] () {
    
    return (Time::Piece[])$self->{data};
  }
  
  # Class Mehtods
  static method new : R::NDArray::Time::Piece ($options : object[] = undef) {
    
    my $self = new R::NDArray::Time::Piece;
    
    $self->init($options);
    
    return $self;
  }
  
  # Instance Methods
  method create_default_data : Time::Piece[] ($length : int = 0) {
    
    unless ($length >= 0) {
      die "The length \$length must be more than or equal to 0.";
    }
    
    my $data = new Time::Piece[$length];
    
    return $data;
  }
  
  method elem_to_string : string ($data : Time::Piece[], $data_index : int) {
    
    my $elem = $data->[$data_index];
    
    unless ($elem) {
      return undef;
    }
    
    my $string = $elem->strftime("%Y-%m-%d %H:%M:%S");
    
    return $string;
  }
  
  method elem_assign : void ($dist_data : Time::Piece[], $dist_data_index : int, $src_data : Time::Piece[], $src_data_index : int) {
    
    $dist_data->[$dist_data_index] = $src_data->[$src_data_index];
  }
  
  method elem_clone : void ($dist_data : Time::Piece[], $dist_data_index : int, $src_data : Time::Piece[], $src_data_index : int) {
    
    my $src_elem = $src_data->[$src_data_index];
    
    if ($src_elem) {
      $dist_data->[$dist_data_index] = $src_elem->clone;
    }
    else {
      $dist_data->[$dist_data_index] = undef;
    }
  }
  
  method elem_cmp : int ($data : Time::Piece[], $a_data_index : int, $b_data_index : int) {
    
    my $a_elem = $data->[$a_data_index];
    
    my $b_elem = $data->[$b_data_index];
    
    my $cmp = 0;
    if ($a_elem && $b_elem) {
      my $a_epoch = $a_elem->epoch;
      
      my $b_epoch = $b_elem->epoch;
      
      $cmp = $a_epoch <=> $b_epoch;
    }
    elsif ($a_elem) {
      $cmp = 1;
    }
    elsif ($b_elem) {
      $cmp = 0;
    }
    
    return $cmp;
  }
  
  method elem_is_na : int ($data : Time::Piece[], $data_index : int) {
    
    my $elem_is_na = 0;
    if (!$data->[$data_index]) {
      $elem_is_na = 1;
    }
    
    return $elem_is_na;
  }
  
  method clone : R::NDArray::Time::Piece ($shallow : int = 0) {
    return (R::NDArray::Time::Piece)$self->SUPER::clone($shallow);
  }
  
  method slice : R::NDArray::Time::Piece ($asix_indexes_product : R::NDArray::Int[]) {
    return (R::NDArray::Time::Piece)$self->SUPER::slice($asix_indexes_product);
  }
  
  precompile method to_long_ndarray : R::NDArray::Long () {
    
    my $length = $self->length;
    
    my $dim = $self->dim;
    
    my $ret_ndarray = R::OP::Long->c(undef, $dim);
    
    my $data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $data->[$i]->epoch;
    }
    
    return $ret_ndarray;
  }
  
}
