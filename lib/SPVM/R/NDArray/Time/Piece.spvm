# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray::Time::Piece extends R::NDArray::Object {
  
  use Fn;
  use Array;
  use Time::Piece;
  
  # Class Mehtods
  static method new : R::NDArray::Time::Piece ($options : object[] = undef) {
    
    my $self = new R::NDArray::Time::Piece;
    
    $self->init($options);
    
    return $self;
  }
  
  protected method init : void ($options : object[] = undef) {
    
    $self->SUPER::init($options);
  }
  
  method data : Time::Piece[] () {
    
    return (Time::Piece[])$self->{data};
  }
  
  protected method check : void () {
    
    my $data = (Time::Piece[])$self->{data};
    
    my $length = $self->length;
    
    unless (@$data == $length) {
      die "The length of data field must be the same as length field.";
    }
  }
  
  protected method create_default_data : Time::Piece[] ($length : int = 0) {
    
    unless ($length >= 0) {
      die "The length \$length must be more than or equal to 0.";
    }
    
    my $data = new Time::Piece[$length];
    
    return $data;
  }
  
  method clone : R::NDArray::Time::Piece ($elem_shallow_clone : int = 0) {
    return (R::NDArray::Time::Piece)$self->SUPER::clone($elem_shallow_clone);
  }
  
  method elem_to_string : string ($data_index : int) {
    
    my $data = $self->data;
    
    my $elem = $data->[$data_index];
    
    unless ($elem) {
      return "undef";
    }
    
    my $string = $elem->strftime("%Y-%m-%d %H:%M:%S");
    
    return $string;
  }
  
  method elem_to_object : Time::Piece ($data_index : int) {
    
    my $data = $self->data;
    
    my $elem = $data->[$data_index];
    
    my $object = $elem;
    
    return $object;
  }
  
  method elem_clone : Time::Piece ($data_index : int) {
    
    my $data = $self->data;
    
    my $elem = $data->[$data_index];
    
    my $clone = (Time::Piece)undef;
    if ($elem) {
      $clone = $elem->clone;
    }
    
    return $clone;
  }
  
  method slice : R::NDArray::Time::Piece ($vector_indexes : R::NDArray::Int[]) {
    return (R::NDArray::Time::Piece)$self->SUPER::slice($vector_indexes);
  }
  
  method slice_set : void ($vector_indexes : R::NDArray::Int[], $ndarray : R::NDArray::Time::Piece) {
    $self->SUPER::slice_set($vector_indexes, $ndarray);
  }
  
  protected method elem_cmp_old : int ($a_elem : Time::Piece, $b_elem : Time::Piece) {
    
    my $cmp = $a_elem->epoch <=> $b_elem->epoch;
    
    return $cmp;
  }
  
  protected method elem_cmp : int ($a_data_index : int, $b_data_index : int) {
    
    my $data = $self->data;
    
    my $cmp = $data->[$a_data_index]->epoch <=> $data->[$b_data_index]->epoch;
    
    return $cmp;
  }
  
}
