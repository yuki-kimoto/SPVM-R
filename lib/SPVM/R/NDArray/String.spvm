# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray::String extends R::NDArray::Object {
  
  use Fn;
  use Array;
  use R::NDArray::StringBuffer;
  use R::NDArray::Time::Piece;
  use R::OP::StringBuffer;
  use R::OP::Time::Piece;
  
  # Fields
  method data : string[] () {
    
    return (string[])$self->{data};
  }
  
  # Class Mehtods
  static method new : R::NDArray::String ($options : object[] = undef) {
    
    my $self = new R::NDArray::String;
    
    $self->init($options);
    
    return $self;
  }
  
  protected method init : void ($options : object[] = undef) {
    
    $self->SUPER::init($options);
  }
  
  protected method create_default_data : string[] ($length : int = 0) {
    
    unless ($length >= 0) {
      die "The length \$length must be more than or equal to 0.";
    }
    
    my $data = new string[$length];
    
    return $data;
  }
  
  method clone : R::NDArray::String ($elem_shallow_clone : int = 0) {
    return (R::NDArray::String)$self->SUPER::clone($elem_shallow_clone);
  }
  
  method elem_to_string : string ($data_index : int) {
    
    my $data = $self->data;
    
    my $elem = $data->[$data_index];
    
    my $string = $elem;
    
    return $string;
  }
  
  method elem_clone : string ($data : string[], $data_index : int) {
    
    my $elem = $data->[$data_index];
    
    my $clone = copy $elem;
    
    return $clone;
  }
  
  precompile method to_int_ndarray : R::NDArray::Int () {
    
    unless ($self) {
      die "The n-dimension array \$self must be defined.";
    }
    
    my $length = $self->length;
    
    my $dim = $self->dim;
    
    my $ret_ndarray = R::OP::Int->c(undef, $dim);
    
    my $data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (int)$data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_long_ndarray : R::NDArray::Long () {
    
    unless ($self) {
      die "The n-dimension array \$self must be defined.";
    }
    
    my $length = $self->length;
    
    my $dim = $self->dim;
    
    my $ret_ndarray = R::OP::Long->c(undef, $dim);
    
    my $data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (long)$data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_float_ndarray : R::NDArray::Float () {
    
    unless ($self) {
      die "The n-dimension array \$self must be defined.";
    }
    
    my $length = $self->length;
    
    my $dim = $self->dim;
    
    my $ret_ndarray = R::OP::Float->c(undef, $dim);
    
    my $data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (float)$data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_double_ndarray : R::NDArray::Double () {
    
    unless ($self) {
      die "The n-dimension array \$self must be defined.";
    }
    
    my $length = $self->length;
    
    my $dim = $self->dim;
    
    my $ret_ndarray = R::OP::Double->c(undef, $dim);
    
    my $data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (double)$data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_float_complex_ndarray : R::NDArray::FloatComplex () {
    die "This method will be implemented.";
  }
  
  precompile method to_double_complex_ndarray : R::NDArray::DoubleComplex () {
    die "This method will be implemented.";
  }
  
  precompile method to_string_buffer_ndarray : R::NDArray::StringBuffer () {
    
    unless ($self) {
      die "The n-dimension array \$self must be defined.";
    }
    
    my $length = $self->length;
    
    my $dim = $self->dim;
    
    my $ret_ndarray = R::OP::StringBuffer->c(undef, $dim);
    
    my $data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = StringBuffer->new($data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_time_piece_ndarray : R::NDArray::Time::Piece () {
    
    unless ($self) {
      die "The n-dimension array \$self must be defined.";
    }
    
    my $length = $self->length;
    
    my $dim = $self->dim;
    
    my $ret_ndarray = R::OP::Time::Piece->c(undef, $dim);
    
    my $data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      if ($data->[$i]) {
        if (length $data->[$i] == 10) {
          
          my $tp = (Time::Piece)undef;
          
          eval { $tp = Time::Piece->strptime($data->[$i], "%Y-%m-%d"); }
          
          $ret_data->[$i] = $tp;
        }
        elsif (length $data->[$i] == 19) {
          
          my $tp = (Time::Piece)undef;
          
          eval { $tp = Time::Piece->strptime($data->[$i], "%Y-%m-%d %H:%M:%S"); }
          
          $ret_data->[$i] = $tp;
        }
        else {
          $ret_data->[$i] = undef;
        }
      }
      else {
        $ret_data->[$i] = undef;
      }
    }
    
    return $ret_ndarray;
  }
  
  method slice : R::NDArray::String ($vector_indexes : R::NDArray::Int[]) {
    return (R::NDArray::String)$self->SUPER::slice($vector_indexes);
  }
  
  method slice_set : void ($vector_indexes : R::NDArray::Int[], $ndarray : R::NDArray::String) {
    $self->SUPER::slice_set($vector_indexes, $ndarray);
  }
  
  method elem_cmp_old : int ($a_elem : string, $b_elem : string) {
    
    my $cmp = $a_elem cmp $b_elem;
    
    return $cmp;
  }
  
  method elem_cmp : int ($a_data_index : int, $b_data_index : int) {
    
    my $data = $self->data;
    
    my $cmp = $data->[$a_data_index] cmp $data->[$b_data_index];
    
    return $cmp;
  }
  
  method sort_asc : void () {
    
    unless ($self->is_vector) {
      die "The instance must be a vector.";
    }
    
    my $data = $self->data;
    
    Sort->sort_string_asc($data);
  }
  
  method sort_desc : void () {
    
    unless ($self->is_vector) {
      die "The instance must be a vector.";
    }
    
    my $data = $self->data;
    
    Sort->sort_string_desc($data);
  }

}
