# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray::Object extends R::NDArray {
  
  # Fields
  method data : object[] () {
    
    return (object[])$self->{data};
  }
  
  # Class Methods
  static method new : R::NDArray::Object ($options : object[] = undef) {
    
    my $self = new R::NDArray::Object;
    
    $self->init($options);
    
    return $self;
  }
  
  method elem_assign : void ($dist_data : object[], $dist_data_index : int, $src_data : object[], $src_data_index : int) {
    
    $dist_data->[$dist_data_index] = $src_data->[$src_data_index];
  }
  
  precompile method set_order : void ($indexes_ndarray : R::NDArray::Int) {
    
    $self->check_set_order_args($indexes_ndarray);
    
    my $indexes = $indexes_ndarray->data;
    
    my $data = (object[])$self->{data};
    
    my $tmp = $self->clone;
    
    my $tmp_data = (object[])$tmp->{data};
    
    my $length = $self->length;
    for (my $i = 0; $i < $length; $i++) {
      my $order_index = $indexes->[$i];
      
      $data->[$i] = $tmp_data->[$order_index];
    }
  }
  
  method clone : R::NDArray::Object ($elem_shallow_clone : int = 0) {
    return (R::NDArray::Object)$self->SUPER::clone($elem_shallow_clone);
  }
  
  method slice_data : object[] ($data_indexes : int[]) {
    
    unless ($data_indexes) {
      die "The data indexes \$data_indexes must be defined.";
    }
    
    my $data_indexes_length = @$data_indexes;
    my $data = $self->data;
    my $ret_data = new object[$data_indexes_length];
    for (my $i = 0; $i < $data_indexes_length; $i++) {
      my $data_index = $data_indexes->[$i];
      $ret_data->[$i] = $data->[$data_index];
    }
    
    return $ret_data;
  }
  
  precompile method slice_set_data : void ($data_indexes : int[], $data : object[]) {
    
    my $self_data = $self->data;
    
    unless ($data_indexes) {
      die "The data indexes \$data_indexes must be defined.";
    }
    
    for (my $i = 0; $i < @$data; $i++) {
      my $data_index = $data_indexes->[$i];
      $self_data->[$data_index] = $data->[$i];
    }
  }
  
  method create_default_data : object[] ($length : int = 0) {
    
    unless ($length >= 0) {
      die "The length \$length must be more than or equal to 0.";
    }
    
    my $data = new object[$length];
    
    return $data;
  }
  
  method slice : R::NDArray::Object ($vector_indexes : R::NDArray::Int[]) {
    return (R::NDArray::Object)$self->SUPER::slice($vector_indexes);
  }
  
  method slice_set : void ($vector_indexes : R::NDArray::Int[], $ndarray : R::NDArray::Object) {
    $self->SUPER::slice_set($vector_indexes, $ndarray);
  }
  
}
