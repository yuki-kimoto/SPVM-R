# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray::Object extends R::NDArray {
  
  static method new : R::NDArray::Object ($options : object[] = undef) {
    
    my $self = new R::NDArray::Object;
    
    $self->init($options);
    
    return $self;
  }
  
  precompile method set_order : void ($indexes_ndarray : R::NDArray::Int) {
    
    $self->check_set_order_args($indexes_ndarray);
    
    my $indexes = $indexes_ndarray->data;
    
    my $data = (object[])$self->{data};
    
    my $tmp = $self->clone;
    
    my $tmp_data = (object[])$tmp->{data};
    
    my $length = $self->length;
    for (my $i = 0; $i < $length; $i++) {
      my $order_index = $indexes->[$i];
      
      $data->[$i] = $tmp_data->[$order_index];
    }
  }
  
  method clone :  R::NDArray () { die "Not implemented."; }
  
  protected method slice_data : object ($data_indexes : int[]) {
    
    unless ($data_indexes) {
      die "The data indexes \$data_indexes must be defined.";
    }
    
    my $data_indexes_length = @$data_indexes;
    my $data = $self->data;
    my $ret_data = new object[$data_indexes_length];
    for (my $i = 0; $i < $data_indexes_length; $i++) {
      $ret_data->(object[])->[$i] = $data->(object[])->[$i];
    }
    
    return $ret_data;
  }
  
  protected method slice_set_data : void ($data_indexes : int[], $data : object) {
    
    my $self_data = $self->{data};
    
    unless ($data_indexes) {
      die "The data indexes \$data_indexes must be defined.";
    }
    
    my $data_indexes_length = @$data_indexes;
    for (my $i = 0; $i < $data_indexes_length; $i++) {
      $self_data->(object[])->[$i] = $data->(object[])->[$i];
    }
  }
  
}
