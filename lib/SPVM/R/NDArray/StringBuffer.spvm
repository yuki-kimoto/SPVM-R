# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray::StringBuffer extends R::NDArray::Object {
  
  use Fn;
  use Array;
  use StringBuffer;
  
  # Class Mehtods
  static method new : R::NDArray::StringBuffer ($options : object[] = undef) {
    
    my $self = new R::NDArray::StringBuffer;
    
    $self->init($options);
    
    return $self;
  }
  
  protected method init : void ($options : object[] = undef) {
    
    $self->SUPER::init($options);
  }
  
  method data : StringBuffer[] () {
    
    return (StringBuffer[])$self->{data};
  }
  
  protected method check : void () {
    
    my $data = (StringBuffer[])$self->{data};
    
    my $length = $self->length;
    
    unless (@$data == $length) {
      die "The length of data field must be the same as length field.";
    }
  }
  
  protected method create_default_data : StringBuffer[] ($length : int = 0) {
    
    unless ($length >= 0) {
      die "The length \$length must be more than or equal to 0.";
    }
    
    my $data = new StringBuffer[$length];
    
    return $data;
  }
  
  method clone : R::NDArray::StringBuffer ($elem_shallow_clone : int = 0) {
    return (R::NDArray::StringBuffer)$self->SUPER::clone($elem_shallow_clone);
  }
  
  method elem_to_string : string ($data_index : int) {
    
    my $data = $self->data;
    
    my $elem = $data->[$data_index];
    
    unless ($elem) {
      return "undef";
    }
    
    my $string = $elem->to_string;
    
    return $string;
  }
  
  method elem_clone : StringBuffer ($data_index : int) {
    
    my $data = $self->data;
    
    my $elem = $data->[$data_index];
    
    my $clone = (StringBuffer)undef;
    if ($elem) {
      $clone = StringBuffer->new($elem->to_string);
    }
    
    return $clone;
  }
  
  method slice : R::NDArray::StringBuffer ($vector_indexes : R::NDArray::Int[]) {
    return (R::NDArray::StringBuffer)$self->SUPER::slice($vector_indexes);
  }
  
  method slice_set : void ($vector_indexes : R::NDArray::Int[], $ndarray : R::NDArray::StringBuffer) {
    $self->SUPER::slice_set($vector_indexes, $ndarray);
  }
  
  protected method elem_cmp : int ($a_data_index : int, $b_data_index : int) {
    
    my $data = $self->data;
    
    my $cmp = $data->[$a_data_index]->to_string cmp $data->[$b_data_index]->to_string;
    
    return $cmp;
  }
  
  method sort_asc : void ($offset : int = 0, $length : int = -1) {
    
    unless ($self->is_vector) {
      die "The instance must be a vector.";
    }
    
    my $data = $self->data;
    
    Sort->sort_object($data, method : int ($a : object, $b : object) {
      return $a->(StringBuffer)->to_string cmp $b->(StringBuffer)->to_string;
    }, $offset, $length);
  }
  
  method sort_desc : void ($offset : int = 0, $length : int = -1) {
    
    unless ($self->is_vector) {
      die "The instance must be a vector.";
    }
    
    my $data = $self->data;
    
    Sort->sort_object($data, method : int ($a : object, $b : object) {
      return $b->(StringBuffer)->to_string cmp $a->(StringBuffer)->to_string;
    }, $offset, $length);
  }

}
