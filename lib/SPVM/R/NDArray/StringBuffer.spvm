# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray::StringBuffer extends R::NDArray {
  
  use Fn;
  use Array;
  use StringBuffer;
  
  # Class Mehtods
  static method new : R::NDArray::StringBuffer ($options : object[] = undef) {
    
    my $self = new R::NDArray::StringBuffer;
    
    $self->init($options);
    
    return $self;
  }
  
  protected method init : void ($options : object[] = undef) {
    
    my $element_size = Fn->sizeof_native_pointer;
    
    $options = Fn->merge_options($options, {element_size => $element_size, type => "StringBuffer"});
    
    $self->SUPER::init($options);
  }
  
  method data : StringBuffer[] () {
    
    return (StringBuffer[])$self->{data};
  }
  
  protected method check : void () {
    
    my $data = (StringBuffer[])$self->{data};
    
    my $length = $self->length;
    
    unless (@$data == $length) {
      die "The length of data field must be the same as length field.";
    }
  }
  
  protected method create_default_data : StringBuffer[] ($length : int) {
    
    unless ($length >= 0) {
      die "The length \$length must be more than or equal to 0.";
    }
    
    my $data = new StringBuffer[$length];
    
    return $data;
  }
  
  method clone : R::NDArray::StringBuffer () {
    return (R::NDArray::StringBuffer)$self->SUPER::clone;
  }
  
  method element_to_string : string ($element_ref : StringBuffer[]) {
    
    unless ($element_ref->[0]) {
      return "undef";
    }
    
    my $string = $element_ref->[0]->to_string;
    
    return $string;
  }
  
}
