# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray::StringBuffer extends R::NDArray {
  
  use Fn;
  use Array;
  use StringBuffer;
  use Comparable;
  
  # Fields
  
  has _comparable : Comparable;
  
  # Class Mehtods
  static method new : R::NDArray::StringBuffer ($options : object[] = undef) {
    
    my $self = new R::NDArray::StringBuffer;
    
    $self->init($options);
    
    $self->{_comparable} = StringBuffer->new;
    
    return $self;
  }
  
  # Instance Methods
  method data : StringBuffer[] () {
    
    return (StringBuffer[])$self->{data};
  }
  
  method create_default_data : StringBuffer[] ($length : int = 0) {
    
    unless ($length >= 0) {
      die "The length \$length must be more than or equal to 0.";
    }
    
    my $data = new StringBuffer[$length];
    
    return $data;
  }
  
  method elem_to_string : string ($data : StringBuffer[], $data_index : int) {
    
    my $elem = $data->[$data_index];
    
    my $string = (string)undef;
    if ($data->[$data_index]) {
      $string = $data->[$data_index]->to_string;
    }
    
    return $string;
  }
  
  method elem_assign : void ($dist_data : StringBuffer[], $dist_data_index : int, $src_data : StringBuffer[], $src_data_index : int) {
    
    $dist_data->[$dist_data_index] = $src_data->[$src_data_index];
  }
  
  method elem_clone : void ($dist_data : StringBuffer[], $dist_data_index : int, $src_data : StringBuffer[], $src_data_index : int) {
    
    if ($src_data->[$src_data_index]) {
      $dist_data->[$dist_data_index] = StringBuffer->new($src_data->[$src_data_index]->to_string);
    }
  }
  
  method elem_cmp : int ($a_data : StringBuffer[], $a_data_index : int, $b_data : StringBuffer[], $b_data_index : int) {
    
    my $comparable = $self->{_comparable};
    
    my $a_buffer = $a_data->[$a_data_index];
    
    my $b_buffer = $b_data->[$b_data_index];
    
    my $cmp = $comparable->cmp($a_buffer, $b_buffer);
    
    return $cmp;
  }
  
  method elem_is_na : int ($data : StringBuffer[], $data_index : int) {
    
    my $elem_is_na = 0;
    if (!$data->[$data_index]) {
      $elem_is_na = 1;
    }
    
    return $elem_is_na;
  }
  
  method clone : R::NDArray::StringBuffer ($shallow : int = 0) {
    return (R::NDArray::StringBuffer)$self->SUPER::clone($shallow);
  }
  
  method slice : R::NDArray::StringBuffer ($indexes_product : R::NDArray::Int[]) {
    return (R::NDArray::StringBuffer)$self->SUPER::slice($indexes_product);
  }
  
}
