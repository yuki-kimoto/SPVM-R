# Copyright (c) 2023 Yuki Kimoto
# MIT License

class R::NDArray::DoubleComplex {
  use Complex_2d;
  
  # Interface
  interface R::NDArray;
  
  # Fields
  has array : Complex_2d[];
  
  has dim : int[];
  
  # Class Methods
  static method new : R::NDArray::DoubleComplex : ($dim : int[], $array : Complex_2d[] = undef) {
    
    my $array_length = -1;
    if ($array) {
      $array_length = @$array;
    }
    
    R::NDArray->init_partially($dim, $array_length);
    
    my $self = new R::NDArray::DoubleComplex;
    
    if ($array) {
      $self->{array} = (Complex_2d[])copy $array;
    }
    else {
      $self->{array} = new Complex_2d[$array_length];
    }
    
    return $self;
  }
  
  # Instance Methods
  
  method dim : int[] {
    return (int)
  }
  
  method length : int {
    return $self->R::NDArray::length;
  }
  
  method to_array : Complex_2d[] () {
    return (Complex_2d[])copy $self->{array};
  }
  
  method get_array_unsafe : Complex_2d[] () {
    return $self->{array};
  }
  
  method dim : int[] () {
    return (int[])copy $self->{dim};
  }
  
  method get_dim_unsafe : int[] () {
    return $self->{dim};
  }
  
  method set_dim : void ($dim : int[]) {
    return $self->R::NDArray::set_dim($dim);
  }
}
