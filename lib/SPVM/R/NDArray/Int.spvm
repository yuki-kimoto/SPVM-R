# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray::Int extends R::NDArray {
  
  # Class Mehtods
  static method new : R::NDArray::Int ($options : object[] = undef) {
    
    my $self = new R::NDArray::Int;
    
    $self->init($options);
    
    return $self;
  }
  
  protected method init : void ($options : object[] = undef) {
    
    $options = Fn->merge_options($options, {element_size => 4, type => "int", is_numeric => 1});
    
    $self->SUPER::init($options);
  }
  
  method data : int[] () {
    
    return (int[])$self->{data};
  }
  
  protected method check : void () {
    
    my $data = (int[])$self->{data};
    
    my $length = $self->length;
    
    unless (@$data == $length) {
      die "The length of data field must be the same as length field.";
    }
  }
  
  protected method create_default_data : int[] ($length : int) {
    
    unless ($length >= 0) {
      die "The length \$length must be more than or equal to 0.";
    }
    
    my $data = new int[$length];
    
    return $data;
  }
  
  method clone : R::NDArray::Int () {
    return (R::NDArray::Int)$self->SUPER::clone;
  }
  
  method element_to_string : string ($data_index : int) {
    my $data = $self->data;
    
    my $element = $data->[$data_index];
    
    my $string = (string)(int)$element;
    
    return $string;
  }
  
  precompile method set_order : void ($indexes : int[]) {
    
    $self->check_set_order_args($indexes);
    
    my $data = (int[])$self->{data};
    
    my $tmp = $self->clone;
    
    my $tmp_data = $tmp->data;
    
    my $length = $self->length;
    for (my $i = 0; $i < $length; $i++) {
      my $order_index = $indexes->[$i];
      
      $data->[$i] = $tmp_data->[$order_index];
    }
  }
  
  precompile method to_long : R::NDArray::Long () {
    
    unless ($self) {
      die "The n-dimension array \$self must be defined.";
    }
    
    my $length = $self->length;
    
    my $x_dim = $self->dim;
    
    my $ret_ndarray = R::OP::Long->c(undef, $x_dim);
    
    my $x_data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (long)$x_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_float : R::NDArray::Float () {
    
    unless ($self) {
      die "The n-dimension array \$self must be defined.";
    }
    
    my $length = $self->length;
    
    my $x_dim = $self->dim;
    
    my $ret_ndarray = R::OP::Float->c(undef, $x_dim);
    
    my $x_data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (float)$x_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_double : R::NDArray::Double () {
    
    unless ($self) {
      die "The n-dimension array \$self must be defined.";
    }
    
    my $length = $self->length;
    
    my $x_dim = $self->dim;
    
    my $ret_ndarray = R::OP::Double->c(undef, $x_dim);
    
    my $x_data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (double)$x_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_float_complex : R::NDArray::FloatComplex () {
    
    unless ($self) {
      die "The n-dimension array \$self must be defined.";
    }
    
    my $length = $self->length;
    
    my $x_dim = $self->dim;
    
    my $ret_ndarray = R::OP::FloatComplex->c(undef, $x_dim);
    
    my $x_data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i]{re} = (float)$x_data->[$i];
      $ret_data->[$i]{im} = 0f;
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_double_complex : R::NDArray::DoubleComplex () {
    
    unless ($self) {
      die "The n-dimension array \$self must be defined.";
    }
    
    my $length = $self->length;
    
    my $x_dim = $self->dim;
    
    my $ret_ndarray = R::OP::DoubleComplex->c(undef, $x_dim);
    
    my $x_data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i]{re} = (double)$x_data->[$i];
      $ret_data->[$i]{im} = 0;
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_string : R::NDArray::String () {
    
    unless ($self) {
      die "The n-dimension array \$self must be defined.";
    }
    
    my $length = $self->length;
    
    my $x_dim = $self->dim;
    
    my $ret_ndarray = R::OP::String->c(undef, $x_dim);
    
    my $x_data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (string)$x_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
}
