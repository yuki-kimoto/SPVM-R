# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray::Int extends R::NDArray {
  
  # Fields
  method data : int[] () {
    
    return (int[])$self->{data};
  }
  
  # Class Mehtods
  static method new : R::NDArray::Int ($options : object[] = undef) {
    
    my $self = new R::NDArray::Int;
    
    $self->init($options);
    
    return $self;
  }
  
  # Instance Methods
  protected method create_default_data : int[] ($length : int = 0) {
    
    unless ($length >= 0) {
      die "The length \$length must be more than or equal to 0.";
    }
    
    my $data = new int[$length];
    
    return $data;
  }
  
  method elem_to_string : string ($data : int[], $data_index : int) {
    
    my $elem = $data->[$data_index];
    
    my $string = (string)(int)$elem;
    
    return $string;
  }
  
  method elem_assign : void ($dist_data : int[], $dist_data_index : int, $src_data : int[], $src_data_index : int) {
    
    $dist_data->[$dist_data_index] = $src_data->[$src_data_index];
  }
  
  method elem_clone : void ($dist_data : int[], $dist_data_index : int, $src_data : int[], $src_data_index : int) {
    
    $dist_data->[$dist_data_index] = $src_data->[$src_data_index];
  }
  
  method elem_cmp : int ($data : int[], $a_data_index : int, $b_data_index : int) {
    
    my $cmp = $data->[$a_data_index] <=> $data->[$b_data_index];
    
    return $cmp;
  }
  
  method clone : R::NDArray::Int ($shallow : int = 0) {
    return (R::NDArray::Int)$self->SUPER::clone($shallow);
  }
  
  method slice : R::NDArray::Int ($asix_indexes_product : R::NDArray::Int[]) {
    return (R::NDArray::Int)$self->SUPER::slice($asix_indexes_product);
  }
  
  precompile method to_byte_ndarray : R::NDArray::Byte () {
    
    my $length = $self->length;
    
    my $dim = $self->dim;
    
    my $ret_ndarray = R::OP::Long->c(undef, $dim);
    
    my $data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (byte)$data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_short_ndarray : R::NDArray::Short () {
    
    my $length = $self->length;
    
    my $dim = $self->dim;
    
    my $ret_ndarray = R::OP::Long->c(undef, $dim);
    
    my $data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (short)$data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_long_ndarray : R::NDArray::Long () {
    
    my $length = $self->length;
    
    my $dim = $self->dim;
    
    my $ret_ndarray = R::OP::Long->c(undef, $dim);
    
    my $data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (long)$data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_float_ndarray : R::NDArray::Float () {
    
    my $length = $self->length;
    
    my $dim = $self->dim;
    
    my $ret_ndarray = R::OP::Float->c(undef, $dim);
    
    my $data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (float)$data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_double_ndarray : R::NDArray::Double () {
    
    my $length = $self->length;
    
    my $dim = $self->dim;
    
    my $ret_ndarray = R::OP::Double->c(undef, $dim);
    
    my $data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (double)$data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_string_ndarray : R::NDArray::String () {
    
    my $length = $self->length;
    
    my $dim = $self->dim;
    
    my $ret_ndarray = R::OP::String->c(undef, $dim);
    
    my $data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (string)$data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_indexes : R::NDArray::Int () {
    
    unless ($self->is_vector) {
      die "This n-dimension array must be a vector.";
    }
    
    my $length = $self->length;
    
    my $indexes_list = IntList->new;
    
    my $data = $self->data;
    
    for (my $i = 0; $i < $length; $i++) {
      my $elem = $data->[$i];
      
      if ($elem) {
        $indexes_list->push($i);
      }
    }
    
    my $ret_data = $indexes_list->to_array;
    
    my $ret_ndarray = R::OP::Int->c($ret_data);
    
    return $ret_ndarray;
  }
  
}
