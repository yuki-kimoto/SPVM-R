# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray {
  
  use Hash;
  
  # Fields
  has data : protected object;
  method data : object () { die "Not implemented."; }
  
  has item_size : ro protected int;
  
  has length : ro protected int;
  
  has type : ro protected string;
  
  has dim : int[];
  
  method dim : int[] () {
    my $x_dim = $self->{dim};
    
    my $x_dim_clone = copy $x_dim;
    
    return $x_dim_clone;
  }
  
  method set_dim : void ($x_dim : int[]) {
    
    unless ($x_dim) {
      die "The dimension \$x_dim must be defined.";
    }
    
    my $length_calcurated_by_dim = 1;
    for my $x_dim_element (@$x_dim) {
      
      unless ($x_dim_element > 0) {
        die "The element of the dimension \$x_dim must be greater than 0.";
      }
      
      $length_calcurated_by_dim *= $x_dim_element;
    }
    
    my $length = $self->{length};
    
    if ($length_calcurated_by_dim != $length) {
      die "\"length\" field must be the same as the length calcurated by the dimension \$x_dim.";
    }
    
    $self->{dim} = copy $x_dim;
  }
  
  # Class Mehtods
  static method new : R::NDArray ($options : object[] = undef) {
    
    my $self = new R::NDArray;
    
    $self->init($options);
    
    return $self;
  }
  
  # Instance Methods
  protected method init : void ($options : object[] = undef) {
    
    my $options_h = Hash->new($options);
    
    my $item_size = $options_h->get_or_default_int("item_size", -1);
    unless ($item_size > 0) {
      die "item_size option must be greter than 0.";
    }
    $self->{item_size} = $item_size;
    
    my $type = $options_h->get_or_default_string("type", undef);
    unless ($type) {
      die "type option must be defined.";
    }
    unless (length $type) {
      die "The length of \"type\" option must greater than 0.";
    }
    $self->{type} = $type;
    
    my $length = $options_h->get_or_default_int("length", 0);
    
    my $x_dim_object = $options_h->get_or_default("dim", undef);
    unless ($x_dim_object) {
      if ($length == 0) {
        $x_dim_object = undef;
      }
      elsif ($length > 0) {
        $x_dim_object = (object)[$length];
      }
      else {
        die "dim option must be defined if length option is not greater than or equal to 0.";
      }
    }
    unless (!$x_dim_object || $x_dim_object isa int[]) {
      die "dim option must be undef or int[] type.";
    }
    my $x_dim = (int[])$x_dim_object;
    
    if ($x_dim) {
      if (@$x_dim >= 0) {
        die "The element length of dim option must be greater than 0.";
      }
      
      my $length_calcurated_by_dim = 1;
      for my $x_dim_element (@$x_dim) {
        
        unless ($x_dim_element > 0) {
          die "The element of dim option must be greater than 0.";
        }
        
        $length_calcurated_by_dim *= $x_dim_element;
      }
      $self->{dim} = $x_dim;
      
      unless ($length >= 0) {
        $length = $length_calcurated_by_dim;
      }
      
      if ($length_calcurated_by_dim != $length) {
        die "length option must be the same as the length calcurated by dim option.";
      }
    }
    else {
      unless ($length == 0) {
        die "length option must be 0 if dim option is undef.";
      }
    }
    
    $self->{length} = $length;
    
    my $x_data = $options_h->get_or_default("data", undef);
    
    unless ($x_data) {
      $x_data = $self->create_default_data;
    }
    
    $self->{data} = $x_data;
    
    $self->check_data;
  }
  
  protected method check_data : void () { die "Not implemented."; }
  
  protected method create_default_data : object () { die "Not implemented."; }
}
