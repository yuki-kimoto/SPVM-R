# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray {
  
  use Hash;
  use IntList;
  
  # Fields
  has data : protected object;
  method data : object () { die "Not implemented."; }
  
  has element_size : ro protected int;
  
  has is_numeric : byte;
  
  has type : ro protected string;
  
  has dim : int[];
  
  method dim : int[] () {
    
    my $dim = $self->{dim};
    
    my $dim_clone = copy $dim;
    
    return $dim_clone;
  }
  
  method set_dim : void ($dim : int[]) {
    
    my $nomalized_dim = $self->normalize_dim($dim);
    
    $self->{dim} = $nomalized_dim;
    
    $self->check;
  }
  
  # Class Mehtods
  static method new : R::NDArray ($options : object[] = undef) {
    
    my $self = new R::NDArray;
    
    $self->init($options);
    
    return $self;
  }
  
  # Instance Methods
  protected method init : void ($options : object[] = undef) {
    
    my $options_h = Hash->new($options);
    
    my $element_size = $options_h->get_or_default_int("element_size", -1);
    unless ($element_size > 0) {
      die "element_size option must be greter than 0.";
    }
    $self->{element_size} = $element_size;
    
    my $is_numeric = $options_h->get_or_default_int("is_numeric", 0);
    unless ($is_numeric > 0) {
      die "is_numeric option must be greter than 0.";
    }
    $self->{is_numeric} = (byte)$is_numeric;
    
    my $type = $options_h->get_or_default_string("type", undef);
    unless ($type) {
      die "type option must be defined.";
    }
    unless (length $type) {
      die "The length of \"type\" option must greater than 0.";
    }
    $self->{type} = $type;
    
    my $dim = (int[])$options_h->get_or_default("dim", undef);
    
    my $normalized_dim = $self->normalize_dim($dim);
    
    $self->{dim} = $normalized_dim;
    
    my $data = $options_h->get_or_default("data", undef);
    
    unless ($data) {
      $data = $self->create_default_data;
    }
    
    $self->{data} = $data;
    
    $self->check;
  }
  
  method length : int () {
    
    my $dim = $self->{dim};
    
    my $length = 1;
    for my $dim_element (@$dim) {
      
      unless ($dim_element > 0) {
        die "[Unexpected Error]The element of dim field must be greater than 0.";
      }
      
      $length *= $dim_element;
    }
    
    return $length;
  }
  
  private method normalize_dim : int[] ($dim : int[]) {
    
    my $normalized_dim_list = IntList->new;
    
    my $normalized_dim = (int[])undef;
    if ($dim) {
      my $dim_length = @$dim;
      my $check_tail_zero = 1;
      for (my $i = $dim_length - 1; $i >= 0; $i--) {
        my $dim_element = $dim->[$i];
        if ($check_tail_zero && $dim_element == 0) {
          next;
        }
        
        if ($dim_element != 0) {
          $check_tail_zero = 0;
        }
        
        unless ($dim_element > 0) {
          die "The element of dim option or \$dim argument except for tail must be greater than 0.";
        }
        
        $normalized_dim_list->unshift($dim_element);
      }
      
      $normalized_dim = $normalized_dim_list->to_array;
    }
    else {
      $normalized_dim = new int[0];
    }
    
    return $normalized_dim;
  }
  
  protected method check : void () { die "Not implemented."; }
  
  protected method create_default_data : object () { die "Not implemented."; }
  
}
