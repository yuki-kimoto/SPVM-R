# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::NDArray {
  
  use Hash;
  use IntList;
  use Native::MethodCall;
  use StringBuffer;
  use R::Util;
  use R::OP;
  
  # Fields
  has data : protected object;
  method data : object () { die "Not implemented."; }
  
  has dim : int[];
  
  has is_dim_read_only : ro byte;
  
  # Class Methods
  private static method normalize_vector_indexes : R::NDArray::Int[] ($vector_indexes : R::NDArray::Int[], $dim : int[]) {
    
    unless ($vector_indexes) {
      die "The indexes for n-dimension array \$vector_indexes must be defined.";
    }
    
    my $vector_indexes_length = @$vector_indexes;
    
    my $dim_length = @$dim;
    
    unless ($vector_indexes_length <= $dim_length) {
      die "The length of indexes for n-dimension array \$vector_indexes must be less than or equal to the length of dim field.";
    }
    
    my $normalized_vector_indexes = new R::NDArray::Int[$dim_length];
    
    for (my $vector_indexes_index = 0; $vector_indexes_index < $dim_length; $vector_indexes_index++) {
      
      my $vector_index = (R::NDArray::Int)undef;
      
      if ($vector_indexes_index < $vector_indexes_length) {
        $vector_index = $vector_indexes->[$vector_indexes_index];
      }
      
      unless (!$vector_index || $vector_index->is_vector) {
        die "The elem of indexes for n-dimension array \$vector_indexes must be undef or vector.";
      }
      
      unless ($vector_index) {
        my $vector_index_data = new int[$dim->[$vector_indexes_index]];
        
        for (my $i = 0; $i < $dim->[$vector_indexes_index]; $i++) {
          $vector_index_data->[$i] = $i;
        }
        
        $vector_index = R::NDArray::Int->new({data => $vector_index_data});
      }
      
      $normalized_vector_indexes->[$vector_indexes_index] = $vector_index;
    }
    
    return $normalized_vector_indexes;
  }
  
  private static method create_ret_dim : int[] ($vector_indexes : R::NDArray::Int[]) {
    
    my $vector_indexes_length = @$vector_indexes;
    
    my $ret_dim = new int[$vector_indexes_length];
    
    for (my $i = 0; $i < $vector_indexes_length; $i++) {
      my $vector_index = $vector_indexes->[$i];
      
      if ($vector_index) {
        $ret_dim->[$i] = $vector_index->length;
      }
      else {
        die "[Unexpected]\$vector_index must be defined.";
      }
    }
    
    return $ret_dim;
  }
  
  precompile private static method convert_coordinate_to_data_index : int ($coordinate : int[], $dim : int[]) {
    
    my $data_index = 0;
    my $dim_length = @$dim;
    for (my $i = 0; $i < $dim_length; $i++) {
      if ($i > 0) {
        my $tmp = 1;
        for (my $k = 0; $k < $i; $k++) {
          $tmp *= $dim->[$k];
        }
        $data_index += $tmp * $coordinate->[$i];
      }
      else {
        $data_index += $coordinate->[$i];
      }
    }
    
    return $data_index;
  }
  
  precompile static private method convert_data_index_to_coordinate : int[] ($data_index : int, $dim : int[]) {
    
    my $dim_length = @$dim;
    
    my $coordinate = new int[$dim_length];
    
    my $before_dim_product = 1;
    for (my $i = 0; $i < $dim_length; $i++) {
      $before_dim_product *= $dim->[$i];
    }
    
    for (my $i = $dim_length - 1; $i >= 0; $i--) {
      my $dim_product = 1;
      for (my $k = 0; $k < $i; $k++) {
        $dim_product *= $dim->[$k];
      }
      
      my $reminder = $data_index % $before_dim_product;
      my $quotient = $reminder / $dim_product;
      
      $coordinate->[$i] = $quotient;
      $before_dim_product = $dim_product;
    }
    
    return $coordinate;
  }
  
  # Class Mehtods
  static method new : R::NDArray ($options : object[] = undef) {
    
    my $self = new R::NDArray;
    
    $self->init($options);
    
    return $self;
  }
  
  # Instance Methods
  protected method init : void ($options : object[] = undef) {
    
    my $options_h = Hash->new($options);
    
    # data option
    my $data = $options_h->get_or_default("data", undef);
    if ($data) {
      my $default_data = $self->create_default_data;
      unless (type_name $data eq type_name $default_data) {
        my $type_name = type_name $default_data;
        die "The type of the data \$data must be $type_name type.";
      }
    }
    
    # dim option
    my $dim = (int[])$options_h->get_or_default("dim", undef);
    
    unless ($dim) {
      if ($data) {
        my $data_length = R::Util->_get_array_length($data);
        $dim = [$data_length];
      }
      else {
        $dim = new int[0];
      }
    }
    
    $dim = R::Util->normalize_dim($dim);
    
    unless ($data) {
      my $data_length = R::Util->calc_data_length($dim);
      $data = $self->create_default_data($data_length);
    }
    
    $self->{dim} = $dim;
    
    $self->{data} = $data;
    
    $self->check;
  }
  
  method dim : int[] () {
    
    my $dim = $self->{dim};
    
    my $dim_clone = copy $dim;
    
    return $dim_clone;
  }
  
  method set_dim : void ($dim : int[]) {
    
    my $is_dim_read_only = $self->{is_dim_read_only};
    
    if ($is_dim_read_only) {
      die "dim field is read only.";
    }
    
    my $nomalized_dim = R::Util->normalize_dim($dim);
    
    $self->{dim} = $nomalized_dim;
    
    $self->check;
  }
  
  method make_dim_read_only : void () {
    $self->{is_dim_read_only} = 1;
  }
  
  method nrow : int () {
    
    unless ($self->is_matrix) {
      die "The n-dimension array \$self must be a matrix.";
    }
    
    my $dim = $self->{dim};
    
    my $nrow = $dim->[0];
    
    return $nrow;
  }
  
  method ncol : int () {
    
    unless ($self->is_matrix) {
      die "The n-dimension array \$self must be a matrix.";
    }
    
    my $dim = $self->{dim};
    
    my $ncol = 1;
    
    if (@$dim >= 2) {
      $ncol = $dim->[1];
    }
    
    return $ncol;
  }
  
  method length : int () {
    
    my $dim = $self->{dim};
    
    my $length = R::Util->calc_data_length($dim);
    
    return $length;
  }
  
  method is_empty : int () {
    
    my $dim = $self->{dim};
    
    my $is_empty = 0;
    if (@$dim == 0) {
      $is_empty = 1;
    }
    
    return $is_empty;
  }
  
  method is_scalar : int () {
    
    my $dim = $self->{dim};
    
    my $length = $self->length;
    
    my $is_scalar = 0;
    if (@$dim >= 1 && $length == 1) {
      $is_scalar = 1;
    }
    
    return $is_scalar;
  }
  
  method is_vector : int () {
    
    my $dim = $self->{dim};
    
    my $dim_length = @$dim;
    
    my $length = $self->length;
    
    my $is_vector = 0;
    if ($dim_length >= 1 && $dim->[0] == $length) {
      $is_vector = 1;
    }
    
    return $is_vector;
  }
  
  method is_matrix : int () {
    
    my $dim = $self->{dim};
    
    my $dim_length = @$dim;
    
    my $length = $self->length;
    
    my $is_matrix = 0;
    if (@$dim >= 1) {
      my $nrow = -1;
      my $ncol = -1;
      
      if ($dim_length == 1) {
        $nrow = $dim->[0];
        $ncol = 1;
      }
      else {
        $nrow = $dim->[0];
        $ncol = $dim->[1];
      }
      
      if ($nrow * $ncol == $length) {
        $is_matrix = 1;
      }
    }
    
    return $is_matrix;
  }
  
  method is_square_matrix : int () {
    
    my $dim = $self->{dim};
    
    my $is_square_matrix = 0;
    if ($self->is_matrix && $self->nrow == $self->ncol) {
      $is_square_matrix = 1;
    }
    
    return $is_square_matrix;
  }
  
  method drop_dim : void ($index : int = -1) {
    
    my $dim = $self->{dim};
    
    my $dropped_dim = R::Util->drop_dim($dim, $index);
    
    $self->set_dim($dropped_dim);
  }
  
  method expand_dim : void ($index : int = -1) {
    
    my $dim = $self->{dim};
    
    my $expandped_dim = R::Util->expand_dim($dim, $index);
    
    $self->set_dim($expandped_dim);
  }
  
  protected method check : void () { die "Not implemented."; }
  
  protected method create_default_data : object ($length : int = 0) { die "Not implemented."; }
  
  method clone : R::NDArray ($elem_shallow_clone : int = 0) {
    
    my $elem_size = $self->elem_size;
    
    my $length = $self->length;
    
    my $clone_data = $self->create_default_data($length);
    
    my $data = $self->{data};
    
    if ($self->is_any_numeric_ndarray) {
      Fn->memcpy($clone_data, 0, $data, 0, $elem_size * $length);
    }
    else {
      for (my $i = 0; $i < $length; $i++) {
        if ($elem_shallow_clone) {
          $clone_data->(object[])->[$i] = $data->(object[])->[$i];
        }
        else {
          $clone_data->(object[])->[$i] = $self->elem_clone($i);
        }
      }
    }
    
    my $clone_dim = $self->dim;
    
    my $clone = (R::NDArray)R::Util->new_proto($self, {data => $clone_data, dim => $clone_dim});
    
    return $clone;
  }
  
  method elem_to_string : string ($data_index : int) { die "Not impelmented."; }
  
  method elem_clone : object ($data_index : int) { die "Not impelmented."; }
  
  method slice : R::NDArray ($vector_indexes : R::NDArray::Int[]) {
    
    my $dim = $self->{dim};
    
    $vector_indexes = &normalize_vector_indexes($vector_indexes, $dim);
    
    my $ret_dim = &create_ret_dim($vector_indexes);
    
    my $data_indexes = $self->create_data_indexes($vector_indexes, $dim);
    
    my $ret_data = $self->slice_data($data_indexes);
    
    my $ret_ndarray = (R::NDArray)R::Util->new_proto($self, {data => $ret_data, dim => $ret_dim});
    
    return $ret_ndarray;
  }
  
  method slice_set : void ($vector_indexes : R::NDArray::Int[], $ndarray : R::NDArray) {
    
    my $dim = $self->{dim};
    
    $vector_indexes = &normalize_vector_indexes($vector_indexes, $dim);
    
    my $ret_dim = &create_ret_dim($vector_indexes);
    
    my $data_indexes = $self->create_data_indexes($vector_indexes, $dim);
    
    my $equals_dropped_dim = R::Util->equals_dropped_dim($ndarray->dim, $ret_dim);
    
    unless ($equals_dropped_dim) {
      die "The dim field of \$ndarray must be compatible with dim created by \$vector_indexes.";
    }
    
    $self->slice_set_data($data_indexes, $ndarray->data);
  }
  
  protected method slice_data : object ($data_indexes : int[]) { die "Not implemented."; }
  
  protected method slice_set_data : void ($data_indexes : int[], $data : object) { die "Not implemented."; }
  
  private precompile method create_data_indexes : int[] ($vector_indexes : R::NDArray::Int[], $dim : int[]) {
    
    my $ret_dim = &create_ret_dim($vector_indexes);
    
    my $ret_dim_length = @$ret_dim;
    
    my $ret_length = R::Util->calc_data_length($ret_dim);
    
    my $ret_data = $self->create_default_data($ret_length);
    
    my $data_indexes = new int[$ret_length];
    
    for (my $ret_data_index = 0; $ret_data_index < $ret_length; $ret_data_index++) {
      
      my $ret_coordinate = &convert_data_index_to_coordinate($ret_data_index, $ret_dim);
      
      my $coordinate = new int[$ret_dim_length];
      
      for (my $coordinate_index = 0; $coordinate_index < @$coordinate; $coordinate_index++) {
        
        my $ret_coordinate_x = $ret_coordinate->[$coordinate_index];
        
        $coordinate->[$coordinate_index] = $vector_indexes->[$coordinate_index]->data->[$ret_coordinate_x];
        
        if ($coordinate->[$coordinate_index] >= $dim->[$coordinate_index]) {
          die "Invalid coordinate.";
        }
      }
      
      my $data_index = &convert_coordinate_to_data_index($coordinate, $dim);
      
      $data_indexes->[$ret_data_index] = $data_index;
    }
    
    return $data_indexes;
  }
  
  method to_string : string () {
    
    my $dim = $self->{dim};
    
    my $dim_length = @$dim;
    
    my $data = $self->{data};
    
    my $string_buffer = StringBuffer->new;
    if ($dim_length == 0) {
      $string_buffer->push("Empty");
    }
    elsif ($dim_length == 1) {
      my $data_length = $self->length;
      
      for (my $i = 0; $i < $data_length; $i++) {
        $string_buffer->push("[$i]\t");
        my $elem_string = $self->elem_to_string($i);
        $string_buffer->push($elem_string);
        
        unless ($i == $data_length - 1) {
          $string_buffer->push("\n");
        }
      }
    }
    elsif ($dim_length == 2) {
      
      my $nrow = $self->nrow;
      
      $string_buffer->push("\t");
      for (my $row_index = 0; $row_index < $dim->[1]; $row_index++) {
        $string_buffer->push("[,$row_index]");
        unless ($row_index == $nrow - 1) {
          $string_buffer->push("\t");
        }
      }
      $string_buffer->push("\n");
      
      my $ncol = $self->ncol;
      
      for (my $row_index = 0; $row_index < $nrow; $row_index++) {
        $string_buffer->push("[$row_index]\t");
        
        for (my $column_index = 0; $column_index < $ncol; $column_index++) {
          
          my $coordinate = [$row_index, $column_index];
          
          my $data_index = &convert_coordinate_to_data_index($coordinate, $dim);
          
          my $elem_string = $self->elem_to_string($data_index);
          
          $string_buffer->push($elem_string);
          
          unless ($column_index == $ncol - 1) {
            $string_buffer->push("\t");
          }
        }
        
        unless ($row_index == $nrow - 1) {
          $string_buffer->push("\n");
        }
      }
    }
    else {
      my $dim_length = @$dim;
      my $dim_num = $dim_length - 1;
      my $dim_list = IntList->new($dim);
      my $poss_list = List->new(new R::NDArray::Int[0]);
      
      &recursive_to_string($self, $dim_list, $string_buffer, \$dim_num, $poss_list);
    }
    
    my $string = $string_buffer->to_string;
    
    return $string;
  }
  
  private static method recursive_to_string : void ($self : R::NDArray, $dim_list : IntList, $string_buffer : StringBuffer, $dim_num_ref : int*, $poss_list : List of R::NDArray::Int) {
    my $dim_elem = $dim_list->pop;
    
    for (my $i = 0; $i < $dim_elem; $i++) {
      $string_buffer->push(Fn->repeat(",", $$dim_num_ref) . "$i" . "\n");
      $poss_list->unshift(R::NDArray::Int->new({data => [$i]}));
      if ($dim_list->length > 2) {
        $$dim_num_ref--;
        &recursive_to_string($self, $dim_list, $string_buffer, $dim_num_ref, $poss_list);
        $$dim_num_ref++;
      }
      else {
        $string_buffer->push("\t");
        
        for (my $dim1 = 0; $dim1 < $dim_list->get(1); $dim1++) {
          if ($dim1 == $dim_list->get(1)) {
            $string_buffer->push("[,$dim1]\n");
          }
          else {
            $string_buffer->push("[,$dim1]\t");
          }
        }
        
        $string_buffer->push("\n");
          
        for (my $dim0 = 0; $dim0 < $dim_list->get(0); $dim0++) {
          $string_buffer->push("[$dim0]\t");
          
          my $elem_strings_list = StringList->new;
          for (my $dim1 = 0; $dim1 < $dim_list->get(1); $dim1++) {
            
            my $poss_list_clone = List->new(new R::NDArray::Int[0]);
            $poss_list_clone->push(R::NDArray::Int->new({data => [$dim0]}));
            $poss_list_clone->push(R::NDArray::Int->new({data => [$dim1]}));
            for (my $poss_index = 0; $poss_index < $poss_list->length; $poss_index++) {
              $poss_list_clone->push($poss_list->get($poss_index));
            }
            
            my $ret_ndarray = $self->slice((R::NDArray::Int[])$poss_list->to_array);
            
            $elem_strings_list->push($ret_ndarray->elem_to_string(0));
          }
          
          $string_buffer->push(Fn->join("\t", $elem_strings_list->to_array) . "\n");
        }
      }
      $poss_list->shift;
    }
  }
  
  method set_order : void ($indexes_ndarray : R::NDArray::Int) { die "Not impelmeneted."; }
  
  method check_set_order_args : void ($indexes_ndarray : R::NDArray::Int) {
    
    unless ($indexes_ndarray) {
      die "The indexes \$indexes_ndarray must be defined.";
    }
    
    unless ($indexes_ndarray->is_vector) {
      die "The indexes \$indexes_ndarray must be a vector.";
    }
    
    unless ($self->is_vector) {
      die "The invocant must be a vector.";
    }
    
    my $length = $self->length;
    
    my $indexes_length = $indexes_ndarray->length;
    
    unless ($indexes_length == $length) {
      die "The length of the indexes \$indexes_ndarray must be the length of this vector.";
    }
  }
  
  precompile method to_string_ndarray : R::NDArray::String () {
    
    unless ($self) {
      die "The n-dimension array \$self must be defined.";
    }
    
    my $length = $self->length;
    
    my $dim = $self->dim;
    
    my $ret_ndarray = R::OP::String->c(undef, $dim);
    
    my $data = $self->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $self->elem_to_string($i);
    }
    
    return $ret_ndarray;
  }
  
  method is_numeric_ndarray : int () {
    
    my $data = $self->{data};
    
    my $is_numeric_ndarray = 0;
    if (Fn->is_numeric_array($data)) {
      $is_numeric_ndarray = 1;
    }
    
    return $is_numeric_ndarray;
  }
  
  method is_mulnum_ndarray : int () {
    
    my $data = $self->{data};
    
    my $is_mulnum_ndarray = 0;
    if (Fn->is_mulnum_array($data)) {
      $is_mulnum_ndarray = 1;
    }
    
    return $is_mulnum_ndarray;
  }
  
  method is_any_numeric_ndarray : int () {
    
    my $any_numeric_ndarray = $self->is_numeric_ndarray || $self->is_mulnum_ndarray;
    
    return $any_numeric_ndarray;
  }
  
  method is_object_ndarray : int () {
    
    my $data = $self->{data};
    
    my $is_mulnum = 0;
    if (Fn->is_object_array($data)) {
      $is_mulnum = 1;
    }
    
    return $is_mulnum;
  }
  
  method elem_size : int () {
    
    my $data = $self->{data};
    
    my $elem_size = R::Util->_get_elem_size($data);
    
    return $elem_size;
  }
  
  method elem_type_name : string () {
    
    my $data = $self->{data};
    
    my $elem_type_name = R::Util->_get_elem_type_name($data);
    
    return $elem_type_name;
  }
}

