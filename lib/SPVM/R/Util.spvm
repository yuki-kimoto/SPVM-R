# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::Util {
  
  # Temporary loaded.
  use Complex_2f;
  use Complex_2d;
  use R::NDArray;
  
  # Class Methods
  static method calc_data_length : int ($dim : int[]) {
    
    unless (&is_normalized_dim($dim)) {
      die "The dimensions \$dim must be normalized.";
    }
    
    my $length = 1;
    if (@$dim) {
      for my $dim_elem (@$dim) {
        $length *= $dim_elem;
      }
    }
    else {
      $length = 0;
    }
    
    return $length;
  }
  
  static method normalize_dim : int[] ($dim : int[]) {
    
    my $normalized_dim_list = IntList->new;
    
    my $normalized_dim = (int[])undef;
    if ($dim) {
      my $dim_length = @$dim;
      my $check_tail_zero = 1;
      for (my $i = $dim_length - 1; $i >= 0; $i--) {
        my $dim_elem = $dim->[$i];
        if ($check_tail_zero && $dim_elem == 0) {
          next;
        }
        
        if ($dim_elem != 0) {
          $check_tail_zero = 0;
        }
        
        unless ($dim_elem > 0) {
          die "All element of the dimensions \$dim except the last one must be greater than 0.";
        }
        
        $normalized_dim_list->unshift($dim_elem);
      }
      
      $normalized_dim = $normalized_dim_list->to_array;
    }
    else {
      $normalized_dim = new int[0];
    }
    
    return $normalized_dim;
  }
  
  static method is_normalized_dim : int ($dim : int[]) {
    
    my $is_normalized_dim = 0;
    
    if ($dim) {
      my $dim_length = @$dim;
      
      my $found_invalid_dim = 0;
      for (my $i = 0; $i < $dim_length; $i++) {
        my $dim_elem = $dim->[$i];
        unless ($dim_elem > 0) {
          $found_invalid_dim = 1;
          last;
        }
      }
      
      unless ($found_invalid_dim) {
        $is_normalized_dim = 1;
      }
    }
    
    return $is_normalized_dim;
  }
  
  static method check_length : void ($data : object, $dim : int[]) {
    
    unless ($data) {
      die "The data \$data must be defined.";
    }
    
    unless (Fn->is_array($data)) {
      die "The data \$data must be an array.";
    }
    
    unless (&is_normalized_dim($dim)) {
      die "The dimensions \$dim must be normalized.";
    }
    
    my $length_from_data = Fn->array_length($data);
    
    my $length_from_dim = R::Util->calc_data_length($dim);
    
    unless ($length_from_data == $length_from_dim) {
      die "The length got from the data \$data must be equal to the length calcurated from the dimensions \$dim.";
    }
    
  }
  
  static method drop_dim : int[] ($dim : int[], $index : int = -1) {
    
    unless (&is_normalized_dim($dim)) {
      die "The dimensions \$dim must be normalized.";
    }
    
    my $dim_length = @$dim;
    
    if (@$dim == 0) {
      return new int[0];
    }
    
    unless ($index < $dim_length) {
      die "The index \$index must be less than the length of the dimension \$dim.";
    }
    
    my $dropped_dim_list = IntList->new;
    
    my $drop_all = 0;
    if ($index < 0) {
      $drop_all = 1;
    }
    
    for (my $i = 0; $i < @$dim; $i++) {
      my $dim_elem = $dim->[$i];
      
      if ($dim_elem == 1) {
        if ($drop_all) {
          # Do not push
        }
        elsif ($i == $index) {
          # Do not push
        }
        else {
          $dropped_dim_list->push($dim_elem);
        }
      }
      else {
        if ($i == $index) {
          die "The element of the dimension \$dim at index $i must be 1.";
        }
        else {
          $dropped_dim_list->push($dim_elem);
        }
      }
    }
    
    if ($dropped_dim_list->length == 0) {
      $dropped_dim_list->push(1);
    }
    
    my $dropped_dim = $dropped_dim_list->to_array;
    
    return $dropped_dim;
  }
  
  static method expand_dim : int[] ($dim : int[], $index : int = -1) {
    
    unless (&is_normalized_dim($dim)) {
      die "The dimensions \$dim must be normalized.";
    }
    
    my $dim_length = @$dim;
    
    unless ($index <= $dim_length) {
      die "The index \$index must be less than or equal to the length of the dimension \$dim.";
    }
    
    my $dropped_dim_list = IntList->new;
    
    my $push_to_last = 0;
    if ($index < 0) {
      $push_to_last = 1;
    }
    
    for (my $i = 0; $i < @$dim; $i++) {
      my $dim_elem = $dim->[$i];
      
      unless ($dim_elem > 0) {
        die "The element of the dimensions \$dim must be greater than 0.";
      }
      
      if ($i == $index) {
        $dropped_dim_list->push(1);
      }
      
      $dropped_dim_list->push($dim_elem);
    }
    
    if ($push_to_last || $index == $dim_length) {
      $dropped_dim_list->push(1);
    }
    
    my $dropped_dim = $dropped_dim_list->to_array;
    
    return $dropped_dim;
  }
  
  static method equals_dim : int ($x_dim : int[], $y_dim : int[]) {
    
    unless (&is_normalized_dim($x_dim)) {
      die "The dimensions \$x_dim must be normalized.";
    }
    
    unless (&is_normalized_dim($y_dim)) {
      die "The dimensions \$y_dim must be normalized.";
    }
    
    my $equals_dim = Array->equals_int($x_dim, $y_dim);
    
    return $equals_dim;
  }
  
  static method equals_dropped_dim : int ($x_dim : int[], $y_dim : int[]) {
    
    my $x_dropped_dim = &drop_dim($x_dim);
    
    my $y_dropped_dim = &drop_dim($y_dim);
    
    my $equals_dropped_dim = &equals_dim($x_dropped_dim, $y_dropped_dim);
    
    return $equals_dropped_dim;
  }
  
}
