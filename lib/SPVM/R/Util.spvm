# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::Util {
  
  # Class Methods
  static method calc_data_length : int ($dim : int[]) {
    
    unless ($dim) {
      die "The dimention \$dim must be defined.";
    }
    
    my $length = 1;
    if (@$dim) {
      for my $dim_element (@$dim) {
        
        unless ($dim_element > 0) {
          die "The element of the dimention \$dim must be greater than 0.";
        }
        
        $length *= $dim_element;
      }
    }
    else {
      $length = 0;
    }
    
    return $length;
  }
  
  static method normalize_dim : int[] ($dim : int[]) {
    
    my $normalized_dim_list = IntList->new;
    
    my $normalized_dim = (int[])undef;
    if ($dim) {
      my $dim_length = @$dim;
      my $check_tail_zero = 1;
      for (my $i = $dim_length - 1; $i >= 0; $i--) {
        my $dim_element = $dim->[$i];
        if ($check_tail_zero && $dim_element == 0) {
          next;
        }
        
        if ($dim_element != 0) {
          $check_tail_zero = 0;
        }
        
        unless ($dim_element > 0) {
          die "The element of dim option or \$dim argument except for tail must be greater than 0.";
        }
        
        $normalized_dim_list->unshift($dim_element);
      }
      
      $normalized_dim = $normalized_dim_list->to_array;
    }
    else {
      $normalized_dim = new int[0];
    }
    
    return $normalized_dim;
  }
  
  static method drop_dim : int[] ($dim : int[]) {
    
    unless ($dim) {
      die "The definsion \$dim must be defined.";
    }
    
    unless (@$dim > 0) {
      die "The length of the dimension \$dim must be greater than 0.";
    }
    
    my $dropped_dim_list = IntList->new;
    
    for (my $i = 0; $i < @$dim; $i++) {
      my $dim_element = $dim->[$i];
      unless ($dim_element == 1) {
        $dropped_dim_list->push($dim_element);
      }
    }
    
    if ($dropped_dim_list->length == 0) {
      $dropped_dim_list->push(1);
    }
    
    my $dropped_dim = $dropped_dim_list->to_array;
    
    return $dropped_dim;
  }
  
  static method equals_dim : int ($x_dim : int[], $y_dim : int[]) {
    
    my $equals_dim = 0;
    if ($x_dim && $y_dim) {
      my $x_dim_length = @$x_dim;
      
      my $y_dim_length = @$y_dim;
      
      if ($x_dim_length == $y_dim_length) {
        my $equals_dim_elements = 1;
        for (my $i = 0; $i < $x_dim_length; $i++) {
          my $x_dim_element = $x_dim->[$i];
          my $y_dim_element = $y_dim->[$i];
          
          unless ($x_dim_element == $y_dim_element) {
            $equals_dim_elements = 0;
            last;
          }
        }
        $equals_dim = $equals_dim_elements;
      }
    }
    elsif (!$x_dim && !$y_dim) {
      $equals_dim = 1;
    }
    
    return $equals_dim;
  }
  
  static method equals_dropped_dim : int ($x_dim : int[], $y_dim : int[]) {
    
    my $x_dropped_dim = &drop_dim($x_dim);
    
    my $y_dropped_dim = &drop_dim($y_dim);
    
    my $equals_dropped_dim = &equals_dim($x_dropped_dim, $y_dropped_dim);
    
    return $equals_dropped_dim;
  }
  
  # This method will be added to Fn class.
  static method _get_array_length : int ($array : object) {
    
    unless ($array) {
      die "The array \$array must be defined.";
    }
    
    my $length = -1;
    if (Fn->is_object_array($array)) {
      my $array = (object[])$array;
      $length = @$array;
    }
    else {
      if ($array isa byte[]) {
        $length = @(byte[])$array;
      }
      elsif ($array isa short[]) {
        $length = @(short[])$array;
      }
      elsif ($array isa int[]) {
        $length = @(int[])$array;
      }
      elsif ($array isa long[]) {
        $length = @(long[])$array;
      }
      elsif ($array isa float[]) {
        $length = @(float[])$array;
      }
      elsif ($array isa double[]) {
        $length = @(double[])$array;
      }
      elsif ($array isa Complex_2f[]) {
        $length = @(Complex_2f[])$array;
      }
      elsif ($array isa Complex_2d[]) {
        $length = @(Complex_2d[])$array;
      }
      else {
        die "The array is invalid element_type.";
      }
    }
    
    return $length;
  }
  
  # This method will be added to Fn class.
  static method _get_elem_size : int ($array : object) {
    
    unless ($array) {
      die "The array \$array must be defined.";
    }
    
    my $elem_size = -1;
    if (Fn->is_object_array($array)) {
      $elem_size = Fn->sizeof_native_pointer;
    }
    else {
      if ($array isa byte[]) {
        $elem_size = 1;
      }
      elsif ($array isa short[]) {
        $elem_size = 2;
      }
      elsif ($array isa int[]) {
        $elem_size = 4;
      }
      elsif ($array isa long[]) {
        $elem_size = 8;
      }
      elsif ($array isa float[]) {
        $elem_size = 4;
      }
      elsif ($array isa double[]) {
        $elem_size = 8;
      }
      elsif ($array isa Complex_2f[]) {
        $elem_size = 8;
      }
      elsif ($array isa Complex_2d[]) {
        $elem_size = 16;
      }
      else {
        die "The array is invalid element_type.";
      }
    }
  }
  
  # This method will be added to Fn class.
  static method _get_elem_type_name : string ($array : object) {
    
    unless ($array) {
      die "The array \$array must be defined.";
    }
    
    my $type_name = type_name $array;
    
    my $type_name_length = length $type_name;
    
    my $elem_type_name = Fn->substr($type_name, 0, $type_name_length - 2);
    
    return $elem_type_name;
  }
}
