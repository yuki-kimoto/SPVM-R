# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::Util {
  
  # Class Methods
  static method calc_data_length : int ($dim : int[]) {
    
    unless ($dim) {
      die "The dimention \$dim must be defined.";
    }
    
    my $length = 1;
    if (@$dim) {
      for my $dim_elem (@$dim) {
        
        unless ($dim_elem > 0) {
          die "The elem of the dimention \$dim must be greater than 0.";
        }
        
        $length *= $dim_elem;
      }
    }
    else {
      $length = 0;
    }
    
    return $length;
  }
  
  static method normalize_dim : int[] ($dim : int[]) {
    
    my $normalized_dim_list = IntList->new;
    
    my $normalized_dim = (int[])undef;
    if ($dim) {
      my $dim_length = @$dim;
      my $check_tail_zero = 1;
      for (my $i = $dim_length - 1; $i >= 0; $i--) {
        my $dim_elem = $dim->[$i];
        if ($check_tail_zero && $dim_elem == 0) {
          next;
        }
        
        if ($dim_elem != 0) {
          $check_tail_zero = 0;
        }
        
        unless ($dim_elem > 0) {
          die "The elem of dim option or \$dim argument except for tail must be greater than 0.";
        }
        
        $normalized_dim_list->unshift($dim_elem);
      }
      
      $normalized_dim = $normalized_dim_list->to_array;
    }
    else {
      $normalized_dim = new int[0];
    }
    
    return $normalized_dim;
  }
  
  static method check_length : void ($data : object, $dim : int[]) {
    
    unless ($data) {
      die "The data \$data must be defined.";
    }
    
    unless (Fn->is_array($data)) {
      die "The data \$data must be an array.";
    }
    
    unless ($dim) {
      die "The dimensions \$dim must be defined.";
    }
    
    my $length_from_data = R::Util->_get_array_length($data);
    
    my $length_from_dim = R::Util->calc_data_length($dim);
    
    unless ($length_from_data == $length_from_dim) {
      die "The length got from the data \$data must be equal to the length calcurated from the dimensions \$dim.";
    }
    
  }
  
  static method drop_dim : int[] ($dim : int[], $index : int = -1) {
    
    unless ($dim) {
      die "The definsion \$dim must be defined.";
    }
    
    my $dim_length = @$dim;
    
    unless (@$dim > 0) {
      die "The length of the dimension \$dim must be greater than 0.";
    }
    
    unless ($index < $dim_length) {
      die "The index \$index must be less than the length of the dimension \$dim.";
    }
    
    my $dropped_dim_list = IntList->new;
    
    my $drop_all = 0;
    if ($index < 0) {
      $drop_all = 1;
    }
    
    for (my $i = 0; $i < @$dim; $i++) {
      my $dim_elem = $dim->[$i];
      
      if ($dim_elem == 1) {
        if ($drop_all) {
          # Do not push
        }
        elsif ($i == $index) {
          # Do not push
        }
        else {
          $dropped_dim_list->push($dim_elem);
        }
      }
      else {
        if ($i == $index) {
          die "The element of the dimension \$dim at index $i must be 1.";
        }
        else {
          $dropped_dim_list->push($dim_elem);
        }
      }
    }
    
    if ($dropped_dim_list->length == 0) {
      $dropped_dim_list->push(1);
    }
    
    my $dropped_dim = $dropped_dim_list->to_array;
    
    return $dropped_dim;
  }
  
  static method expand_dim : int[] ($dim : int[], $index : int = -1) {
    
    unless ($dim) {
      die "The definsion \$dim must be defined.";
    }
    
    my $dim_length = @$dim;
    
    unless (@$dim > 0) {
      die "The length of the dimension \$dim must be greater than 0.";
    }
    
    unless ($index <= $dim_length) {
      die "The index \$index must be less than or equal to the length of the dimension \$dim.";
    }
    
    my $dropped_dim_list = IntList->new;
    
    my $push_to_last = 0;
    if ($index < 0) {
      $push_to_last = 1;
    }
    
    for (my $i = 0; $i < @$dim; $i++) {
      my $dim_elem = $dim->[$i];
      
      if ($i == $index) {
        $dropped_dim_list->push(1);
      }
      
      $dropped_dim_list->push($dim_elem);
    }
    
    if ($push_to_last || $index == $dim_length) {
      $dropped_dim_list->push(1);
    }
    
    my $dropped_dim = $dropped_dim_list->to_array;
    
    return $dropped_dim;
  }
  
  static method equals_dim : int ($x_dim : int[], $y_dim : int[]) {
    
    my $equals_dim = 0;
    if ($x_dim && $y_dim) {
      my $x_dim_length = @$x_dim;
      
      my $y_dim_length = @$y_dim;
      
      if ($x_dim_length == $y_dim_length) {
        my $equals_dim_elems = 1;
        for (my $i = 0; $i < $x_dim_length; $i++) {
          my $x_dim_elem = $x_dim->[$i];
          my $y_dim_elem = $y_dim->[$i];
          
          unless ($x_dim_elem == $y_dim_elem) {
            $equals_dim_elems = 0;
            last;
          }
        }
        $equals_dim = $equals_dim_elems;
      }
    }
    elsif (!$x_dim && !$y_dim) {
      $equals_dim = 1;
    }
    
    return $equals_dim;
  }
  
  static method equals_dropped_dim : int ($x_dim : int[], $y_dim : int[]) {
    
    my $x_dropped_dim = &drop_dim($x_dim);
    
    my $y_dropped_dim = &drop_dim($y_dim);
    
    my $equals_dropped_dim = &equals_dim($x_dropped_dim, $y_dropped_dim);
    
    return $equals_dropped_dim;
  }
  
  # This method will be added to Fn class.
  static method _get_array_length : int ($array : object) {
    
    unless ($array) {
      die "The array \$array must be defined.";
    }
    
    my $length = -1;
    if (Fn->is_object_array($array)) {
      my $array = (object[])$array;
      $length = @$array;
    }
    else {
      if ($array isa byte[]) {
        $length = @(byte[])$array;
      }
      elsif ($array isa short[]) {
        $length = @(short[])$array;
      }
      elsif ($array isa int[]) {
        $length = @(int[])$array;
      }
      elsif ($array isa long[]) {
        $length = @(long[])$array;
      }
      elsif ($array isa float[]) {
        $length = @(float[])$array;
      }
      elsif ($array isa double[]) {
        $length = @(double[])$array;
      }
      elsif ($array isa Complex_2f[]) {
        $length = @(Complex_2f[])$array;
      }
      elsif ($array isa Complex_2d[]) {
        $length = @(Complex_2d[])$array;
      }
      else {
        die "The array is invalid elem_type.";
      }
    }
    
    return $length;
  }
  
  # This method will be added to Fn class.
  static method _get_elem_size : int ($array : object) {
    
    unless ($array) {
      die "The array \$array must be defined.";
    }
    
    my $elem_size = -1;
    if (Fn->is_object_array($array)) {
      $elem_size = Fn->sizeof_native_pointer;
    }
    else {
      if ($array is_type byte[]) {
        $elem_size = 1;
      }
      elsif ($array is_type short[]) {
        $elem_size = 2;
      }
      elsif ($array is_type int[]) {
        $elem_size = 4;
      }
      elsif ($array is_type long[]) {
        $elem_size = 8;
      }
      elsif ($array is_type float[]) {
        $elem_size = 4;
      }
      elsif ($array is_type double[]) {
        $elem_size = 8;
      }
      elsif ($array is_type Complex_2f[]) {
        $elem_size = 8;
      }
      elsif ($array is_type Complex_2d[]) {
        $elem_size = 16;
      }
      else {
        die "The array is invalid elem_type.";
      }
    }
    
    return $elem_size;
  }
  
  # This method will be added to Fn class.
  static method _get_elem_type_name : string ($array : object) {
    
    unless ($array) {
      die "The array \$array must be defined.";
    }
    
    my $type_name = type_name $array;
    
    my $type_name_length = length $type_name;
    
    my $elem_type_name = Fn->substr($type_name, 0, $type_name_length - 2);
    
    return $elem_type_name;
  }
  
  # This method will be added to Fn class.
  static method new_proto : object ($proto : object, $options : object[]) {
    
    my $class_name = type_name $proto;
    
    my $object = (R::NDArray)Native::MethodCall->call_class_method($class_name, "new", [(object)$options]);
    
    return $object;
  }
  
  # This method will be inplemented as Array#equals_float_complex
  static method _equals_float_complex : int ($x1_array : Complex_2f[], $x2_array : Complex_2f[]) {
    
    unless ($x1_array) {
      die "The array \$x1_array must be defined.";
    }
    
    unless ($x2_array) {
      die "The array \$x2_array must be defined.";
    }
    
    my $x1_array_length = @$x1_array;
    
    my $x2_array_length = @$x2_array;
    
    my $equals = 0;
    
    if ($x1_array_length == $x2_array_length) {
      my $array_length = $x1_array_length;
      
      my $not_equals_elem = 0;
      for (my $i = 0; $i < $array_length; $i++) {
        unless ($x1_array->[$i]{re} == $x2_array->[$i]{re} && $x1_array->[$i]{im} == $x2_array->[$i]{im}) {
          $not_equals_elem = 1;
          last;
        }
      }
      
      unless ($not_equals_elem) {
        $equals = 1;
      }
    }
    
    return $equals;
  }
  
  # This method will be inplemented as Array#equals_double_complex
  static method _equals_double_complex : int ($x1_array : Complex_2d[], $x2_array : Complex_2d[]) {
    
    unless ($x1_array) {
      die "The array \$x1_array must be defined.";
    }
    
    unless ($x2_array) {
      die "The array \$x2_array must be defined.";
    }
    
    my $x1_array_length = @$x1_array;
    
    my $x2_array_length = @$x2_array;
    
    my $equals = 0;
    
    if ($x1_array_length == $x2_array_length) {
      my $array_length = $x1_array_length;
      
      my $not_equals_elem = 0;
      for (my $i = 0; $i < $array_length; $i++) {
        unless ($x1_array->[$i]{re} == $x2_array->[$i]{re} && $x1_array->[$i]{im} == $x2_array->[$i]{im}) {
          $not_equals_elem = 1;
          last;
        }
      }
      
      unless ($not_equals_elem) {
        $equals = 1;
      }
    }
    
    return $equals;
  }
  
  # This method will be inplemented as Complex_2d#to_string method
  static method _double_complex_to_string : string ($z : Complex_2d) {
    
    my $re = $z->{re};
    
    my $im = $z->{im};
    
    my $string = (string)undef;
    
    if ($im < 0) {
      $string = "$re${im}i";
    }
    else {
      $string = "$re+${im}i";
    }
    
    return $string;
  }
  
  # This method will be inplemented as Complex_2f#to_string method
  static method _float_complex_to_string : string ($z : Complex_2f) {
    
    my $re = $z->{re};
    
    my $im = $z->{im};
    
    my $string = (string)undef;
    
    if ($im < 0) {
      $string = "$re${im}i";
    }
    else {
      $string = "$re+${im}i";
    }
    
    return $string;
  }
  
  # This method will be inplemented as Complex_2d#new_array_from_pairs
  static method _Complex_2d_new_array_from_pairs : Complex_2d[] ($pairs : double[]) {
    
    unless ($pairs) {
      die "The pairs \$pairs must be defined.";
    }
    
    my $pairs_length = @$pairs;
    
    unless ($pairs_length % 2 == 0) {
      die "The length of the pairs \$data must be an even number.";
    }
    
    my $length = $pairs_length / 2;
    
    my $array = new Complex_2d[$length];
    
    Fn->memcpy($array, 0, $pairs, 0, 8 * 2 * $length);
    
    return $array;
  }
  
  # This method will be inplemented as Complex_2d#new_array_from_re_array
  static method _Complex_2d_new_array_from_re_array : Complex_2d[] ($re_array : double[]) {
    
    unless ($re_array) {
      die "The real numbers array \$re_array must be defined.";
    }
    
    my $length = @$re_array;
    
    my $array = new Complex_2d[$length];
    
    for (my $i = 0; $i < $length; $i++) {
      $array->[$i]{re} = $re_array->[$i];
    }
    
    return $array;
  }
  
  # This method will be inplemented as Complex_2d#to_re_array
  static method _Complex_2d_to_re_array : double[] ($array : Complex_2d[]) {
    
    unless ($array) {
      die "The array \$array must be defined.";
    }
    
    my $length = @$array;
    
    my $re_array = new double[$length];
    
    for (my $i = 0; $i < $length; $i++) {
      $re_array->[$i] = $array->[$i]{re};
    }
    
    return $re_array;
  }
  
  # This method will be inplemented as Complex_2d#to_pairs
  static method _Complex_2d_to_pairs : double[] ($array : Complex_2d[]) {
    
    my $length = @$array;
    
    my $pairs_length = $length * 2;
    
    my $pairs = new double[$pairs_length];
    
    Fn->memcpy($pairs, 0, $array, 0, 8 * 2 * $length);
    
    return $pairs;
  }
  
  # This method will be inplemented as Complex_2f#new_array_from_pairs
  static method _Complex_2f_new_array_from_pairs : Complex_2f[] ($pairs : float[]) {
    
    unless ($pairs) {
      die "The pairs \$pairs must be defined.";
    }
    
    my $pairs_length = @$pairs;
    
    unless ($pairs_length % 2 == 0) {
      die "The length of the pairs \$data must be an even number.";
    }
    
    my $length = $pairs_length / 2;
    
    my $array = new Complex_2f[$length];
    
    Fn->memcpy($array, 0, $pairs, 0, 8 * 2 * $length);
    
    return $array;
  }
  
  # This method will be inplemented as Complex_2f#new_array_from_re_array
  static method _Complex_2f_new_array_from_re_array : Complex_2f[] ($re_array : float[]) {
    
    unless ($re_array) {
      die "The real numbers array \$re_array must be defined.";
    }
    
    my $length = @$re_array;
    
    my $array = new Complex_2f[$length];
    
    for (my $i = 0; $i < $length; $i++) {
      $array->[$i]{re} = $re_array->[$i];
    }
    
    return $array;
  }
  
  # This method will be inplemented as Complex_2f#to_re_array
  static method _Complex_2f_to_re_array : float[] ($array : Complex_2f[]) {
    
    unless ($array) {
      die "The array \$array must be defined.";
    }
    
    my $length = @$array;
    
    my $re_array = new float[$length];
    
    for (my $i = 0; $i < $length; $i++) {
      $re_array->[$i] = $array->[$i]{re};
    }
    
    return $re_array;
  }
  
  # This method will be inplemented as Complex_2f#to_pairs
  static method _Complex_2f_to_pairs : float[] ($array : Complex_2f[]) {
    
    my $length = @$array;
    
    my $pairs_length = $length * 2;
    
    my $pairs = new float[$pairs_length];
    
    Fn->memcpy($pairs, 0, $array, 0, 8 * 2 * $length);
    
    return $pairs;
  }
  
}
