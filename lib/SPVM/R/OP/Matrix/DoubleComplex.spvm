# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::OP::Matrix::DoubleComplex {
  
  use Resource::Eigen;
  
  use R::NDArray::DoubleComplex;
  use R::OP::DoubleComplex;
  use R::OP::Matrix;
  use Sys;
  use Hash;
  use R::NDArray::Hash;
  
  static method matrix : R::NDArray::DoubleComplex ($data : object of double[]|Complex_2d[]|R::NDArray::DoubleComplex, $nrow : int, $ncol : int) {
    
    my $ndarray = R::OP::DoubleComplex->c($data, [$nrow, $ncol]);
    
    return $ndarray;
  }
  
  static method matrix_byrow : R::NDArray::DoubleComplex ($data : object of double[]|Complex_2d[]|R::NDArray::DoubleComplex, $nrow : int, $ncol : int) {
    
    my $ndarray = &matrix($data, $nrow, $ncol);
    
    $data = $ndarray->data;
    
    my $length = @(Complex_2d[])$data;
    
    my $new_data = new Complex_2d[$length];
    
    for (my $data_index = 0; $data_index < $length; $data_index++) {
      my $elem = $data->(Complex_2d[])->[$data_index];
      
      my $new_row_index = $data_index / $ncol;
      
      my $new_column_index = $data_index - $ncol * $new_row_index;
      
      my $new_data_index = $nrow * $new_column_index + $new_row_index;
      
      $new_data->[$new_data_index] = $elem;
    }
    
    my $ret_ndarray = &matrix($new_data, $nrow, $ncol);
    
    return $ret_ndarray;
  }
  
  
  static method cbind : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex, $y_ndarray : R::NDArray::DoubleComplex) {
    return (R::NDArray::DoubleComplex)R::OP::Matrix->cbind($x_ndarray, $y_ndarray);
  }
  
  static method rbind : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex, $y_ndarray : R::NDArray::DoubleComplex) {
    return (R::NDArray::DoubleComplex)R::OP::Matrix->rbind($x_ndarray, $y_ndarray);
  }
  
  static method diag : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->is_vector) {
      die "The n-dimensional array \$x_ndarray must be a vector.";
    }
    
    my $x_data = (Complex_2d[])$x_ndarray->data;
    
    my $x_length = $x_ndarray->length;
    
    my $ret_dim = [$x_length, $x_length];
    
    my $ret_ndarray = R::OP::DoubleComplex->c(undef, $ret_dim);
    
    my $ret_data = $ret_ndarray->data;
    
    my $x_index = 0;
    for (my $row = 0; $row < $x_length; $row++) {
      $ret_data->[$x_length * $row + $row] = $x_data->[$row];
    }
    
    return $ret_ndarray;
  }
  
  static method slice_diag : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->is_square_matrix) {
      die "The n-dimensional array \$x_ndarray must be a matrix.";
    }
    
    my $x_data = (Complex_2d[])$x_ndarray->data;
    
    my $x_nrow = $x_ndarray->nrow;
    
    my $x_ncol = $x_ndarray->ncol;
    
    my $ret_dim = [$x_nrow];
    
    my $ret_ndarray = R::OP::DoubleComplex->c(undef, $ret_dim);
    
    my $ret_data = $ret_ndarray->data;
    
    my $x_index = 0;
    for (my $row = 0; $row < $x_nrow; $row++) {
      $ret_data->[$row] = $x_data->[$x_ncol * $row + $row];
    }
    
    return $ret_ndarray;
  }
  
  static method identity : R::NDArray::DoubleComplex ($nrow : int) {
    
    unless ($nrow > 0) {
      die "The row numbers \$nrow must be greater than 0.";
    }
    
    my $ncol = $nrow;
    
    my $ret_dim = [$nrow, $ncol];
    
    my $ret_ndarray = R::OP::DoubleComplex->c(undef, $ret_dim);
    
    my $ret_data = $ret_ndarray->data;
    
    for (my $row = 0; $row < $nrow; $row++) {
      $ret_data->[$ncol * $row + $row]{re} = 1;
    }
    
    return $ret_ndarray;
  }
  
  static method mul : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex, $y_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->is_matrix) {
      die "The n-dimensional array \$x_ndarray must be a matrix.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    unless ($y_ndarray->is_matrix) {
      die "The n-dimensional array \$y_ndarray must be a matrix.";
    }
    
    my $x_data = (Complex_2d[])$x_ndarray->data;
    
    my $x_nrow = $x_ndarray->nrow;
    
    my $x_ncol = $x_ndarray->ncol;
    
    my $y_data = (Complex_2d[])$y_ndarray->data;
    
    my $y_nrow = $y_ndarray->nrow;
    
    my $y_ncol = $y_ndarray->ncol;
    
    unless ($x_ncol == $y_nrow) {
      die "The column numbers of the matrix \$x_ndarray must be equal to the row numbers of the matrix \$y_ndarray.";
    }
    
    my $ret_data_ref = new Complex_2d[][1];
    
    my $ret_nrow = -1;
    
    my $ret_ncol = -1;
    
    &_mul($ret_data_ref, \$ret_nrow, \$ret_ncol, $x_data, $x_nrow, $x_ncol, $y_data, $y_nrow, $y_ncol);
    
    my $ret_dim = [$ret_nrow, $ret_ncol];
    
    my $ret_data = $ret_data_ref->[0];
    
    my $ret_ndarray = R::OP::DoubleComplex->c($ret_data, $ret_dim);
    
    return $ret_ndarray;
  }
  
  static method t : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->is_matrix) {
      die "The n-dimensional array \$x_ndarray must be a matrix.";
    }
    
    my $x_data = (Complex_2d[])$x_ndarray->data;
    
    my $x_nrow = $x_ndarray->nrow;
    
    my $x_ncol = $x_ndarray->ncol;
    
    my $ret_data_ref = new Complex_2d[][1];
    
    my $ret_nrow = -1;
    
    my $ret_ncol = -1;
    
    &_t($ret_data_ref, \$ret_nrow, \$ret_ncol, $x_data, $x_nrow, $x_ncol);
    
    my $ret_data = $ret_data_ref->[0];
    
    my $ret_dim = [$ret_nrow, $ret_ncol];
    
    my $ret_ndarray = R::OP::DoubleComplex->c($ret_data, $ret_dim);
    
    return $ret_ndarray;
  }
  
  static method det : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->is_square_matrix) {
      die "The n-dimensional array \$x_ndarray must be a square matrix.";
    }
    
    my $x_data = (Complex_2d[])$x_ndarray->data;
    
    my $x_nrow = $x_ndarray->nrow;
    
    my $x_ncol = $x_ndarray->ncol;
    
    my $ret_data_ref = new Complex_2d[][1];
    
    my $ret_nrow = -1;
    
    my $ret_ncol = -1;
    
    &_det($ret_data_ref, \$ret_nrow, \$ret_ncol, $x_data, $x_nrow, $x_ncol);
    
    my $ret_data = $ret_data_ref->[0];
    
    my $ret_dim = [$ret_nrow];
    
    my $ret_ndarray = R::OP::DoubleComplex->c($ret_data, $ret_dim);
    
    return $ret_ndarray;
  }
  
  static method solve : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->is_square_matrix) {
      die "The n-dimensional array \$x_ndarray must be a square matrix.";
    }
    
    my $det = &det($x_ndarray)->data->[0];
    if ($det->{re} == 0 && $det->{im} == 0) {
      die "The determinant of the n-dimensional array \$x_ndarray that is a matrix must not be equal to 0.";
    }
    
    my $x_data = (Complex_2d[])$x_ndarray->data;
    
    my $x_nrow = $x_ndarray->nrow;
    
    my $x_ncol = $x_ndarray->ncol;
    
    my $ret_data_ref = new Complex_2d[][1];
    
    my $ret_nrow = -1;
    
    my $ret_ncol = -1;
    
    &_solve($ret_data_ref, \$ret_nrow, \$ret_ncol, $x_data, $x_nrow, $x_ncol);
    
    my $ret_data = $ret_data_ref->[0];
    
    my $ret_dim = [$ret_nrow, $ret_ncol];
    
    my $ret_ndarray = R::OP::DoubleComplex->c($ret_data, $ret_dim);
    
    return $ret_ndarray;
  }
  
  static method eigen : R::NDArray::Hash ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->is_square_matrix) {
      die "The n-dimensional array \$x_ndarray must be a square matrix.";
    }
    
    my $det = &det($x_ndarray)->data->[0];
    if ($det->{re} == 0 && $det->{im} == 0) {
      die "The determinant of the n-dimensional array \$x_ndarray that is a matrix must not be equal to 0.";
    }
    
    my $eigen_vectors_data_ref = new Complex_2d[][1];
    
    my $eigen_values_data_ref = new Complex_2d[][1];
    
    my $eigen_vectors_nrow = -1;
    
    my $eigen_vectors_ncol = -1;
    
    my $eigen_values_nrow = -1;
    
    my $eigen_values_ncol = -1;
    
    my $x_data = (Complex_2d[])$x_ndarray->data;
    
    my $x_nrow = $x_ndarray->nrow;
    
    my $x_ncol = $x_ndarray->ncol;
    
    &_eigen($eigen_vectors_data_ref, \$eigen_vectors_nrow, \$eigen_vectors_ncol, $eigen_values_data_ref, \$eigen_values_nrow, \$eigen_values_ncol, $x_data, $x_nrow, $x_ncol);
    
    my $eigen_vectors_data = $eigen_vectors_data_ref->[0];
    
    my $eigen_vectors_dim = [$eigen_vectors_nrow, $eigen_vectors_ncol];
    
    my $eigen_vectors_ndarray = R::OP::DoubleComplex->c($eigen_vectors_data, $eigen_vectors_dim);
    
    my $eigen_values_data = $eigen_values_data_ref->[0];
    
    my $eigen_values_dim = [$eigen_values_nrow, $eigen_values_ncol];
    
    my $eigen_values_ndarray = R::OP::DoubleComplex->c($eigen_values_data, $eigen_values_dim);
    
    $eigen_values_ndarray->drop_dim;
    
    my $ret_ndarray_hash = R::NDArray::Hash->new;
    
    $ret_ndarray_hash->set("vectors", $eigen_vectors_ndarray);
    
    $ret_ndarray_hash->set("values", $eigen_values_ndarray);
    
    return $ret_ndarray_hash;
  }
  
  # Private Class Methods
  private native static method _mul : void ($ret_data_ref : Complex_2d[][], $ret_nrow_ref : int*, $ret_ncol_ref : int*, $x_data : Complex_2d[], $x_nrow :int, $x_ncol : int, $y_data : Complex_2d[], $y_nrow : int, $y_ncol : int);
  
  private native static method _det : void ($ret_data_ref : Complex_2d[][], $ret_nrow_ref : int*, $ret_ncol_ref : int*, $x_data : Complex_2d[], $x_nrow : int, $x_ncol : int);
  
  private native static method _t : void ($ret_data_ref : Complex_2d[][], $ret_nrow_ref : int*, $ret_ncol_ref : int*, $x_data : Complex_2d[], $x_nrow : int, $x_ncol : int);
  
  private native static method _solve : void ($ret_data_ref : Complex_2d[][], $ret_nrow_ref : int*, $ret_ncol_ref : int*, $x_data : Complex_2d[], $x_nrow :int, $x_ncol : int);
  
  private native static method _eigen : void ($eigen_vectors_data_ref : Complex_2d[][], $eigen_vectors_nrow_ref : int*, $eigen_vectors_ncol_ref : int*, $eigen_values_data_ref : Complex_2d[][], $eigen_values_nrow_ref : int*, $eigen_values_ncol_ref : int*, $x_data : Complex_2d[], $x_nrow : int, $x_ncol : int);
}
