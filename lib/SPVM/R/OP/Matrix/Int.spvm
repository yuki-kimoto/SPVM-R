# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::OP::Matrix::Int {
  
  use R::NDArray::Int;
  
  static method matrix : R::NDArray::Int ($data : object of Int|int[]|R::NDArray::Int, $nrow : int, $ncol : int) {
    
    my $ndarray = R::OP::Int->c($data, [$nrow, $ncol]);
    
    return $ndarray;
  }
  
  static method matrix_byrow : R::NDArray::Int ($data : object of Int|int[]|R::NDArray::Int, $nrow : int, $ncol : int) {
    
    my $ndarray = &matrix($data, $nrow, $ncol);
    
    $data = $ndarray->data;
    
    my $length = @(int[])$data;
    
    my $new_data = new int[$length];
    
    for (my $data_index = 0; $data_index < $length; $data_index++) {
      my $elem = $data->(int[])->[$data_index];
      
      my $new_row_index = $data_index / $ncol;
      
      my $new_column_index = $data_index - $ncol * $new_row_index;
      
      my $new_data_index = $nrow * $new_column_index + $new_row_index;
      
      $new_data->[$new_data_index] = $elem;
    }
    
    my $ret_ndarray = &matrix($new_data, $nrow, $ncol);
    
    return $ret_ndarray;
  }
  
  static method add : R::NDArray::Int ($x_ndarray : R::NDArray::Int, $y_ndarray : R::NDArray::Int) {
    return R::OP::Int->add($x_ndarray, $y_ndarray);
  }
  
  static method sub : R::NDArray::Int ($x_ndarray : R::NDArray::Int, $y_ndarray : R::NDArray::Int) {
    return R::OP::Int->sub($x_ndarray, $y_ndarray);
  }
}
