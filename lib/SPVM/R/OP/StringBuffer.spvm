# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::OP::StringBuffer {
  
  use R::NDArray::StringBuffer;
  use R::OP;
  use StringBuffer;
  use R::OP::String;
  
  # Class Methods
  static method c : R::NDArray::StringBuffer ($data : object of StringBuffer|StringBuffer[]|R::NDArray::StringBuffer, $dim : int[] = undef) {
    
    if ($data) {
      if ($data is_type StringBuffer) {
        $data = [(StringBuffer)$data];
      }
      elsif ($data is_type StringBuffer[]) {
        # Do nothing
      }
      elsif ($data is_type R::NDArray::StringBuffer) {
        unless ($dim) {
          $dim = $data->(R::NDArray::StringBuffer)->dim;
        }
        
        $data = $data->(R::NDArray::StringBuffer)->data;
      }
      elsif ($data is_type string) {
        my $string_buffer = StringBuffer->new((string)$data);
        
        $data = [$string_buffer];
      }
      elsif ($data is_type string[]) {
        
        my $string_ndarray = R::OP::String->c((string[])$data);
        
        $data = $string_ndarray->to_string_buffer_ndarray->data;
      }
      elsif ($data is_type R::NDArray::String) {
        unless ($dim) {
          $dim = $data->(R::NDArray::String)->dim;
        }
        
        $data = $data->(R::NDArray::String)->to_string_buffer_ndarray->data;
      }
      else {
        die "The type of the data \data must be StringBuffer, StringBuffer[], or R::NDArray::StringBuffer.";
      }
    }
    
    my $ndarray = R::NDArray::StringBuffer->new({dim => $dim, data => $data});
    
    return $ndarray;
  }
  
  precompile static method push : void ($x_ndarray : R::NDArray::StringBuffer, $y_ndarray : R::NDArray::String) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      
      my $x_elem = (StringBuffer)undef;
      if ($x_data->[$i]) {
        $x_elem = $x_data->[$i];
      }
      else {
        $x_elem = StringBuffer->new;
      }
      
      my $y_elem = (string)undef;
      if ($y_data->[$i]) {
        $y_elem = $y_data->[$i];
      }
      else {
        $y_elem = "";
      }
      
      $x_elem->push($y_elem);
    }
  }
  
  precompile static method eq : R::NDArray::Int ($x_ndarray : R::NDArray::StringBuffer, $y_ndarray : R::NDArray::StringBuffer) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::OP::Int->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      my $x_elem = (string)undef;
      if ($x_data->[$i]) {
        $x_elem = $x_data->[$i]->to_string;
      }
      
      my $y_elem = (string)undef;
      if ($y_data->[$i]) {
        $y_elem = $y_data->[$i]->to_string;
      }
      
      $ret_data->[$i] = $x_elem eq $y_elem;
    }
    
    return $ret_ndarray;
  }
  
  precompile static method ne : R::NDArray::Int ($x_ndarray : R::NDArray::StringBuffer, $y_ndarray : R::NDArray::StringBuffer) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::OP::Int->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      my $x_elem = (string)undef;
      if ($x_data->[$i]) {
        $x_elem = $x_data->[$i]->to_string;
      }
      
      my $y_elem = (string)undef;
      if ($y_data->[$i]) {
        $y_elem = $y_data->[$i]->to_string;
      }
      
      $ret_data->[$i] = $x_elem ne $y_elem;
    }
    
    return $ret_ndarray;
  }
  
  precompile static method gt : R::NDArray::Int ($x_ndarray : R::NDArray::StringBuffer, $y_ndarray : R::NDArray::StringBuffer) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::OP::Int->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      my $x_elem = (string)undef;
      if ($x_data->[$i]) {
        $x_elem = $x_data->[$i]->to_string;
      }
      
      my $y_elem = (string)undef;
      if ($y_data->[$i]) {
        $y_elem = $y_data->[$i]->to_string;
      }
      
      $ret_data->[$i] = $x_elem gt $y_elem;
    }
    
    return $ret_ndarray;
  }
  
  precompile static method ge : R::NDArray::Int ($x_ndarray : R::NDArray::StringBuffer, $y_ndarray : R::NDArray::StringBuffer) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::OP::Int->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      my $x_elem = (string)undef;
      if ($x_data->[$i]) {
        $x_elem = $x_data->[$i]->to_string;
      }
      
      my $y_elem = (string)undef;
      if ($y_data->[$i]) {
        $y_elem = $y_data->[$i]->to_string;
      }
      
      $ret_data->[$i] = $x_elem ge $y_elem;
    }
    
    return $ret_ndarray;
  }
  
  precompile static method lt : R::NDArray::Int ($x_ndarray : R::NDArray::StringBuffer, $y_ndarray : R::NDArray::StringBuffer) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::OP::Int->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      my $x_elem = (string)undef;
      if ($x_data->[$i]) {
        $x_elem = $x_data->[$i]->to_string;
      }
      
      my $y_elem = (string)undef;
      if ($y_data->[$i]) {
        $y_elem = $y_data->[$i]->to_string;
      }
      
      $ret_data->[$i] = $x_elem lt $y_elem;
    }
    
    return $ret_ndarray;
  }
  
  precompile static method le : R::NDArray::Int ($x_ndarray : R::NDArray::StringBuffer, $y_ndarray : R::NDArray::StringBuffer) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::OP::Int->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      my $x_elem = (string)undef;
      if ($x_data->[$i]) {
        $x_elem = $x_data->[$i]->to_string;
      }
      
      my $y_elem = (string)undef;
      if ($y_data->[$i]) {
        $y_elem = $y_data->[$i]->to_string;
      }
      
      $ret_data->[$i] = $x_elem le $y_elem;
    }
    
    return $ret_ndarray;
  }
  
  static method rep : R::NDArray::StringBuffer ($x_ndarray : R::NDArray::StringBuffer, $times : int) {
    return (R::NDArray::StringBuffer)R::OP->rep($x_ndarray, $times);
  }
  
  static method rep_length : R::NDArray::StringBuffer ($x_ndarray : R::NDArray::StringBuffer, $length : int) {
    return (R::NDArray::StringBuffer)R::OP->rep_length($x_ndarray, $length);
  }
}
