# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::OP::Matrix {
  version_from R;
  
  static method cbind : R::NDArray ($x_ndarray : R::NDArray, $y_ndarray : R::NDArray) {
    
    unless ($x_ndarray) {
      die "The n-dimention array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->is_matrix) {
      die "The n-dimention array \$x_ndarray must be a matrix.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimention array \$y_ndarray must be defined.";
    }
    
    unless ($y_ndarray->is_matrix) {
      die "The n-dimention array \$y_ndarray must be a matrix.";
    }
    
    # TODO: use is_type, currently is_type may has bugs.
    unless (type_name $x_ndarray eq type_name $y_ndarray) {
      die "The type of the n-dimention array \$x_ndarray must be eqaul to the type of the n-dimention array \$y_ndarray.";
    }
    
    my $x_nrow = $x_ndarray->nrow;
    
    my $x_ncol = $x_ndarray->ncol;
    
    my $y_nrow = $y_ndarray->nrow;
    
    my $y_ncol = $y_ndarray->ncol;
    
    unless ($x_nrow == $y_nrow) {
      die "The row numbers of the n-dimention array \$x_ndarray must be equal to the row numbers of the n-dimention array \$y_ndarray.";
    }
    
    my $ret_nrow = $x_nrow;
    
    my $ret_ncol = $x_ncol + $y_ncol;
    
    my $ret_ndarray = (R::NDArray)Native::MethodCall->new_proto($x_ndarray, [(object){data => undef, dim => [$ret_nrow, $ret_ncol]}]);
    
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    
    my $y_data = $y_ndarray->data;
    
    my $elem_size = $x_ndarray->elem_size;
    
    if ($x_ndarray->is_any_numeric_ndarray) {
      Fn->memcpy($ret_data, 0, $x_data, 0, $elem_size * ($x_nrow * $x_ncol));
      
      Fn->memcpy($ret_data, $elem_size * ($x_nrow * $x_ncol), $y_data, 0, $elem_size * ($y_nrow * $y_ncol));
    }
    else {
      Array->memcpy_object_address((object[])$ret_data, 0, (object[])$x_data, 0, $x_nrow * $x_ncol);
      
      Array->memcpy_object_address((object[])$ret_data, $x_nrow * $x_ncol, (object[])$y_data, 0, $y_nrow * $y_ncol);
    }
    
    return $ret_ndarray;
  }
  
  static method rbind : R::NDArray ($x_ndarray : R::NDArray, $y_ndarray : R::NDArray) {
    
    unless ($x_ndarray) {
      die "The n-dimention array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->is_matrix) {
      die "The n-dimention array \$x_ndarray must be a matrix.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimention array \$y_ndarray must be defined.";
    }
    
    unless ($y_ndarray->is_matrix) {
      die "The n-dimention array \$y_ndarray must be a matrix.";
    }
    
    unless (type_name $x_ndarray eq type_name $y_ndarray) {
      die "The type of the n-dimention array \$x_ndarray must be eqaul to the typee of the n-dimention array \$y_ndarray.";
    }
    my $x_nrow = $x_ndarray->nrow;
    
    my $x_ncol = $x_ndarray->ncol;
    
    my $y_nrow = $y_ndarray->nrow;
    
    my $y_ncol = $y_ndarray->ncol;
    
    unless ($x_ncol == $y_ncol) {
      die "The column numbers of the n-dimention array \$x_ndarray must be equal to the column numbers of the n-dimention array \$y_ndarray.";
    }
    
    my $ret_nrow = $x_nrow + $y_nrow;
    
    my $ret_ncol = $x_ncol;
    
    my $ret_ndarray = (R::NDArray)Native::MethodCall->new_proto($x_ndarray, [(object){data => undef, dim => [$ret_nrow, $ret_ncol]}]);
    
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    
    my $y_data = $y_ndarray->data;
    
    my $ret_data_index = 0;
    
    my $elem_size = $x_ndarray->elem_size;
    
    for (my $col = 0; $col < $ret_ncol; $col++) {
      if ($x_ndarray->is_any_numeric_ndarray) {
        Fn->memcpy($ret_data, $elem_size * $ret_data_index, $x_data, $elem_size * $x_nrow * $col, $elem_size * $x_nrow);
        
        Fn->memcpy($ret_data, $elem_size * ($ret_data_index + $x_nrow), $y_data, $elem_size * $y_nrow * $col, $elem_size * $y_nrow);
      }
      else {
        Array->memcpy_object_address((object[])$ret_data, $ret_data_index, (object[])$x_data, $x_nrow * $col, $x_nrow);
        
        Array->memcpy_object_address((object[])$ret_data, $ret_data_index + $x_nrow, (object[])$y_data, $y_nrow * $col, $y_nrow);
      }
      
      $ret_data_index += $ret_nrow;
    }
    
    return $ret_ndarray;
  }
}
