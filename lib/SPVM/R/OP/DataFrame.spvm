# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::OP::DataFrame {
  
  # Class Methods
  static method ncol : int ($x_data_frame : R::DataFrame) {
    
    unless ($x_data_frame) {
      die "The data frame \$x_data_frame must be defined.";
    }
    
    my $ncol = $x_data_frame->get_fields_length;
    
    return $ncol;
  }
  
  static method nrow : int ($x_data_frame : R::DataFrame) {
    
    unless ($x_data_frame) {
      die "The data frame \$x_data_frame must be defined.";
    }
    
    my $nrow = $x_data_frame->length;
    
    return $nrow;
  }
  
  static method cbind : R::DataFrame ($x_data_frame : R::DataFrame, $y_data_frame : R::DataFrame) {
    
    my $ret_data_frame = R::DataFrame->new;
    
    my $x_fields_length = $x_data_frame->get_fields_length;
    
    for (my $i = 0; $i < $x_fields_length; $i++) {
      my $x_field_name = $x_data_frame->get_field_name($i);
      
      my $x_ndarray = $x_data_frame->get_ndarray($i);
      
      $ret_data_frame->push_field($x_field_name, $x_ndarray);
    }
    
    my $y_fields_length = $y_data_frame->get_fields_length;
    
    for (my $i = 0; $i < $y_fields_length; $i++) {
      my $y_field_name = $y_data_frame->get_field_name($i);
      
      my $y_ndarray = $y_data_frame->get_ndarray($i);
      
      $ret_data_frame->push_field($y_field_name, $y_ndarray);
    }
    
    return $ret_data_frame;
  }
  
  static method rbind : R::DataFrame ($x_data_frame : R::DataFrame, $y_data_frame : R::DataFrame) {
    
    my $ret_data_frame = R::DataFrame->new;
    
    my $x_fields_length = $x_data_frame->get_fields_length;
    
    my $y_fields_length = $y_data_frame->get_fields_length;
    
    unless ($x_fields_length == $y_fields_length) {
      die "The length of the fields of the data frame \$x_data_frame must be equal to the length of the fields of the data frame \$y_data_frame.";
    }
    
    my $fields_length = $x_fields_length;
    
    for (my $i = 0; $i < $fields_length; $i++) {
      
      my $x_field_name = $x_data_frame->get_field_name($i);
      
      my $x_ndarray = $x_data_frame->get_ndarray($i);
      
      my $y_field_name = $y_data_frame->get_field_name($i);
      
      my $y_ndarray = $y_data_frame->get_ndarray($i);
      
      unless ($x_field_name eq $y_field_name) {
        die "The field name at field index $i of the data frame \$x_data_frame must be equal to the field name at field index $i of the data frame \$y_data_frame.";
      }
      
      unless (type_name $x_ndarray eq type_name $y_ndarray) {
        die "The n-dimension array class name at field index $i of the data frame \$x_data_frame must be equal to the n-dimension array class name at field index $i of the data frame \$y_data_frame.";
      }
      
      my $field_name = $x_field_name;
      
      my $ret_ndarray = R::OP->rbind($x_ndarray, $y_ndarray);
      
      $ret_data_frame->push_field($field_name, $ret_ndarray);
    }
    
    return $ret_data_frame;
  }
  
}
