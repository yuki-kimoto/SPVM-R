# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::OP::Float {
  
  use R::NDArray::Int;
  use R::NDArray::Long;
  use R::NDArray::Float;
  use R::NDArray::Double;
  use R::NDArray::FloatComplex;
  use R::NDArray::DoubleComplex;
  use R::NDArray::String;
  use R::OP;
  use R::OP::Int;
  use R::OP::Long;
  use R::OP::Float;
  use R::OP::Double;
  use R::OP::FloatComplex;
  use R::OP::DoubleComplex;
  use R::OP::String;
  use Fn;
  use Complex_2f;
  use Complex_2d;
  use Math;
  use FloatList;
  
  # Class Methods
  static method c : R::NDArray::Float ($data : object of Float|float[]|R::NDArray::Float, $dim : int[] = undef) {
    
    if ($data) {
      if ($data is_type Float) {
        $data = [(float)$data->(Float)];
      }
      elsif ($data is_type float[]) {
        # Do nothing
      }
      elsif ($data is_type R::NDArray::Float) {
        unless ($dim) {
          $dim = $data->(R::NDArray::Float)->dim;
        }
        $data = $data->(R::NDArray::Float)->data;
      }
      else {
        die "The type of the data \data must be Float, float[], or R::NDArray::Float.";
      }
    }
    
    my $ndarray = R::NDArray::Float->new({dim => $dim, data => $data});
    
    return $ndarray;
  }
  
  static method add : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] + $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile static method sub : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] - $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile static method mul : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] * $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile static method scamul : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $scalar_ndarray : R::NDArray::Float) {
    
    unless ($scalar_ndarray) {
      die "The n-dimensional array \$scalar_ndarray must be defined.";
    }
    
    unless ($scalar_ndarray->is_scalar) {
      die "The n-dmension array \$scalar_ndarray must be a scalar.";
    }
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $scalar_data = $scalar_ndarray->data;
    my $x_data = $x_ndarray->data;
    
    my $scalar = $scalar_data->[0];
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] * $scalar;
    }
    
    return $ret_ndarray;
  }
  
  precompile static method div : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] / $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile static method scadiv : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $scalar_ndarray : R::NDArray::Float) {
    
    unless ($scalar_ndarray) {
      die "The n-dimensional array \$scalar_ndarray must be defined.";
    }
    
    unless ($scalar_ndarray->is_scalar) {
      die "The n-dmension array \$scalar_ndarray must be a scalar.";
    }
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $scalar_data = $scalar_ndarray->data;
    my $x_data = $x_ndarray->data;
    
    my $scalar = $scalar_data->[0];
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] / $scalar;
    }
    
    return $ret_ndarray;
  }
  
  precompile static method neg : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = -$x_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile static method abs : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->fabsf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method eq : R::NDArray::Int ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::OP::Int->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] == $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile static method ne : R::NDArray::Int ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::OP::Int->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = !($x_data->[$i] == $y_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method gt : R::NDArray::Int ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::OP::Int->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] > $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile static method ge : R::NDArray::Int ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::OP::Int->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] >= $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile static method lt : R::NDArray::Int ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::OP::Int->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] < $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile static method le : R::NDArray::Int ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::OP::Int->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] <= $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  static method rep : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $times : int) {
    return (R::NDArray::Float)R::OP->rep($x_ndarray, $times);
  }
  
  static method expand : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $length : int) {
    return (R::NDArray::Float)R::OP->expand($x_ndarray, $length);
  }
  
  static method seq : R::NDArray::Float ($begin : float, $end : float, $by : float = 1) {
    
    if ($by == 0) {
      die "\$by must not be 0.";
    }
    elsif ($by > 0) {
      unless ($end >= $begin) {
        die "\$end must be greater than or equal to \$begin if \$by is greater than 0.";
      }
    }
    else {
      unless ($end <= $begin) {
        die "\$end must be less than or equal to \$begin if \$by is less than 0.";
      }
    }
    
    my $ret_data_list = FloatList->new;
    my $current = $begin;
    while (1) {
      if ($by >= 0) {
        if ($current > $end) {
          last;
        }
      }
      else {
        if ($current < $end) {
          last;
        }
      }
      $ret_data_list->push($current);
      $current += $by;
    }
    
    my $ret_data = $ret_data_list->to_array;
    
    my $ret_ndarray = R::OP::Float->c($ret_data);
    
    return $ret_ndarray;
  }
  
  static method seq_length : R::NDArray::Float ($begin : float, $end : float, $length : int) {
    
    my $by = (float)(($end - $begin + 1) / $length);
    
    my $ret_ndarray = &seq($begin, $end, $by);
    
    return $ret_ndarray;
  }
  
  precompile static method sin : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->sinf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }

  precompile static method cos : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->cosf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method tan : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->tanf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method sinh : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->sinhf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method cosh : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->coshf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method tanh : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->tanhf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method acos : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->acosf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method asin : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->asinf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method atan : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->atanf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method asinh : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->asinhf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method acosh : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->acoshf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method atanh : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->atanhf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method exp : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->expf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method expm1 : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->expm1f($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method log : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->logf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method logb : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->logbf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method log2 : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->log2f($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method log10 : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->log10f($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method sqrt : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->sqrtf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method isinf : R::NDArray::Int ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::OP::Int->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->isinff($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  static method is_infinite : R::NDArray::Int ($x_ndarray : R::NDArray::Float) {
    
    return &isinf($x_ndarray);
  }
  
  static method is_finite : R::NDArray::Int ($x_ndarray : R::NDArray::Float) {
    
    my $is_finite = R::OP::Int->and(R::OP::Int->not(&isnan($x_ndarray)), R::OP::Int->not(&is_infinite($x_ndarray)));
    
    return $is_finite;
  }
  
  precompile static method isnan : R::NDArray::Int ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::OP::Int->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->isnanf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  static method is_nan : R::NDArray::Int ($x_ndarray : R::NDArray::Float) {
    
    return &isnan($x_ndarray);
  }
  
  precompile static method pow : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->powf($x_data->[$i], $y_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method atan2 : R::NDArray::Float ($y_ndarray : R::NDArray::Float, $x_ndarray : R::NDArray::Float) {
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->atan2f($y_data->[$i], $x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method modf : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $intpart_ndarray_ref : R::NDArray::Float[]) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($intpart_ndarray_ref) {
      die "The integer part n-dimensional array \$intpart_ndarray_ref must be defined.";
    }
    
    unless (@$intpart_ndarray_ref == 1) {
      die "The length of integer part n-dimensional array \$intpart_ndarray_ref must be 1.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $intpart_ndarray = &c(undef, $x_dim);
    my $x_data_intpart = $intpart_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      my $intpart = 0.0f;
      $ret_data->[$i] = Math->modff($x_data->[$i], \$intpart);
      $x_data_intpart->[$i] = $intpart;
    }
    
    $intpart_ndarray_ref->[0] = $intpart_ndarray;
    
    return $ret_ndarray;
  }
  
  precompile static method ceil : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->ceilf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  static method ceiling : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    return &ceil($x_ndarray);
  }
  
  precompile static method floor : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->floorf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method round : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->roundf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method lround : R::NDArray::Long ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::OP::Long->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->lroundf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method remainder : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->remainderf($x_data->[$i], $y_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method fmod : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->fmodf($x_data->[$i], $y_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile static method sum : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, [1]);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    my $sum = (float)0;
    for (my $i = 0; $i < $length; $i++) {
      $sum += $x_data->[$i];
    }
    $ret_data->[0] = $sum;
    
    return $ret_ndarray;
  }
  
  precompile static method cumsum : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->is_vector) {
      die "The n-dimensional array \$x_ndarray must be a vector.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, [$length]);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    my $sum = (float)0;
    for (my $i = 0; $i < $length; $i++) {
      $sum += $x_data->[$i];
      $ret_data->[$i] = $sum;
    }
    
    return $ret_ndarray;
  }
  
  precompile static method prod : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, [1]);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    my $prod = (float)1;
    for (my $i = 0; $i < $length; $i++) {
      $prod *= $x_data->[$i];
    }
    $ret_data->[0] = $prod;
    
    return $ret_ndarray;
  }
  
  precompile static method cumprod : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->is_vector) {
      die "The n-dimensional array \$x_ndarray must be a vector.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, [$length]);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    my $prod = (float)1;
    for (my $i = 0; $i < $length; $i++) {
      $prod *= $x_data->[$i];
      $ret_data->[$i] = $prod;
    }
    
    return $ret_ndarray;
  }
  
  precompile static method diff : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $x_dim = $x_ndarray->dim;
    
    unless ($x_ndarray->is_vector) {
      die "The n-dimensional array \$x_ndarray must be a vector.";
    }
    
    my $length = $x_ndarray->length;
    
    unless ($length > 0) {
      die "The length of \$x_ndarray must be greater than 0.";
    }
    
    my $ret_ndarray = &c(undef, [$length - 1]);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length - 1; $i++) {
      $ret_data->[$i] = $x_data->[$i + 1] - $x_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile static method max : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->length > 0) {
      die "The length of n-dimensional array \$x_ndarray must be greater than 0.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, [1]);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    my $max = $x_data->[0];
    for (my $i = 0; $i < $length; $i++) {
      my $current = $x_data->[$i];
      
      if ($current > $max) {
        $max = $current;
      }
    }
    $ret_data->[0] = $max;
    
    return $ret_ndarray;
  }
  
  precompile static method min : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->length > 0) {
      die "The length of n-dimensional array \$x_ndarray must be greater than 0.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = &c(undef, [1]);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    my $min = $x_data->[0];
    for (my $i = 0; $i < $length; $i++) {
      my $current = $x_data->[$i];
      
      if ($current < $min) {
        $min = $current;
      }
    }
    $ret_data->[0] = $min;
    
    return $ret_ndarray;
  }

  static method mean : R::NDArray::Float ($x_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->length > 0) {
      die "The length of n-dimensional array \$x_ndarray must be greater than 0.";
    }
    
    my $sum_ndarray = &sum($x_ndarray);
    my $sum = $sum_ndarray->data->[0];
    
    my $length = $x_ndarray->length;
    
    my $mean = $sum / $length;
    
    my $ret_ndarray = &c([$mean]);
    
    return $ret_ndarray;
  }
  
  precompile static method dot : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->is_vector) {
      die "The n-dimensional array \$x_ndarray must be a vector.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    unless ($y_ndarray->is_vector) {
      die "The n-dimensional array \$y_ndarray must be a vector.";
    }
    
    my $equals_dropped_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    my $x_length = $x_ndarray->length;
    
    my $y_length = $y_ndarray->length;
    
    unless ($x_length == $y_length) {
      die "The length of the n-dimensional array \$x_ndarray must be equal to the length of the n-dimensional array \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $ret_dim = [1];
    
    my $ret_ndarray = &c(undef, $ret_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    my $inner_product = 0;
    for (my $data_index = 0; $data_index < $length; $data_index++) {
      $inner_product += $x_data->[$data_index] * $y_data->[$data_index];
    }
    $ret_data->[0] = $inner_product;
    
    return $ret_ndarray;
  }
  
  precompile static method cross : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->is_vector) {
      die "The n-dimensional array \$x_ndarray must be a vector.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    unless ($y_ndarray->is_vector) {
      die "The n-dimensional array \$y_ndarray must be a vector.";
    }
    
    my $equals_dropped_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dropped_dim) {
      die "The dimension of n-dimensional array \$x_ndarray must be equal to the dimension of n-dimensional array \$y_ndarray.";
    }
    
    my $x_length = $x_ndarray->length;
    
    unless ($x_length == 3) {
      die "The length of elems of n-dimensional array \$x_ndarray must be 3.";
    }
    
    my $y_length = $y_ndarray->length;
    
    unless ($y_length == 3) {
      die "The length of elems of n-dimensional array \$y_ndarray must be 3.";
    }
    
    my $length = $x_length;
    
    my $ret_dim = [3];
    
    my $ret_ndarray = &c(undef, $ret_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    $ret_data->[0] = $x_data->[1] * $y_data->[2] - $x_data->[2] * $y_data->[1];
    $ret_data->[1] = $x_data->[2] * $y_data->[0] - $x_data->[0] * $y_data->[2];
    $ret_data->[2] = $x_data->[0] * $y_data->[1] - $x_data->[1] * $y_data->[0];
    
    return $ret_ndarray;
  }
  
  precompile static method outer : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->is_vector) {
      die "The n-dimensional array \$x_ndarray must be a vector.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimensional array \$y_ndarray must be defined.";
    }
    
    unless ($y_ndarray->is_vector) {
      die "The n-dimensional array \$y_ndarray must be a vector.";
    }
    
    my $x_length = $x_ndarray->length;
    
    my $y_length = $y_ndarray->length;
    
    my $ret_length = $x_length * $y_length;
    
    my $ret_dim = [$x_length, $y_length];
    
    my $ret_ndarray = &c(undef, $ret_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $y_index = 0; $y_index < $y_length; $y_index++) {
      for (my $x_index = 0; $x_index < $x_length; $x_index++) {
        my $data_index = $x_length * $y_index + $x_index;
        $ret_data->[$data_index] = $x_data->[$x_index] * $y_data->[$y_index];
      }
    }
    
    return $ret_ndarray;
  }
  
  static method runif : R::NDArray::Float ($length : int, $options : object[]) {
    return R::OP::Double->runif($length, $options)->to_float_ndarray;
  }
  
  static method pi : R::NDArray::Float () {
    
    my $x = (float)Math->PI;
    
    my $ret_ndarray = &c([$x]);
    
    return $ret_ndarray;
  }
  
}
