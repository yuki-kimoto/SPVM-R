# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::OP {
  
  use R::NDArray;
  use Fn;
  use Array;
  
  # Class Methods
  static method equals_dim : int ($x_ndarray : R::NDArray, $y_ndarray : R::NDArray) {
    
    unless ($x_ndarray) {
      die "The n-dimention array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimention array \$y_ndarray must be defined.";
    }
    
    my $x_dim = $x_ndarray->dim;
    
    my $y_dim = $y_ndarray->dim;
    
    my $equals_dim = R::Util->equals_dim($x_dim, $y_dim);
    
    return $equals_dim;
  }
  
  static method equals_dropped_dim : int ($x_ndarray : R::NDArray, $y_ndarray : R::NDArray) {
    
    unless ($x_ndarray) {
      die "The n-dimention array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimention array \$y_ndarray must be defined.";
    }
    
    my $x_dim = $x_ndarray->dim;
    
    my $y_dim = $y_ndarray->dim;
    
    my $equals_dim = R::Util->equals_dropped_dim($x_dim, $y_dim);
    
    return $equals_dim;
  }
  
  precompile static method rep : R::NDArray ($x_ndarray : R::NDArray, $times : int) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $x_dim = $x_ndarray->dim;
    
    unless ($times >= 0) {
      die "The repeat count \$times must be greater than or equal to 0.";
    }
    
    my $x_length = $x_ndarray->length;
    
    my $ret_length = $x_length * $times;
    
    my $ret_ndarray = (R::NDArray)Native::MethodCall->new_proto($x_ndarray, [(object){data => undef, dim => [$ret_length]}]);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $ret_length; $i += $x_length) {
      if ($x_ndarray->is_any_numeric_ndarray) {
        my $elem_size = $x_ndarray->elem_size;
        
        Fn->memcpy($ret_data, $elem_size * $i, $x_data, 0, $elem_size * $x_length);
      }
      else {
        Array->memcpy_object_address((object[])$ret_data, $i, (object[])$x_data, 0, $x_length);
      }
    }
    
    return $ret_ndarray;
  }
  
  precompile static method rep_length : R::NDArray ($x_ndarray : R::NDArray, $length : int) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $x_length = $x_ndarray->length;
    
    unless ($length >= 0) {
      die "The length \$length must be greater than or equal to 0.";
    }
    
    my $times = 0;
    if ($length > 0) {
      unless ($length % $x_length == 0) {
        die "The length \$length must be devided by the length of the n-dimensional array \$x_ndarray.";
      }
      
      $times = $length / $x_length;
    }
    
    my $ret_ndarray = &rep($x_ndarray, $times);
    
    return $ret_ndarray;
  }
  
  precompile static method is_na : R::NDArray::Int ($x_ndarray : R::NDArray) {
    
    unless ($x_ndarray) {
      die "The n-dimensional array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::OP::Int->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_ndarray->elem_is_na($x_data, $i);
    }
    
    return $ret_ndarray;
  }
  
}
