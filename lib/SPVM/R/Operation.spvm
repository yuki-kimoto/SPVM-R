# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::Operation {
  
  use R::NDArray;
  
  # Class Methods
  static method new : R::Operation () {
    
    my $self = new R::Operation;
    
    return $self;
  }
  
  method equals_dim : int ($x_ndarray : R::NDArray, $y_ndarray : R::NDArray) {
    
    unless ($x_ndarray) {
      die "The n-dimention array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimention array \$y_ndarray must be defined.";
    }
    
    my $x_dim = $x_ndarray->dim;
    
    my $y_dim = $y_ndarray->dim;
    
    my $equals_dim = 0;
    if ($x_dim && $y_dim) {
      my $x_dim_length = @$x_dim;
      
      my $y_dim_length = @$y_dim;
      
      if ($x_dim_length == $y_dim_length) {
        my $equals_dim_elements = 1;
        for (my $i = 0; $i < $x_dim_length; $i++) {
          my $x_dim_element = $x_dim->[$i];
          my $y_dim_element = $y_dim->[$i];
          
          unless ($x_dim_element == $y_dim_element) {
            $equals_dim_elements = 0;
            last;
          }
        }
        $equals_dim = $equals_dim_elements;
      }
    }
    elsif (!$x_dim && !$y_dim) {
      $equals_dim = 1;
    }
    
    return $equals_dim;
  }
  
  method c : R::NDArray ($x_data : object, $x_dim : int[] = undef) {
    
    my $x_ndarray = R::NDArray::Double->new({dim => $x_dim, data => $x_data});
    
    return $x_ndarray;
  }
  
  precompile method rep : R::NDArray ($x_ndarray : R::NDArray, $times : int) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $x_dim = $x_ndarray->dim;
    
    unless (@$x_dim == 1) {
      die "The length of dim field of \$x_ndarray must be 1.";
    }
    
    unless ($times > 0) {
      die "The repeat count \$times must be greater than 0.";
    }
    
    my $x_length = $x_ndarray->length;
    
    my $ret_length = $x_length * $times;
    
    my $ret_ndarray = $self->c(undef, [$ret_length]);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $ret_length; $i += $x_length) {
      my $x_index = $i % $x_length;
      
      if ($x_ndarray->is_numeric) {
        my $element_size = $x_ndarray->element_size;
        
        Fn->memcpy($ret_data, $i, $x_data, $x_index, $element_size);
      }
      else {
        $ret_data->(object[])->[$i] = $x_data->(object[])->[$x_index];
      }
    }
    
    return $ret_ndarray;
  }
  
  precompile method rep_length : R::NDArray ($x_ndarray : R::NDArray, $length : int) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $x_dim = $x_ndarray->dim;
    
    unless (@$x_dim == 1) {
      die "The length of dim field of \$x_ndarray must be 1.";
    }
    
    unless ($length >= 0) {
      die "The repeat count \$times must be greater than 0.";
    }
    
    my $x_length = $x_ndarray->length;
    
    my $ret_ndarray = $self->c(undef, [$length]);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i += $x_length) {
      my $x_index = $i % $x_length;
      
      if ($x_ndarray->is_numeric) {
        my $element_size = $x_ndarray->element_size;
        
        Fn->memcpy($ret_data, $i, $x_data, $x_index, $element_size);
      }
      else {
        $ret_data->(object[])->[$i] = $x_data->(object[])->[$x_index];
      }
    }
    
    return $ret_ndarray;
  }
  
}
