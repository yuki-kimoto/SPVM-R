# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::Operation {
  
  use R::NDArray;
  
  # Class Methods
  static method new : R::Operation () {
    
    my $self = new R::Operation;
    
    return $self;
  }
  
  method equals_dim : int ($x_ndarray : R::NDArray, $y_ndarray : R::NDArray) {
    
    unless ($x_ndarray) {
      die "The n-dimention array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimention array \$y_ndarray must be defined.";
    }
    
    my $dim1 = $x_ndarray->dim;
    
    my $dim2 = $y_ndarray->dim;
    
    my $equals_dim = 0;
    if ($dim1 && $dim2) {
      my $dim1_length = @$dim1;
      
      my $dim2_length = @$dim2;
      
      if ($dim1_length == $dim2_length) {
        my $equals_dim_elements = 1;
        for (my $i = 0; $i < $dim1_length; $i++) {
          my $dim1_element = $dim1->[$i];
          my $dim2_element = $dim2->[$i];
          
          unless ($dim1_element == $dim2_element) {
            $equals_dim_elements = 0;
            last;
          }
        }
        $equals_dim = $equals_dim_elements;
      }
    }
    elsif (!$dim1 && !$dim2) {
      $equals_dim = 1;
    }
    
    return $equals_dim;
  }
}
