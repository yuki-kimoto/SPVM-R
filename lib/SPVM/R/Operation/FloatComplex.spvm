# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::Operation::FloatComplex extends R::Operation {
  
  use R::NDArray::FloatComplex;
  use Complex_2f;
  use Fn;
  use Math;
  
  # Class Methods
  static method new : R::Operation::FloatComplex () {
    
    my $self = new R::Operation::FloatComplex;
    
    return $self;
  }
  
  # Instance Methods
  method c : R::NDArray::FloatComplex ($x_data : Complex_2f[]) {
    
    unless ($x_data) {
      die "The data \$x_data must be defined.";
    }
    
    my $length = @$x_data;
    
    my $x_dim = (int[])undef;
    if ($length > 0) {
      $x_dim = [$length];
    }
    
    my $x_ndarray = R::NDArray::FloatComplex->new({dim => $x_dim, data => $x_data});
    
    return $x_ndarray;
  }
  
  method array : R::NDArray::FloatComplex ($x_data : Complex_2f[], $x_dim : int[]) {
    
    my $x_ndarray = R::NDArray::FloatComplex->new({dim => $x_dim, data => $x_data});
    
    return $x_ndarray;
  }
  
  method add : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex, $y_ndarray : R::NDArray::FloatComplex) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_data_ret = new Complex_2f[$length];
    my $x_ndarray_ret = $self->array($x_data_ret, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->caddf($x_data->[$i], $y_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method sub : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex, $y_ndarray : R::NDArray::FloatComplex) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_data_ret = new Complex_2f[$length];
    my $x_ndarray_ret = $self->array($x_data_ret, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->csubf($x_data->[$i], $y_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method mul : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex, $y_ndarray : R::NDArray::FloatComplex) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_data_ret = new Complex_2f[$length];
    my $x_ndarray_ret = $self->array($x_data_ret, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->cmulf($x_data->[$i], $y_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method div : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex, $y_ndarray : R::NDArray::FloatComplex) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_data_ret = new Complex_2f[$length];
    my $x_ndarray_ret = $self->array($x_data_ret, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->cdivf($x_data->[$i], $y_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method clone : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::FloatComplex->new->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i]{re} = (float)$x_data->[$i]{re};
      $x_data_ret->[$i]{im} = (float)$x_data->[$i]{im};
    }
    
    return $x_ndarray_ret;
  }
  
  method to_double_complex : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::DoubleComplex->new->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i]{re} = (double)$x_data->[$i]{re};
      $x_data_ret->[$i]{im} = (double)$x_data->[$i]{im};
    }
    
    return $x_ndarray_ret;
  }
  
  method to_string : R::NDArray::String ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::String->new->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = (string)$x_data->[$i]{re} . " + " . (string)$x_data->[$i]{im};
    }
    
    return $x_ndarray_ret;
  }
  
  method abs : R::NDArray::Float ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Float->new->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->cabsf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method neg : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->cnegf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method sin : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->csinf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }

  method cos : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->ccosf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method tan : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->ctanf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method sinh : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->csinhf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method cosh : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->ccoshf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method tanh : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->ctanhf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method acos : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->cacosf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method asin : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->casinf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method atan : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->catanf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method asinh : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->casinhf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method acosh : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->cacoshf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method atanh : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->catanhf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method exp : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->cexpf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method log : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->clogf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method sqrt : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->csqrtf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method conj : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->conjf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method arg : R::NDArray::Float ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Float->new->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->cargf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method re : R::NDArray::Float ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Float->new->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = $x_data->[$i]{re};
    }
    
    return $x_ndarray_ret;
  }
  
  method im : R::NDArray::Float ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Float->new->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = $x_data->[$i]{im};
    }
    
    return $x_ndarray_ret;
  }
  
  method pow : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex, $y_ndarray : R::NDArray::FloatComplex) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->cpowf($x_data->[$i], $y_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method eq : R::NDArray::Int ($x_ndarray : R::NDArray::FloatComplex, $y_ndarray : R::NDArray::FloatComplex) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Int->new->array(undef, $x_dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = $x_data->[$i]{re} == $y_data->[$i]{re} && $x_data->[$i]{im} == $y_data->[$i]{im};
    }
    
    return $x_ndarray_ret;
  }
  
  method ne : R::NDArray::Int ($x_ndarray : R::NDArray::FloatComplex, $y_ndarray : R::NDArray::FloatComplex) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Int->new->array(undef, $x_dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = !($x_data->[$i]{re} == $y_data->[$i]{re} && $x_data->[$i]{im} == $y_data->[$i]{im});
    }
    
    return $x_ndarray_ret;
  }
  
  method sum : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, [1]);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $sum : Complex_2f;
    for (my $i = 0; $i < $length; $i++) {
      $sum = Math->caddf($sum, $x_data->[$i]);
    }
    $x_data_ret->[0] = $sum;
    
    return $x_ndarray_ret;
  }
  
  method cumsum : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $sum : Complex_2f;
    for (my $i = 0; $i < $length; $i++) {
      $sum = Math->caddf($sum, $x_data->[$i]);
      $x_data_ret->[$i] = $sum;
    }
    
    return $x_ndarray_ret;
  }
  
  method prod : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, [1]);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $prod = Math->complexf(1, 0);
    for (my $i = 0; $i < $length; $i++) {
      $prod = Math->cmulf($prod, $x_data->[$i]);
    }
    $x_data_ret->[0] = $prod;
    
    return $x_ndarray_ret;
  }
  
  method cumprod : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::FloatComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $prod = Math->complexf(1, 0);
    for (my $i = 0; $i < $length; $i++) {
      $prod = Math->cmulf($prod, $x_data->[$i]);
      $x_data_ret->[$i] = $prod;
    }
    
    return $x_ndarray_ret;
  }
  
}
