# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::Operation::DoubleComplex extends R::Operation {
  
  use R::NDArray::DoubleComplex;
  use Fn;
  
  # Class Methods
  static method new : R::Operation::DoubleComplex () {
    
    my $self = new R::Operation::DoubleComplex;
    
    return $self;
  }
  
  # Instance Methods
  method c : R::NDArray::DoubleComplex ($data : Complex_2d[]) {
    
    unless ($data) {
      die "The data \$data must be defined.";
    }
    
    my $length = @$data;
    
    my $dim = (int[])undef;
    if ($length > 0) {
      $dim = [$length];
    }
    
    my $x_ndarray = R::NDArray::DoubleComplex->new({dim => $dim, data => $data});
    
    return $x_ndarray;
  }
  
  method array : R::NDArray::DoubleComplex ($data : Complex_2d[], $dim : int[]) {
    
    my $x_ndarray = R::NDArray::DoubleComplex->new({dim => $dim, data => $data});
    
    return $x_ndarray;
  }
  
  method add : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex, $y_ndarray : R::NDArray::DoubleComplex) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $data_ret = new Complex_2d[$length];
    my $x_ndarray_ret = $self->array($data_ret, $dim);
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->cadd($data1->[$i], $data2->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method sub : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex, $y_ndarray : R::NDArray::DoubleComplex) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $data_ret = new Complex_2d[$length];
    my $x_ndarray_ret = $self->array($data_ret, $dim);
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->csub($data1->[$i], $data2->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method mul : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex, $y_ndarray : R::NDArray::DoubleComplex) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $data_ret = new Complex_2d[$length];
    my $x_ndarray_ret = $self->array($data_ret, $dim);
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->cmul($data1->[$i], $data2->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method div : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex, $y_ndarray : R::NDArray::DoubleComplex) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $data_ret = new Complex_2d[$length];
    my $x_ndarray_ret = $self->array($data_ret, $dim);
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->cdiv($data1->[$i], $data2->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method to_float_complex : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::FloatComplex->new->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i]{re} = (float)$data->[$i]{re};
      $data_ret->[$i]{im} = (float)$data->[$i]{im};
    }
    
    return $x_ndarray_ret;
  }
  
  method clone : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::DoubleComplex->new->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i]{re} = (double)$data->[$i]{re};
      $data_ret->[$i]{im} = (double)$data->[$i]{im};
    }
    
    return $x_ndarray_ret;
  }
  
  method to_string : R::NDArray::String ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::String->new->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = (string)$data->[$i]{re} . " + " . (string)$data->[$i]{im};
    }
    
    return $x_ndarray_ret;
  }
  
  method abs : R::NDArray::Double ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Double->new->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->cabs($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method neg : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->cneg($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method sin : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->csin($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }

  method cos : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->ccos($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method tan : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->ctan($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method sinh : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->csinh($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method cosh : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->ccosh($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method tanh : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->ctanh($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method acos : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->cacos($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method asin : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->casin($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method atan : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->catan($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method asinh : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->casinh($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method acosh : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->cacosh($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method atanh : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->catanh($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method exp : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->cexp($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method log : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->clog($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method sqrt : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->csqrt($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method conj : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->conj($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method arg : R::NDArray::Double ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Double->new->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->carg($data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method re : R::NDArray::Double ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Double->new->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = $data->[$i]{re};
    }
    
    return $x_ndarray_ret;
  }
  

  method im : R::NDArray::Double ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Double->new->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = $data->[$i]{im};
    }
    
    return $x_ndarray_ret;
  }
  
  method pow : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex, $y_ndarray : R::NDArray::DoubleComplex) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    my $data_ret = $x_ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->cpow($data1->[$i], $data2->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method eq : R::NDArray::Int ($x_ndarray : R::NDArray::DoubleComplex, $y_ndarray : R::NDArray::DoubleComplex) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    my $data_ret = $x_ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = $data1->[$i]{re} == $data2->[$i]{re} && $data1->[$i]{im} == $data2->[$i]{im};
    }
    
    return $x_ndarray_ret;
  }
  
  method ne : R::NDArray::Int ($x_ndarray : R::NDArray::DoubleComplex, $y_ndarray : R::NDArray::DoubleComplex) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    my $data_ret = $x_ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = !($data1->[$i]{re} == $data2->[$i]{re} && $data1->[$i]{im} == $data2->[$i]{im});
    }
    
    return $x_ndarray_ret;
  }
  
  method sum : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, [1]);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    my $sum : Complex_2d;
    for (my $i = 0; $i < $length; $i++) {
      $sum = Math->cadd($sum, $data->[$i]);
    }
    $data_ret->[0] = $sum;
    
    return $x_ndarray_ret;
  }
  
  method cumsum : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    my $sum : Complex_2d;
    for (my $i = 0; $i < $length; $i++) {
      $sum = Math->cadd($sum, $data->[$i]);
      $data_ret->[$i] = $sum;
    }
    
    return $x_ndarray_ret;
  }
  
  method prod : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, [1]);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    my $prod = Math->complex(1, 0);
    for (my $i = 0; $i < $length; $i++) {
      $prod = Math->cmul($prod, $data->[$i]);
    }
    $data_ret->[0] = $prod;
    
    return $x_ndarray_ret;
  }
  
  method cumprod : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::DoubleComplex) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $data = $x_ndarray->data;
    my $data_ret = $x_ndarray_ret->data;
    
    my $prod = Math->complex(1, 0);
    for (my $i = 0; $i < $length; $i++) {
      $prod = Math->cmul($prod, $data->[$i]);
      $data_ret->[$i] = $prod;
    }
    
    return $x_ndarray_ret;
  }
  
}
