# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::Operation::Float extends R::Operation {
  
  use R::NDArray::Float;
  use Fn;
  
  # Class Methods
  static method new : R::Operation::Float () {
    
    my $self = new R::Operation::Float;
    
    return $self;
  }
  
  # Instance Methods
  method c : R::NDArray::Float ($data : float[]) {
    
    unless ($data) {
      die "The data \$data must be defined.";
    }
    
    my $length = @$data;
    
    my $dim = (int[])undef;
    if ($length > 0) {
      $dim = [$length];
    }
    
    my $ndarray = R::NDArray::Float->new({dim => $dim, data => $data});
    
    return $ndarray;
  }
  
  method array : R::NDArray::Float ($data : float[], $dim : int[]) {
    
    my $ndarray = R::NDArray::Float->new({dim => $dim, data => $data});
    
    return $ndarray;
  }
  
  method add : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    my $data_ret = $ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = $data1->[$i] + $data2->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method sub : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    my $data_ret = $ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = $data1->[$i] - $data2->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method mul : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    my $data_ret = $ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = $data1->[$i] * $data2->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method div : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    my $data_ret = $ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = $data1->[$i] / $data2->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method remainder : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    my $data_ret = $ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->remainderf($data1->[$i], $data2->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method fmod : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    my $data_ret = $ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->fmodf($data1->[$i], $data2->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method to_int : R::NDArray::Int ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = (int)$data->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method to_long : R::NDArray::Long ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = R::Operation::Long->new->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = (long)$data->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method clone : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = (float)$data->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method to_double : R::NDArray::Double ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = R::Operation::Double->new->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = (double)$data->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method to_float_complex : R::NDArray::FloatComplex ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = R::Operation::FloatComplex->new->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i]{re} = (float)$data->[$i];
      $data_ret->[$i]{im} = 0f;
    }
    
    return $ndarray_ret;
  }
  
  method to_double_complex : R::NDArray::DoubleComplex ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = R::Operation::DoubleComplex->new->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i]{re} = (double)$data->[$i];
      $data_ret->[$i]{im} = 0;
    }
    
    return $ndarray_ret;
  }
  
  method to_string : R::NDArray::String ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = R::Operation::String->new->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = (string)$data->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method abs : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->fabsf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method neg : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = -$data->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method sin : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->sinf($data->[$i]);
    }
    
    return $ndarray_ret;
  }

  method cos : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->cosf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method tan : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->tanf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method sinh : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->sinhf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method cosh : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->coshf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method tanh : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->tanhf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method acos : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->acosf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method asin : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->asinf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method atan : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->atanf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method asinh : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->asinhf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method acosh : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->acoshf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method atanh : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->atanhf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method exp : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->expf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method expm1 : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->expm1f($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method log : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->logf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method logb : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->logbf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method log2 : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->log2f($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method log10 : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->log10f($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method sqrt : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->sqrtf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method isinf : R::NDArray::Int ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->isinff($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method isnan : R::NDArray::Int ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->isnanf($data->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method pow : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    my $data_ret = $ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->powf($data1->[$i], $data2->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method atan2 : R::NDArray::Float ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    my $data_ret = $ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = Math->atan2f($data1->[$i], $data2->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method eq : R::NDArray::Int ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    my $data_ret = $ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = $data1->[$i] == $data2->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method ne : R::NDArray::Int ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    my $data_ret = $ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = !($data1->[$i] == $data2->[$i]);
    }
    
    return $ndarray_ret;
  }
  
  method gt : R::NDArray::Int ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    my $data_ret = $ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = $data1->[$i] > $data2->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method ge : R::NDArray::Int ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    my $data_ret = $ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = $data1->[$i] >= $data2->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method lt : R::NDArray::Int ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    my $data_ret = $ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = $data1->[$i] < $data2->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method le : R::NDArray::Int ($x_ndarray : R::NDArray::Float, $y_ndarray : R::NDArray::Float) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    my $data_ret = $ndarray_ret->data;
    
    my $data1 = $x_ndarray->data;
    my $data2 = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = $data1->[$i] <= $data2->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method sum : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, [1]);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    my $sum = 0f;
    for (my $i = 0; $i < $length; $i++) {
      $sum += $data->[$i];
    }
    $data_ret->[0] = $sum;
    
    return $ndarray_ret;
  }
  
  method cumsum : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    my $sum = 0f;
    for (my $i = 0; $i < $length; $i++) {
      $sum += $data->[$i];
      $data_ret->[$i] = $sum;
    }
    
    return $ndarray_ret;
  }
  
  method prod : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, [1]);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    my $prod = 1f;
    for (my $i = 0; $i < $length; $i++) {
      $prod *= $data->[$i];
    }
    $data_ret->[0] = $prod;
    
    return $ndarray_ret;
  }
  
  method cumprod : R::NDArray::Float ($ndarray : R::NDArray::Float) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    my $prod = 1f;
    for (my $i = 0; $i < $length; $i++) {
      $prod *= $data->[$i];
      $data_ret->[$i] = $prod;
    }
    
    return $ndarray_ret;
  }
  
  method modf : R::NDArray::Float ($ndarray : R::NDArray::Float, $intpart_ndarray_ref : R::NDArray::Float[]) {
    
    unless ($ndarray) {
      die "The n-dimension array \$ndarray must be defined.";
    }
    
    unless ($intpart_ndarray_ref) {
      die "The integer part n-dimension array \$intpart_ndarray_ref must be defined.";
    }
    
    unless (@$intpart_ndarray_ref == 1) {
      die "The length of integer part n-dimension array \$intpart_ndarray_ref must be 1.";
    }
    
    my $length = $ndarray->length;
    
    my $dim = $ndarray->dim;
    
    my $ndarray_ret = $self->array(undef, $dim);
    
    my $intpart_ndarray = $self->array(undef, $dim);
    my $data_intpart = $intpart_ndarray->data;
    
    my $data = $ndarray->data;
    my $data_ret = $ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      my $intpart = 0.0f;
      $data_ret->[$i] = Math->modff($data->[$i], \$intpart);
      $data_intpart->[$i] = $intpart;
    }
    
    return $ndarray_ret;
  }
  
}
