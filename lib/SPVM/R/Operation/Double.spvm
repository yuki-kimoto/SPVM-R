# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::Operation::Double extends R::Operation {
  
  use R::NDArray::Double;
  use Fn;
  
  # Class Methods
  static method new : R::Operation::Double () {
    
    my $self = new R::Operation::Double;
    
    return $self;
  }
  
  # Instance Methods
  method c : R::NDArray::Double ($x_data : double[]) {
    
    unless ($x_data) {
      die "The data \$x_data must be defined.";
    }
    
    my $length = @$x_data;
    
    my $dim = (int[])undef;
    if ($length > 0) {
      $dim = [$length];
    }
    
    my $x_ndarray = R::NDArray::Double->new({dim => $dim, data => $x_data});
    
    return $x_ndarray;
  }
  
  method array : R::NDArray::Double ($x_data : double[], $dim : int[]) {
    
    my $x_ndarray = R::NDArray::Double->new({dim => $dim, data => $x_data});
    
    return $x_ndarray;
  }
  
  method add : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = $x_data->[$i] + $y_data->[$i];
    }
    
    return $x_ndarray_ret;
  }
  
  method sub : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = $x_data->[$i] - $y_data->[$i];
    }
    
    return $x_ndarray_ret;
  }
  
  method mul : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = $x_data->[$i] * $y_data->[$i];
    }
    
    return $x_ndarray_ret;
  }
  
  method div : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = $x_data->[$i] / $y_data->[$i];
    }
    
    return $x_ndarray_ret;
  }
  
  method remainder : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->remainder($x_data->[$i], $y_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method fmod : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->fmod($x_data->[$i], $y_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method to_int : R::NDArray::Int ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = (int)$x_data->[$i];
    }
    
    return $x_ndarray_ret;
  }
  
  method to_long : R::NDArray::Long ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Long->new->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = (long)$x_data->[$i];
    }
    
    return $x_ndarray_ret;
  }
  
  method to_float : R::NDArray::Float ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Float->new->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = (float)$x_data->[$i];
    }
    
    return $x_ndarray_ret;
  }
  
  method clone : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = (double)$x_data->[$i];
    }
    
    return $x_ndarray_ret;
  }
  
  method to_float_complex : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::FloatComplex->new->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i]{re} = (float)$x_data->[$i];
      $x_data_ret->[$i]{im} = 0f;
    }
    
    return $x_ndarray_ret;
  }
  
  method to_double_complex : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::DoubleComplex->new->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i]{re} = (double)$x_data->[$i];
      $x_data_ret->[$i]{im} = 0;
    }
    
    return $x_ndarray_ret;
  }
  
  method to_string : R::NDArray::String ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::String->new->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = (string)$x_data->[$i];
    }
    
    return $x_ndarray_ret;
  }
  
  method abs : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->fabs($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method neg : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = -$x_data->[$i];
    }
    
    return $x_ndarray_ret;
  }
  
  method sin : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->sin($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }

  method cos : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->cos($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method tan : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->tan($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method sinh : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->sinh($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method cosh : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->cosh($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method tanh : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->tanh($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method acos : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->acos($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method asin : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->asin($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method atan : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->atan($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method asinh : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->asinh($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method acosh : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->acosh($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method atanh : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->atanh($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method exp : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->exp($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method expm1 : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->expm1($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method log : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->log($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method logb : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->logb($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method log2 : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->log2($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method log10 : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->log10($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method sqrt : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->sqrt($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method isinf : R::NDArray::Int ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->isinf($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method isnan : R::NDArray::Int ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->isnan($x_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method pow : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->pow($x_data->[$i], $y_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method atan2 : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = Math->atan2($x_data->[$i], $y_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method eq : R::NDArray::Int ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = $x_data->[$i] == $y_data->[$i];
    }
    
    return $x_ndarray_ret;
  }
  
  method ne : R::NDArray::Int ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = !($x_data->[$i] == $y_data->[$i]);
    }
    
    return $x_ndarray_ret;
  }
  
  method gt : R::NDArray::Int ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = $x_data->[$i] > $y_data->[$i];
    }
    
    return $x_ndarray_ret;
  }
  
  method ge : R::NDArray::Int ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = $x_data->[$i] >= $y_data->[$i];
    }
    
    return $x_ndarray_ret;
  }
  
  method lt : R::NDArray::Int ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = $x_data->[$i] < $y_data->[$i];
    }
    
    return $x_ndarray_ret;
  }
  
  method le : R::NDArray::Int ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = R::Operation::Int->new->array(undef, $dim);
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $x_data_ret->[$i] = $x_data->[$i] <= $y_data->[$i];
    }
    
    return $x_ndarray_ret;
  }
  
  method sum : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, [1]);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $sum = 0.0;
    for (my $i = 0; $i < $length; $i++) {
      $sum += $x_data->[$i];
    }
    $x_data_ret->[0] = $sum;
    
    return $x_ndarray_ret;
  }
  
  method cumsum : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $sum = 0;
    for (my $i = 0; $i < $length; $i++) {
      $sum += $x_data->[$i];
      $x_data_ret->[$i] = $sum;
    }
    
    return $x_ndarray_ret;
  }
  
  method prod : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, [1]);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $prod = 1.0;
    for (my $i = 0; $i < $length; $i++) {
      $prod *= $x_data->[$i];
    }
    $x_data_ret->[0] = $prod;
    
    return $x_ndarray_ret;
  }
  
  method cumprod : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    my $prod = 1.0;
    for (my $i = 0; $i < $length; $i++) {
      $prod *= $x_data->[$i];
      $x_data_ret->[$i] = $prod;
    }
    
    return $x_ndarray_ret;
  }
  
  method modf : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $intpart_ndarray_ref : R::NDArray::Double[]) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($intpart_ndarray_ref) {
      die "The integer part n-dimension array \$intpart_ndarray_ref must be defined.";
    }
    
    unless (@$intpart_ndarray_ref == 1) {
      die "The length of integer part n-dimension array \$intpart_ndarray_ref must be 1.";
    }
    
    my $length = $x_ndarray->length;
    
    my $dim = $x_ndarray->dim;
    
    my $x_ndarray_ret = $self->array(undef, $dim);
    
    my $intpart_ndarray = $self->array(undef, $dim);
    my $x_data_intpart = $intpart_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $x_data_ret = $x_ndarray_ret->data;
    
    for (my $i = 0; $i < $length; $i++) {
      my $intpart = 0.0;
      $x_data_ret->[$i] = Math->modf($x_data->[$i], \$intpart);
      $x_data_intpart->[$i] = $intpart;
    }
    
    return $x_ndarray_ret;
  }
  
}

