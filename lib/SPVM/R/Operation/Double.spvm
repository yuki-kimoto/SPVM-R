# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::Operation::Double extends R::Operation {
  
  use R::NDArray::Double;
  use Fn;
  
  # Class Methods
  static method new : R::Operation::Double () {
    
    my $self = new R::Operation::Double;
    
    return $self;
  }
  
  # Instance Methods
  method c : R::NDArray::Double ($data : double[]) {
    
    unless ($data) {
      die "The data \$data must be defined.";
    }
    
    my $length = @$data;
    
    my $dim = (int[])undef;
    if ($length > 0) {
      $dim = [$length];
    }
    
    my $ndarray = R::NDArray::Double->new({dim => $dim, data => $data});
    
    return $ndarray;
  }
  
  method array : R::NDArray::Double ($data : double[], $dim : int[]) {
    
    unless ($data) {
      die "The data \$data must be defined.";
    }
    
    my $ndarray = R::NDArray::Double->new({dim => $dim, data => $data});
    
    return $ndarray;
  }
  
  method add : R::NDArray::Double ($ndarray1 : R::NDArray::Double, $ndarray2 : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($ndarray1, $ndarray2);
    
    unless ($equals_dim) {
      die "The dim field of \$ndarray1 must be the same as the dim field of \$ndarray2.";
    }
    
    my $length = $ndarray1->length;
    
    my $dim = $ndarray1->dim;
    
    my $data_ret = new double[$length];
    my $ndarray_ret = $self->array($data_ret, $dim);
    
    my $data1 = $ndarray1->data;
    my $data2 = $ndarray2->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = $data1->[$i] + $data2->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method subtract : R::NDArray::Double ($ndarray1 : R::NDArray::Double, $ndarray2 : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($ndarray1, $ndarray2);
    
    unless ($equals_dim) {
      die "The dim field of \$ndarray1 must be the same as the dim field of \$ndarray2.";
    }
    
    my $length = $ndarray1->length;
    
    my $dim = $ndarray1->dim;
    
    my $data_ret = new double[$length];
    my $ndarray_ret = $self->array($data_ret, $dim);
    
    my $data1 = $ndarray1->data;
    my $data2 = $ndarray2->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = $data1->[$i] - $data2->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method multiply : R::NDArray::Double ($ndarray1 : R::NDArray::Double, $ndarray2 : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($ndarray1, $ndarray2);
    
    unless ($equals_dim) {
      die "The dim field of \$ndarray1 must be the same as the dim field of \$ndarray2.";
    }
    
    my $length = $ndarray1->length;
    
    my $dim = $ndarray1->dim;
    
    my $data_ret = new double[$length];
    my $ndarray_ret = $self->array($data_ret, $dim);
    
    my $data1 = $ndarray1->data;
    my $data2 = $ndarray2->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = $data1->[$i] * $data2->[$i];
    }
    
    return $ndarray_ret;
  }
  
  method divide : R::NDArray::Double ($ndarray1 : R::NDArray::Double, $ndarray2 : R::NDArray::Double) {
    
    my $equals_dim = $self->equals_dim($ndarray1, $ndarray2);
    
    unless ($equals_dim) {
      die "The dim field of \$ndarray1 must be the same as the dim field of \$ndarray2.";
    }
    
    my $length = $ndarray1->length;
    
    my $dim = $ndarray1->dim;
    
    my $data_ret = new double[$length];
    my $ndarray_ret = $self->array($data_ret, $dim);
    
    my $data1 = $ndarray1->data;
    my $data2 = $ndarray2->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $data_ret->[$i] = $data1->[$i] / $data2->[$i];
    }
    
    return $ndarray_ret;
  }
  
}
