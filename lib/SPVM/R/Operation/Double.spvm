# Copyright (c) 2024 Yuki Kimoto
# MIT License

class R::Operation::Double extends R::Operation {
  
  use R::NDArray::Int;
  use R::NDArray::Long;
  use R::NDArray::Float;
  use R::NDArray::Double;
  use R::NDArray::FloatComplex;
  use R::NDArray::DoubleComplex;
  use R::NDArray::String;
  use R::Operation::Int;
  use R::Operation::Long;
  use R::Operation::Float;
  use R::Operation::Double;
  use R::Operation::FloatComplex;
  use R::Operation::DoubleComplex;
  use R::Operation::String;
  use Fn;
  use Complex_2f;
  use Complex_2d;
  use Math;
  
  # Class Methods
  static method new : R::Operation::Double () {
    
    my $self = new R::Operation::Double;
    
    return $self;
  }
  
  # Instance Methods
  method c : R::NDArray::Double ($x_data : double[], $x_dim : int[] = undef) {
    
    my $x_ndarray = R::NDArray::Double->new({dim => $x_dim, data => $x_data});
    
    return $x_ndarray;
  }
  
  method add : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimension array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] + $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method sub : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimension array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] - $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method mul : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimension array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] * $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method div : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimension array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] / $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method remainder : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimension array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->remainder($x_data->[$i], $y_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method fmod : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimension array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->fmod($x_data->[$i], $y_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_int : R::NDArray::Int ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::Operation::Int->new->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (int)$x_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_long : R::NDArray::Long ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::Operation::Long->new->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (long)$x_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_float : R::NDArray::Float ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::Operation::Float->new->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (float)$x_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method clone : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (double)$x_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_float_complex : R::NDArray::FloatComplex ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::Operation::FloatComplex->new->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i]{re} = (float)$x_data->[$i];
      $ret_data->[$i]{im} = 0f;
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_double_complex : R::NDArray::DoubleComplex ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::Operation::DoubleComplex->new->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i]{re} = (double)$x_data->[$i];
      $ret_data->[$i]{im} = 0;
    }
    
    return $ret_ndarray;
  }
  
  precompile method to_string : R::NDArray::String ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::Operation::String->new->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = (string)$x_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method abs : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->fabs($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method neg : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = -$x_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method sin : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->sin($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }

  precompile method cos : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->cos($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method tan : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->tan($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method sinh : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->sinh($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method cosh : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->cosh($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method tanh : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->tanh($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method acos : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->acos($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method asin : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->asin($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method atan : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->atan($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method asinh : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->asinh($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method acosh : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->acosh($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method atanh : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->atanh($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method exp : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->exp($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method expm1 : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->expm1($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method log : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->log($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method logb : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->logb($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method log2 : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->log2($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method log10 : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->log10($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method sqrt : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->sqrt($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method isinf : R::NDArray::Int ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::Operation::Int->new->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->isinf($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method isnan : R::NDArray::Int ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::Operation::Int->new->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->isnan($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method pow : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimension array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->pow($x_data->[$i], $y_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method atan2 : R::NDArray::Double ($y_ndarray : R::NDArray::Double, $x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimension array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->atan2($y_data->[$i], $x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method eq : R::NDArray::Int ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimension array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::Operation::Int->new->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] == $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method ne : R::NDArray::Int ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimension array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::Operation::Int->new->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = !($x_data->[$i] == $y_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method gt : R::NDArray::Int ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimension array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::Operation::Int->new->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] > $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method ge : R::NDArray::Int ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimension array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::Operation::Int->new->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] >= $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method lt : R::NDArray::Int ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimension array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::Operation::Int->new->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] < $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method le : R::NDArray::Int ($x_ndarray : R::NDArray::Double, $y_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($y_ndarray) {
      die "The n-dimension array \$y_ndarray must be defined.";
    }
    
    my $equals_dim = $self->equals_dim($x_ndarray, $y_ndarray);
    
    unless ($equals_dim) {
      die "The dim field of \$x_ndarray must be the same as the dim field of \$y_ndarray.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::Operation::Int->new->c(undef, $x_dim);
    my $ret_data = $ret_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $y_data = $y_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = $x_data->[$i] <= $y_data->[$i];
    }
    
    return $ret_ndarray;
  }
  
  precompile method sum : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, [1]);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    my $sum = 0.0;
    for (my $i = 0; $i < $length; $i++) {
      $sum += $x_data->[$i];
    }
    $ret_data->[0] = $sum;
    
    return $ret_ndarray;
  }
  
  precompile method cumsum : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    my $sum = 0;
    for (my $i = 0; $i < $length; $i++) {
      $sum += $x_data->[$i];
      $ret_data->[$i] = $sum;
    }
    
    return $ret_ndarray;
  }
  
  precompile method prod : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, [1]);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    my $prod = 1.0;
    for (my $i = 0; $i < $length; $i++) {
      $prod *= $x_data->[$i];
    }
    $ret_data->[0] = $prod;
    
    return $ret_ndarray;
  }
  
  precompile method cumprod : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    my $prod = 1.0;
    for (my $i = 0; $i < $length; $i++) {
      $prod *= $x_data->[$i];
      $ret_data->[$i] = $prod;
    }
    
    return $ret_ndarray;
  }
  
  precompile method modf : R::NDArray::Double ($x_ndarray : R::NDArray::Double, $intpart_ndarray_ref : R::NDArray::Double[]) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($intpart_ndarray_ref) {
      die "The integer part n-dimension array \$intpart_ndarray_ref must be defined.";
    }
    
    unless (@$intpart_ndarray_ref == 1) {
      die "The length of integer part n-dimension array \$intpart_ndarray_ref must be 1.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $intpart_ndarray = $self->c(undef, $x_dim);
    my $x_data_intpart = $intpart_ndarray->data;
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      my $intpart = 0.0;
      $ret_data->[$i] = Math->modf($x_data->[$i], \$intpart);
      $x_data_intpart->[$i] = $intpart;
    }
    
    return $ret_ndarray;
  }
  
  precompile method ceil : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->ceil($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method floor : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->floor($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method round : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->round($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method lround : R::NDArray::Long ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = R::Operation::Long->new->c(undef, $x_dim);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    for (my $i = 0; $i < $length; $i++) {
      $ret_data->[$i] = Math->lround($x_data->[$i]);
    }
    
    return $ret_ndarray;
  }
  
  precompile method max : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->length > 0) {
      die "The length of n-dimension array \$x_ndarray must be greater than 0.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, [1]);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    my $max = $x_data->[0];
    for (my $i = 0; $i < $length; $i++) {
      my $current = $x_data->[$i];
      
      if ($current > $max) {
        $max = $current;
      }
    }
    $ret_data->[0] = $max;
    
    return $ret_ndarray;
  }
  
  precompile method min : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->length > 0) {
      die "The length of n-dimension array \$x_ndarray must be greater than 0.";
    }
    
    my $length = $x_ndarray->length;
    
    my $x_dim = $x_ndarray->dim;
    
    my $ret_ndarray = $self->c(undef, [1]);
    
    my $x_data = $x_ndarray->data;
    my $ret_data = $ret_ndarray->data;
    
    my $min = $x_data->[0];
    for (my $i = 0; $i < $length; $i++) {
      my $current = $x_data->[$i];
      
      if ($current < $min) {
        $min = $current;
      }
    }
    $ret_data->[0] = $min;
    
    return $ret_ndarray;
  }

  method mean : R::NDArray::Double ($x_ndarray : R::NDArray::Double) {
    
    unless ($x_ndarray) {
      die "The n-dimension array \$x_ndarray must be defined.";
    }
    
    unless ($x_ndarray->length > 0) {
      die "The length of n-dimension array \$x_ndarray must be greater than 0.";
    }
    
    my $sum_ndarray = $self->sum($x_ndarray);
    my $sum = $sum_ndarray->data->[0];
    
    my $length = $x_ndarray->length;
    
    my $mean = $sum / $length;
    
    my $ret_ndarray = $self->c([$mean]);
    
    return $ret_ndarray;
  }
  
}

=pod TODO

sub rep {
  my $r = shift;
  
  my ($x1, $x_times) = args_array($r, ['x1', 'times'], @_);
  
  my $times = defined $x_times ? $x_times->value : 1;
  
  my $elements = [];
  push @$elements, @{Rstats::Func::decompose($r, $x1)} for 1 .. $times;
  my $x2 = Rstats::Func::c_($r, @$elements);
  
  return $x2;
}

sub seq {
  my $r = shift;
  
  # Option
  my $opt = ref $_[-1] eq 'HASH' ? pop @_ : {};
  
  # Along
  my $_along = $opt->{along};
  if (defined $_along) {
    my $along = to_object($r, $_along);
    my $length = Rstats::Func::get_length($r, $along);
    return seq($r, 1, $length);
  }
  else {
    my ($from, $to) = @_;
    
    # From
    $from = $opt->{from} unless defined $from;
    Carp::croak "seq function need from option" unless defined $from;
    
    # To
    $to = $opt->{to} unless defined $to;
    Carp::croak "seq function need to option" unless defined $to;

    # Length
    my $length = $opt->{length};
    
    # By
    my $by = $opt->{by};
    
    if (defined $length && defined $by) {
      Carp::croak "Can't use by option and length option as same time";
    }
    
    unless (defined $by) {
      if ($to >= $from) {
        $by = 1;
      }
      else {
        $by = -1;
      }
    }
    Carp::croak "by option should be except for 0" if $by == 0;
    
    $to = $from unless defined $to;
    
    if (defined $length && $from ne $to) {
      $by = ($to - $from) / ($length - 1);
    }
    
    my $elements = [];
    if ($to == $from) {
      $elements->[0] = $to;
    }
    elsif ($to > $from) {
      if ($by < 0) {
        Carp::croak "by option is invalid number(seq function)";
      }
      
      my $element = $from;
      while ($element <= $to) {
        push @$elements, $element;
        $element += $by;
      }
    }
    else {
      if ($by > 0) {
        Carp::croak "by option is invalid number(seq function)";
      }
      
      my $element = $from;
      while ($element >= $to) {
        push @$elements, $element;
        $element += $by;
      }
    }
    
    return Rstats::Func::c_($r, @$elements);
  }
}

sub set_array {
  my $r = shift;
  
  my $x1 = shift;
  my $x2 = Rstats::Func::to_object($r, shift);
  
  my $at = $x1->at;
  my $_indexs = ref $at eq 'ARRAY' ? $at : [$at];
  my ($poss, $x2_dim) = @{Rstats::Util::parse_index($r, $x1, 0, $_indexs)};
  
  my $type;
  my $x1_elements;
  if (Rstats::Func::is_factor($r, $x1)) {
    $x1_elements = Rstats::Func::decompose($r, $x1);
    $x2 = Rstats::Func::as_character($r, $x2) unless Rstats::Func::is_character($r, $x2);
    my $x2_elements = Rstats::Func::decompose($r, $x2);
    my $levels_h = Rstats::Func::_levels_h($r, $x1);
    for (my $i = 0; $i < @$poss; $i++) {
      my $pos = $poss->[$i];
      my $element = $x2_elements->[(($i + 1) % @$poss) - 1];
      if (Rstats::Func::is_na($r, $element)) {
        $x1_elements->[$pos] = Rstats::Func::c_logical($r, undef);
      }
      else {
        my $value = Rstats::Func::value($r, $element);
        if ($levels_h->{$value}) {
          $x1_elements->[$pos] = $levels_h->{$value};
        }
        else {
          Carp::carp "invalid factor level, NA generated";
          $x1_elements->[$pos] = Rstats::Func::c_logical($r, undef);
        }
      }
    }
    $type = $x1->get_type;
  }
  else {
    # Upgrade mode if type is different
    if ($x1->get_type ne $x2->get_type) {
      my $x1_tmp;
      ($x1_tmp, $x2) = @{Rstats::Func::upgrade_type($r, [$x1, $x2])};
      Rstats::Func::copy_attrs_to($r, $x1_tmp, $x1);
      $x1->vector($x1_tmp->vector);
      
      $type = $x1_tmp->get_type;
    }
    else {
      $type = $x1->get_type;
    }

    $x1_elements = Rstats::Func::decompose($r, $x1);

    my $x2_elements = Rstats::Func::decompose($r, $x2);
    for (my $i = 0; $i < @$poss; $i++) {
      my $pos = $poss->[$i];
      $x1_elements->[$pos] = $x2_elements->[(($i + 1) % @$poss) - 1];
    }
  }
  
  $DB::single = 1;
  my $x1_tmp = Rstats::Func::compose($r, $type, $x1_elements);
  $x1->vector($x1_tmp->vector);
  $x1->{type} = $x1_tmp->{type};
  $x1->{object_type} = $x1_tmp->{object_type};
  
  return $x1;
}

=cut
