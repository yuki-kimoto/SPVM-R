class TestCase::R {
  use R;
  use R::NDArray;
  use R::NDArray::Int;
  use R::NDArray::Long;
  use R::NDArray::Float;
  use R::NDArray::Double;
  use R::NDArray::FloatComplex;
  use R::NDArray::DoubleComplex;
  
  use R::NDArray::Byte;
  use R::NDArray::Short;
  use R::NDArray::String;
  use R::NDArray::StringBuffer;
  use R::NDArray::Time::Piece;
  
  use R::OP;
  use R::OP::Int as IOP;
  use R::OP::Long as LOP;
  use R::OP::Float as FOP;
  use R::OP::Double as DOP;
  use R::OP::FloatComplex as FCOP;
  use R::OP::DoubleComplex as DCOP;
  
  use R::OP::Byte as BOP;
  use R::OP::Short as SOP;
  use R::OP::String as STROP;
  use R::OP::StringBuffer as STRBOP;
  use R::OP::Time::Piece as TPOP;
  
  use R::DataFrame;
  use R::OP::Matrix;
  use R::OP::DataFrame;
  use R::OP::Matrix::Double as MDOP;
  use R::OP::Object;
  
  static method test : int () {
    
    # R::OP::Matrix::Double
    {
      # R::OP::Matrix::Double#matrix
      {
        my $seq_ndarray = DOP->seq(1, 6);
        
        my $nrow = 3;
        my $ncol = 2;
        my $ret_ndarray = MDOP->matrix($seq_ndarray, $nrow, $ncol);
        
        unless ($ret_ndarray is_type R::NDArray::Double) {
          return 0;
        }
        
        unless ($ret_ndarray->data == $seq_ndarray->data) {
          return 0;
        }
        
        unless (Array->equals_int($ret_ndarray->dim, [$nrow, $ncol])) {
          return 0;
        }
        
      }
      
      # R::OP::Matrix::Double#matrix_byrow
      {
        my $seq_ndarray = DOP->seq(1, 6);
        
        my $nrow = 3;
        my $ncol = 2;
        my $ret_ndarray = MDOP->matrix_byrow($seq_ndarray, $nrow, $ncol);
        
        unless ($ret_ndarray is_type R::NDArray::Double) {
          return 0;
        }
        
        unless (Array->equals_double($ret_ndarray->data, [(double)1, 3, 5, 2, 4, 6])) {
          return 0;
        }
        
        unless (Array->equals_int($ret_ndarray->dim, [$nrow, $ncol])) {
          return 0;
        }
        
      }
    }
    
    # R
    {
      # R#byte method
      {
        {
          my $data = [(byte)1, 2, 3, 4, 5, 6];
          my $dim = [2, 3];
          my $ret_ndarray = BOP->c($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::Byte) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(byte)1, 2, 3, 4, 5, 6];
          my $data_length = @$data;
          my $ret_ndarray = BOP->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::Byte) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
        
        {
          my $data = (byte)1;
          my $ret_ndarray = BOP->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::Byte) {
            return 0;
          }
          
          unless (Array->equals_byte($ret_ndarray->data, [(byte)1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(byte)1, 2, 3, 4, 5, 6];
          my $ret_ndarray = BOP->c(R::OP::Byte->c($data));
          
          unless ($ret_ndarray is_type R::NDArray::Byte) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
      }
      
      # R#short method
      {
        {
          my $data = [(short)1, 2, 3, 4, 5, 6];
          my $dim = [2, 3];
          my $ret_ndarray = SOP->c($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::Short) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(short)1, 2, 3, 4, 5, 6];
          my $data_length = @$data;
          my $ret_ndarray = SOP->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::Short) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
        
        {
          my $data = (short)1;
          my $ret_ndarray = SOP->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::Short) {
            return 0;
          }
          
          unless (Array->equals_short($ret_ndarray->data, [(short)1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(short)1, 2, 3, 4, 5, 6];
          my $ret_ndarray = SOP->c(R::OP::Short->c($data));
          
          unless ($ret_ndarray is_type R::NDArray::Short) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
      }

      # R#int method
      {
        {
          my $data = [(int)1, 2, 3, 4, 5, 6];
          my $dim = [2, 3];
          my $ret_ndarray = IOP->c($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(int)1, 2, 3, 4, 5, 6];
          my $data_length = @$data;
          my $ret_ndarray = IOP->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
        
        {
          my $data = (int)1;
          my $ret_ndarray = IOP->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [(int)1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(int)1, 2, 3, 4, 5, 6];
          my $ret_ndarray = IOP->c(R::OP::Int->c($data));
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
      }
      
      # R#long method
      {
        {
          my $data = [(long)1, 2, 3, 4, 5, 6];
          my $dim = [2, 3];
          my $ret_ndarray = LOP->c($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::Long) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(long)1, 2, 3, 4, 5, 6];
          my $data_length = @$data;
          my $ret_ndarray = LOP->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::Long) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
        
        {
          my $data = (long)1;
          my $ret_ndarray = LOP->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::Long) {
            return 0;
          }
          
          unless (Array->equals_long($ret_ndarray->data, [(long)1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(long)1, 2, 3, 4, 5, 6];
          my $ret_ndarray = LOP->c(R::OP::Long->c($data));
          
          unless ($ret_ndarray is_type R::NDArray::Long) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
      }
      
      # R#float method
      {
        {
          my $data = [(float)1, 2, 3, 4, 5, 6];
          my $dim = [2, 3];
          my $ret_ndarray = FOP->c($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::Float) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(float)1, 2, 3, 4, 5, 6];
          my $data_length = @$data;
          my $ret_ndarray = FOP->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::Float) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
        
        {
          my $data = (float)1;
          my $ret_ndarray = FOP->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::Float) {
            return 0;
          }
          
          unless (Array->equals_float($ret_ndarray->data, [(float)1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(float)1, 2, 3, 4, 5, 6];
          my $ret_ndarray = FOP->c(R::OP::Float->c($data));
          
          unless ($ret_ndarray is_type R::NDArray::Float) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
      }
      
      # R#double method
      {
        {
          my $data = [(double)1, 2, 3, 4, 5, 6];
          my $dim = [2, 3];
          my $ret_ndarray = DOP->c($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::Double) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(double)1, 2, 3, 4, 5, 6];
          my $data_length = @$data;
          my $ret_ndarray = DOP->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::Double) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
        
        {
          my $data = (double)1;
          my $ret_ndarray = DOP->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::Double) {
            return 0;
          }
          
          unless (Array->equals_double($ret_ndarray->data, [(double)1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(double)1, 2, 3, 4, 5, 6];
          my $ret_ndarray = DOP->c(R::OP::Double->c($data));
          
          unless ($ret_ndarray is_type R::NDArray::Double) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
      }
      
      # R#float_complex method
      {
        {
          my $data = [(Complex_2f)Math->complexf(1, 1), Math->complexf(2, 1), Math->complexf(3, 1), Math->complexf(4, 1), Math->complexf(5, 1), Math->complexf(6, 1)];
          my $dim = [2, 3];
          my $ret_ndarray = FCOP->c($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::FloatComplex) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(Complex_2f)Math->complexf(1, 1), Math->complexf(2, 1), Math->complexf(3, 1), Math->complexf(4, 1), Math->complexf(5, 1), Math->complexf(6, 1)];
          my $data_length = @$data;
          my $ret_ndarray = FCOP->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::FloatComplex) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
      }
      
      # R#double_complex method
      {
        {
          my $data = [(Complex_2d)Math->complex(1, 1), Math->complex(2, 1), Math->complex(3, 1), Math->complex(4, 1), Math->complex(5, 1), Math->complex(6, 1)];
          my $dim = [2, 3];
          my $ret_ndarray = DCOP->c($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::DoubleComplex) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(Complex_2d)Math->complex(1, 1), Math->complex(2, 1), Math->complex(3, 1), Math->complex(4, 1), Math->complex(5, 1), Math->complex(6, 1)];
          my $data_length = @$data;
          my $ret_ndarray = DCOP->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::DoubleComplex) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
      }
      
      # R#float_complex method
      {
        {
          my $data = [(float)1,1,  2,1,  3,1,  4,1,  5,1,  6,1];
          my $dim = [2, 3];
          my $ret_ndarray = FCOP->c($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::FloatComplex) {
            return 0;
          }
          
          my $ret_data = new float[2 * 6];
          Fn->memcpy($ret_data, 0, $ret_ndarray->data, 0, 4 * 2 * 6);
          
          unless (Array->equals_float($ret_data, $data)) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(float)1,1,  2,1,  3,1,  4,1,  5,1,  6,1];
          my $data_length = @$data / 2;
          my $ret_ndarray = FCOP->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::FloatComplex) {
            return 0;
          }
          
          my $ret_data = new float[2 * 6];
          Fn->memcpy($ret_data, 0, $ret_ndarray->data, 0, 4 * 2 * 6);
          
          unless (Array->equals_float($ret_data, $data)) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
      }
      
      # R#double_complex method
      {
        {
          my $data = [(double)1,1,  2,1,  3,1,  4,1,  5,1,  6,1];
          my $dim = [2, 3];
          my $ret_ndarray = DCOP->c($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::DoubleComplex) {
            return 0;
          }
          
          my $ret_data = new double[2 * 6];
          Fn->memcpy($ret_data, 0, $ret_ndarray->data, 0, 8 * 2 * 6);
          
          unless (Array->equals_double($ret_data, $data)) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(double)1,1,  2,1,  3,1,  4,1,  5,1,  6,1];
          my $data_length = @$data / 2;
          my $ret_ndarray = DCOP->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::DoubleComplex) {
            return 0;
          }
          
          my $ret_data = new double[2 * 6];
          Fn->memcpy($ret_data, 0, $ret_ndarray->data, 0, 8 * 2 * 6);
          
          unless (Array->equals_double($ret_data, $data)) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
      }
      
      # R#i method
      {
        {
          my $ret_ndarray = DCOP->i;
          
          unless ($ret_ndarray is_type R::NDArray::DoubleComplex) {
            return 0;
          }
          
          unless ($ret_ndarray->data->[0]{re} == 0) {
            return 0;
          }
          
          unless ($ret_ndarray->data->[0]{im} == 1) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1])) {
            return 0;
          }
          
        }
      }
      
      # R#object method
      {
        {
          my $data = [(object)"1", "2", "3", "4", "5", "6"];
          my $dim = [2, 3];
          my $ret_ndarray = R::OP::Object->c($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::Object) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(object)"1", "2", "3", "4", "5", "6"];
          my $data_length = @$data;
          my $ret_ndarray = R::OP::Object->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::Object) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
      }
      
      # R#string method
      {
        {
          my $data = [(string)"1", "2", "3", "4", "5", "6"];
          my $dim = [2, 3];
          my $ret_ndarray = R::OP::String->c($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::String) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(string)"1", "2", "3", "4", "5", "6"];
          my $data_length = @$data;
          my $ret_ndarray = R::OP::String->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::String) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
      }

      # R#string_buffer method
      {
        {
          my $data = [(StringBuffer)StringBuffer->new("1"), StringBuffer->new("2"), StringBuffer->new("3"), StringBuffer->new("4"), StringBuffer->new("5"), StringBuffer->new("6")];
          my $dim = [2, 3];
          my $ret_ndarray = R::OP::StringBuffer->c($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::StringBuffer) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(StringBuffer)StringBuffer->new("1"), StringBuffer->new("2"), StringBuffer->new("3"), StringBuffer->new("4"), StringBuffer->new("5"), StringBuffer->new("6")];
          my $data_length = @$data;
          my $ret_ndarray = R::OP::StringBuffer->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::StringBuffer) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
      }

      # R#time_piece method
      {
        {
          my $data = [(Time::Piece)Time::Piece->localtime, Time::Piece->localtime, Time::Piece->localtime, Time::Piece->localtime, Time::Piece->localtime, Time::Piece->localtime];
          my $dim = [2, 3];
          my $ret_ndarray = R::OP::Time::Piece->c($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::Time::Piece) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(Time::Piece)Time::Piece->localtime, Time::Piece->localtime, Time::Piece->localtime, Time::Piece->localtime, Time::Piece->localtime, Time::Piece->localtime];
          my $data_length = @$data;
          my $ret_ndarray = R::OP::Time::Piece->c($data);
          
          unless ($ret_ndarray is_type R::NDArray::Time::Piece) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
      }
      
      # R#seq method
      {
        {
          my $begin = 1;
          my $end = 5;
          my $ret_ndarray = IOP->seq($begin, $end);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 2, 3, 4, 5])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [5])) {
            return 0;
          }
        }
        
        {
          my $begin = 1;
          my $end = 5;
          my $by = 2;
          my $ret_ndarray = IOP->seq($begin, $end, $by);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 3, 5])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [3])) {
            return 0;
          }
        }
        
        {
          my $begin = 5;
          my $end = 1;
          my $by = -1;
          my $ret_ndarray = IOP->seq($begin, $end, $by);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [5, 4, 3, 2, 1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [5])) {
            return 0;
          }
        }
      }
      
      # R#undef method
      {
        my $undef = IOP->undef;
        
        unless ($undef is_compile_type R::NDArray::Int) {
          return 0;
        }
        
        if ($undef) {
          return 0;
        }
      }
    }
    
    # R::NDArray
    {
      # R::NDArray#is_empty method
      {
        {
          my $dim = new int[0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_empty) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_empty) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_empty) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_empty) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 3];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_empty) {
            return 0;
          }
        }
      }
      
      # R::NDArray#is_scalar method
      {
        {
          my $dim = new int[0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_scalar) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_scalar) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_scalar) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_scalar) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_scalar) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 3];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_scalar) {
            return 0;
          }
        }
      }
      
      # R::NDArray#is_vector method
      {
        {
          my $dim = new int[0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_vector) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_vector) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_vector) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_vector) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_vector) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 3];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_vector) {
            return 0;
          }
        }
      }
      
      # R::NDArray#is_matrix method
      {
        {
          my $dim = new int[0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 3];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_matrix) {
            return 0;
          }
        }
      }

      # R::NDArray#is_square_matrix method
      {
        {
          my $dim = new int[0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_square_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_square_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_square_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_square_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_square_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 3];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_square_matrix) {
            return 0;
          }
        }
      }
      
      # R::NDArray#nrow method and R::NDArray#ncol method
      {
        {
          my $dim = [1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->nrow == 1) {
            return 0;
          }
          
          unless ($ret_ndarray->ncol == 1) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->nrow == 2) {
            return 0;
          }
          
          unless ($ret_ndarray->ncol == 1) {
            return 0;
          }
        }
        
        {
          my $dim = [3, 2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->nrow == 3) {
            return 0;
          }
          
          unless ($ret_ndarray->ncol == 2) {
            return 0;
          }
        }
        
        {
          my $dim = [3, 2, 1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->nrow == 3) {
            return 0;
          }
          
          unless ($ret_ndarray->ncol == 2) {
            return 0;
          }
        }
      }
      
      # R::NDArray#dim
      {
        {
          my $dim = [2, 3];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 3])) {
            return 0;
          }
          
          unless ($ret_ndarray->dim != $dim) {
            return 0;
          }
        }
      }
      
      # R::NDArray#set_dim
      {
        {
          my $dim = [2, 3, 5];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          $ret_ndarray->set_dim([5, 3, 2]);
          unless (Array->equals_int($ret_ndarray->dim, [5, 3, 2])) {
            return 0;
          }
          
          $ret_ndarray->set_dim([5, 6]);
          unless (Array->equals_int($ret_ndarray->dim, [5, 6])) {
            return 0;
          }
          
          $ret_ndarray->set_dim([5, 6, 0]);
          unless (Array->equals_int($ret_ndarray->dim, [5, 6])) {
            return 0;
          }
          
          $ret_ndarray->set_dim([2, 3, 5, 1]);
          unless (Array->equals_int($ret_ndarray->dim, [2, 3, 5, 1])) {
            return 0;
          }
          
          # Exceptions
          {
            eval { $ret_ndarray->set_dim([2, 3, 4]); }
          }
          
          unless ($@) {
            return 0;
          }
        }
      }
      
      # R::NDArray#make_dim_read_only
      {
        {
          my $dim = [2, 3, 5];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          $ret_ndarray->make_dim_read_only;
          
          eval { $ret_ndarray->set_dim([5, 3, 2]); }
          
          unless ($@) {
            return 0;
          }
        }
      }
      
      # R::NDArray#drop_dim
      {
        {
          my $dim = [2, 1, 3, 5, 1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          $ret_ndarray->drop_dim;
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 3, 5])) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 1, 3, 5, 1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          my $dim_index = 1;
          
          $ret_ndarray->drop_dim($dim_index);
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 3, 5, 1])) {
            return 0;
          }
        }
        
        # Exceptions
        {
          {
            my $dim = [2, 1, 3, 5, 1];
            my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
            
            my $dim_index = 5;
            
            eval { $ret_ndarray->drop_dim($dim_index); }
            
            unless ($@) {
              return 0;
            }
          }
          
          {
            my $dim = [2, 1, 3, 5, 1];
            my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
            
            my $dim_index = 0;
            
            eval { $ret_ndarray->drop_dim($dim_index); }
            
            unless ($@) {
              return 0;
            }
          }
        }
      }
      
      # R::NDArray#expand_dim
      {
        {
          my $dim = [2, 3, 5];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          $ret_ndarray->expand_dim;
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 3, 5, 1])) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 3, 5];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          my $dim_index = 3;
          
          $ret_ndarray->expand_dim($dim_index);
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 3, 5, 1])) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 3, 5];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          my $dim_index = 1;
          
          $ret_ndarray->expand_dim($dim_index);
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 1, 3, 5])) {
            return 0;
          }
        }
        
        # Exceptions
        {
          {
            my $dim = [2, 3, 5];
            my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
            
            my $dim_index = 4;
            
            eval { $ret_ndarray->expand_dim($dim_index); }
            
            unless ($@) {
              return 0;
            }
          }
        }
      }
      
      # R::NDArray#length
      {
        {
          my $dim = new int[0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->length == 0) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->length == 1) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 3, 5];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->length == 30) {
            return 0;
          }
        }
      }
      
      # R::NDArray#clone method
      {
        {
          my $dim = [2, 3];
          my $data = [1, 2, 3, 4, 5, 6];
          my $ndarray = R::NDArray::Int->new({data => $data, dim => $dim});
          
          my $ret_ndarray = $ndarray->clone;
          
          unless (Array->equals_int($ret_ndarray->data, $data)){
            return 0;
          }
          
          if ($ret_ndarray->data == $data){
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $dim)){
            return 0;
          }
          
        }
        
        {
          my $dim = [2, 3];
          my $data0 = "1";
          my $data = [$data0, "2", "3", "4", "5", "6"];
          my $ndarray = R::NDArray::String->new({data => $data, dim => $dim});
          
          my $ret_ndarray = $ndarray->clone;
          
          unless (Array->equals_string($ret_ndarray->data, $data)){
            return 0;
          }
          
          if ($ret_ndarray->data == $data){
            return 0;
          }
          
          if ($ret_ndarray->data->[0] == $data0){
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $dim)){
            return 0;
          }
        }
        
        {
          my $dim = [2, 3];
          my $data0 = "1";
          my $data = [$data0, "2", "3", "4", "5", "6"];
          my $ndarray = R::NDArray::String->new({data => $data, dim => $dim});
          
          my $elem_shallow_clone = 1;
          my $ret_ndarray = $ndarray->clone($elem_shallow_clone);
          
          unless (Array->equals_string($ret_ndarray->data, $data)){
            return 0;
          }
          
          if ($ret_ndarray->data == $data){
            return 0;
          }
          
          unless ($ret_ndarray->data->[0] == $data0){
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $dim)){
            return 0;
          }
        }
      }
      
      # R::NDArray#slice method
      {

        {
          my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([IOP->c(0), IOP->c(0)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([IOP->c(1), IOP->c(0)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [2])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([IOP->c(2), IOP->c(0)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [3])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([IOP->c(0), IOP->c(1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [4])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([IOP->c(1), IOP->c(1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [5])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([IOP->c(2), IOP->c(1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [6])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = IOP->c(IOP->seq(1, 24), [4, 3, 2]);
          
          my $ret_ndarray = $ndarray->slice([IOP->c(3), IOP->c(2), IOP->c(1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [24])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 1, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = IOP->c(IOP->seq(1, 24), [4, 3, 2]);
          
          my $ret_ndarray = $ndarray->slice([IOP->c(1), IOP->c(1), IOP->c(1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [18])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 1, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([IOP->seq(0, 1), IOP->c(0)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 2])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([IOP->seq(0, 2), IOP->c(0)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 2, 3])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [3, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([IOP->c(0), IOP->seq(0, 1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 4])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 2])) {
            return 0;
          }
        }
        
        {
          my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([IOP->seq(1, 2), IOP->seq(0, 1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [2, 3, 5, 6])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 2])) {
            return 0;
          }
        }
        
        {
          my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([IOP->seq(0, 2), IOP->seq(0, 1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 2, 3, 4, 5, 6])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [3, 2])) {
            return 0;
          }
        }
        
        {
          my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([IOP->undef, IOP->c(1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [4, 5, 6])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [3, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([IOP->c(1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [2, 5])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 2])) {
            return 0;
          }
        }
        
        # Exceptions
        {
          {
            my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
            
            eval { $ndarray->slice([IOP->c(3), IOP->c(0)]); }
            
            unless ($@) {
              return 0;
            }
          }
          
          {
            my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
            
            eval { $ndarray->slice([IOP->c(0), IOP->c(2)]); }
            
            unless ($@) {
              return 0;
            }
          }
        }
      }
      
      # R::NDArray#slice_set method
      {

        {
          my $ret_ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          $ret_ndarray->slice_set([IOP->c(0), IOP->c(0)], IOP->c(100));
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [100, 2, 3, 4, 5, 6])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [3, 2])) {
            return 0;
          }
        }
        
        {
          my $ret_ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          $ret_ndarray->slice_set([IOP->seq(0, 2), IOP->c(0)], IOP->c([100, 101, 102]));
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [100, 101, 102, 4, 5, 6])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [3, 2])) {
            return 0;
          }
        }
        
        {
          my $ret_ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          $ret_ndarray->slice_set([IOP->c(1), IOP->seq(0, 1)], IOP->c([100, 101], [1, 2]));
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 100, 3, 4, 101, 6])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [3, 2])) {
            return 0;
          }
        }
        
        {
          my $ret_ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
          
          $ret_ndarray->slice_set([IOP->c(1), IOP->seq(0, 1)], IOP->c([100, 101], [2, 1]));
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 100, 3, 4, 101, 6])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [3, 2])) {
            return 0;
          }
        }
        
        {
          my $ret_ndarray = IOP->c(IOP->seq(1, 24), [4, 3, 2]);
          
          $ret_ndarray->slice_set([IOP->seq(0, 2), IOP->seq(0, 1)], IOP->c(IOP->seq(101, 112), [3, 2, 2]));
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [101, 102, 103, 4, 104, 105, 106, 8, 9, 10, 11, 12, 107, 108, 109, 16, 110, 111, 112, 20, 21, 22, 23, 24])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [4, 3, 2])) {
            return 0;
          }
        }
        
        # Exceptions
        {
          # Invalid dimension
          {
            my $ret_ndarray = IOP->c(IOP->seq(1, 24), [4, 3, 2]);
            
            eval { $ret_ndarray->slice_set([IOP->seq(0, 2), IOP->seq(0, 1)], IOP->c(IOP->seq(101, 112), [2, 3, 2])); }
            
            unless ($@) {
              return 0;
            }
          }
        }
      }
      
      # R::NDArray#to_string method
      {
        {
          my $ret_ndarray = IOP->c(new int[0]);
          
          unless ($ret_ndarray->to_string eq "Empty") {
            return 0;
          }
        }
        
        {
          my $ret_ndarray = IOP->c([1, 2]);
          
          unless ($ret_ndarray->to_string eq "[0]\t1\n[1]\t2") {
            return 0;
          }
        }
        
        {
          my $ret_ndarray = IOP->c(IOP->seq(1, 6), [3, 2]);
          
          unless ($ret_ndarray->to_string eq "\x{09}[,0]\x{09}[,1]\x{09}\x{0A}[0]\x{09}1\x{09}4\x{0A}[1]\x{09}2\x{09}5\x{0A}[2]\x{09}3\x{09}6") {
            return 0;
          }
          
        }
        
        {
          my $ret_ndarray = IOP->c(IOP->seq(1, 24), [4, 3, 2]);
          
          unless ($ret_ndarray->to_string eq "[,,0]\x{0A}\x{09}[,0]\x{09}[,1]\x{09}[,2]\x{09}\x{0A}[0]\x{09}1\x{09}5\x{09}9\x{0A}[1]\x{09}2\x{09}6\x{09}10\x{0A}[2]\x{09}3\x{09}7\x{09}11\x{0A}[3]\x{09}4\x{09}8\x{09}12\x{0A}\x{0A}[,,1]\x{0A}\x{09}[,0]\x{09}[,1]\x{09}[,2]\x{09}\x{0A}[0]\x{09}13\x{09}17\x{09}21\x{0A}[1]\x{09}14\x{09}18\x{09}22\x{0A}[2]\x{09}15\x{09}19\x{09}23\x{0A}[3]\x{09}16\x{09}20\x{09}24") {
            return 0;
          }
        }
        
        {
          my $ret_ndarray = IOP->c(IOP->seq(1, 120), [5, 4, 3, 2]);
          
          unless ($ret_ndarray->to_string eq "[,,,0]\x{0A}[,,0]\x{0A}\x{09}[,0]\x{09}[,1]\x{09}[,2]\x{09}[,3]\x{09}\x{0A}[0]\x{09}1\x{09}6\x{09}11\x{09}16\x{0A}[1]\x{09}2\x{09}7\x{09}12\x{09}17\x{0A}[2]\x{09}3\x{09}8\x{09}13\x{09}18\x{0A}[3]\x{09}4\x{09}9\x{09}14\x{09}19\x{0A}[4]\x{09}5\x{09}10\x{09}15\x{09}20\x{0A}\x{0A}[,,1]\x{0A}\x{09}[,0]\x{09}[,1]\x{09}[,2]\x{09}[,3]\x{09}\x{0A}[0]\x{09}21\x{09}26\x{09}31\x{09}36\x{0A}[1]\x{09}22\x{09}27\x{09}32\x{09}37\x{0A}[2]\x{09}23\x{09}28\x{09}33\x{09}38\x{0A}[3]\x{09}24\x{09}29\x{09}34\x{09}39\x{0A}[4]\x{09}25\x{09}30\x{09}35\x{09}40\x{0A}\x{0A}[,,2]\x{0A}\x{09}[,0]\x{09}[,1]\x{09}[,2]\x{09}[,3]\x{09}\x{0A}[0]\x{09}41\x{09}46\x{09}51\x{09}56\x{0A}[1]\x{09}42\x{09}47\x{09}52\x{09}57\x{0A}[2]\x{09}43\x{09}48\x{09}53\x{09}58\x{0A}[3]\x{09}44\x{09}49\x{09}54\x{09}59\x{0A}[4]\x{09}45\x{09}50\x{09}55\x{09}60\x{0A}\x{0A}\x{0A}[,,,1]\x{0A}[,,0]\x{0A}\x{09}[,0]\x{09}[,1]\x{09}[,2]\x{09}[,3]\x{09}\x{0A}[0]\x{09}61\x{09}66\x{09}71\x{09}76\x{0A}[1]\x{09}62\x{09}67\x{09}72\x{09}77\x{0A}[2]\x{09}63\x{09}68\x{09}73\x{09}78\x{0A}[3]\x{09}64\x{09}69\x{09}74\x{09}79\x{0A}[4]\x{09}65\x{09}70\x{09}75\x{09}80\x{0A}\x{0A}[,,1]\x{0A}\x{09}[,0]\x{09}[,1]\x{09}[,2]\x{09}[,3]\x{09}\x{0A}[0]\x{09}81\x{09}86\x{09}91\x{09}96\x{0A}[1]\x{09}82\x{09}87\x{09}92\x{09}97\x{0A}[2]\x{09}83\x{09}88\x{09}93\x{09}98\x{0A}[3]\x{09}84\x{09}89\x{09}94\x{09}99\x{0A}[4]\x{09}85\x{09}90\x{09}95\x{09}100\x{0A}\x{0A}[,,2]\x{0A}\x{09}[,0]\x{09}[,1]\x{09}[,2]\x{09}[,3]\x{09}\x{0A}[0]\x{09}101\x{09}106\x{09}111\x{09}116\x{0A}[1]\x{09}102\x{09}107\x{09}112\x{09}117\x{0A}[2]\x{09}103\x{09}108\x{09}113\x{09}118\x{0A}[3]\x{09}104\x{09}109\x{09}114\x{09}119\x{0A}[4]\x{09}105\x{09}110\x{09}115\x{09}120") {
            return 0;
          }
          
        }
        
      }
      
    }
    
    # R::NDArray::Int
    {
      # R::NDArray::Int#new method
      {
        {
          my $ret_ndarray = R::NDArray::Int->new;
          
          unless (Array->equals_int($ret_ndarray->data, new int[0])) {
            return 0;
          }
          
          unless ($ret_ndarray->elem_size == 4) {
            return 0;
          }
          
          unless ($ret_ndarray->is_numeric_ndarray == 1) {
            return 0;
          }
          
          unless ($ret_ndarray->is_any_numeric_ndarray == 1) {
            return 0;
          }
          
          unless ($ret_ndarray->is_mulnum_ndarray == 0) {
            return 0;
          }
          
          unless ($ret_ndarray->is_object_ndarray == 0) {
            return 0;
          }
          
          unless ($ret_ndarray->elem_type_name eq "int") {
            return 0;
          }
          
          unless ($ret_ndarray->is_dim_read_only == 0) {
            return 0;
          }
        }
        
        {
          my $data = [1, 2, 3];
          my $ret_ndarray = R::NDArray::Int->new({data => $data});
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 2, 3])) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ret_ndarray->dim, [1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [0])) {
            return 0;
          }
        }
        
        {
          my $dim = new int[0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ret_ndarray->dim, new int [0])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, new int[0])) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 3];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 3])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [0, 0, 0, 0, 0, 0])) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [0, 0])) {
            return 0;
          }
        }
        
        # Normalization
        {
          my $dim = [0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ret_ndarray->dim, new int [0])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, new int[0])) {
            return 0;
          }
        }
        
        # Normalization
        {
          my $dim = [2, 3, 0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 3])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [0, 0, 0, 0, 0, 0])) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 3];
          my $data = [0, 1, 2, 3, 4, 5];
          my $ret_ndarray = R::NDArray::Int->new({data => $data, dim => $dim});
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 3])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [0, 1, 2, 3, 4, 5])) {
            return 0;
          }
        }
        
        # Exceptions
        {
          {
            my $dim = [2, 3];
            my $data = [0, 1, 2, 3, 4, 5, 6];
            eval { R::NDArray::Int->new({data => $data, dim => $dim}); }
            
            unless ($@) {
              return 0;
            }
          }
          
        }
        
      }
    }
    
    $@ = undef;
    
    return 1;
  }
}
