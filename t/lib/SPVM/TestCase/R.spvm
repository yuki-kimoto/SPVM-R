class TestCase::R {
  use R;
  use R::NDArray;
  use R::NDArray::Int;
  use R::NDArray::Long;
  use R::NDArray::Float;
  use R::NDArray::Double;
  use R::NDArray::FloatComplex;
  use R::NDArray::DoubleComplex;
  
  use R::NDArray::Byte;
  use R::NDArray::Short;
  use R::NDArray::String;
  use R::NDArray::StringBuffer;
  use R::NDArray::Time::Piece;
  
  use R::OP;
  use R::OP::Int;
  use R::OP::Long;
  use R::OP::Float;
  use R::OP::Double;
  use R::OP::FloatComplex;
  use R::OP::DoubleComplex;
  
  use R::OP::Byte;
  use R::OP::Short;
  use R::OP::String;
  use R::OP::StringBuffer;
  use R::OP::Time::Piece;
  
  use R::DataFrame;
  use R::OP::Matrix;
  use R::OP::DataFrame;
  
  static method test : int () {
    
    # R
    {
      # R#byte method
      {
        {
          my $data = [(byte)1, 2, 3, 4, 5, 6];
          my $dim = [2, 3];
          my $ret_ndarray = R->byte($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::Byte) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(byte)1, 2, 3, 4, 5, 6];
          my $data_length = @$data;
          my $ret_ndarray = R->byte($data);
          
          unless ($ret_ndarray is_type R::NDArray::Byte) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
        
        {
          my $data = (byte)1;
          my $ret_ndarray = R->byte($data);
          
          unless ($ret_ndarray is_type R::NDArray::Byte) {
            return 0;
          }
          
          unless (Array->equals_byte($ret_ndarray->data, [(byte)1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(byte)1, 2, 3, 4, 5, 6];
          my $ret_ndarray = R->byte(R::OP::Byte->c($data));
          
          unless ($ret_ndarray is_type R::NDArray::Byte) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
      }
      
      # R#short method
      {
        {
          my $data = [(short)1, 2, 3, 4, 5, 6];
          my $dim = [2, 3];
          my $ret_ndarray = R->short($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::Short) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(short)1, 2, 3, 4, 5, 6];
          my $data_length = @$data;
          my $ret_ndarray = R->short($data);
          
          unless ($ret_ndarray is_type R::NDArray::Short) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
        
        {
          my $data = (short)1;
          my $ret_ndarray = R->short($data);
          
          unless ($ret_ndarray is_type R::NDArray::Short) {
            return 0;
          }
          
          unless (Array->equals_short($ret_ndarray->data, [(short)1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(short)1, 2, 3, 4, 5, 6];
          my $ret_ndarray = R->short(R::OP::Short->c($data));
          
          unless ($ret_ndarray is_type R::NDArray::Short) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
      }

      # R#int method
      {
        {
          my $data = [(int)1, 2, 3, 4, 5, 6];
          my $dim = [2, 3];
          my $ret_ndarray = R->int($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(int)1, 2, 3, 4, 5, 6];
          my $data_length = @$data;
          my $ret_ndarray = R->int($data);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
        
        {
          my $data = (int)1;
          my $ret_ndarray = R->int($data);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [(int)1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(int)1, 2, 3, 4, 5, 6];
          my $ret_ndarray = R->int(R::OP::Int->c($data));
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
      }
      
      # R#long method
      {
        {
          my $data = [(long)1, 2, 3, 4, 5, 6];
          my $dim = [2, 3];
          my $ret_ndarray = R->long($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::Long) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(long)1, 2, 3, 4, 5, 6];
          my $data_length = @$data;
          my $ret_ndarray = R->long($data);
          
          unless ($ret_ndarray is_type R::NDArray::Long) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
        
        {
          my $data = (long)1;
          my $ret_ndarray = R->long($data);
          
          unless ($ret_ndarray is_type R::NDArray::Long) {
            return 0;
          }
          
          unless (Array->equals_long($ret_ndarray->data, [(long)1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(long)1, 2, 3, 4, 5, 6];
          my $ret_ndarray = R->long(R::OP::Long->c($data));
          
          unless ($ret_ndarray is_type R::NDArray::Long) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
      }
      
      # R#float method
      {
        {
          my $data = [(float)1, 2, 3, 4, 5, 6];
          my $dim = [2, 3];
          my $ret_ndarray = R->float($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::Float) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(float)1, 2, 3, 4, 5, 6];
          my $data_length = @$data;
          my $ret_ndarray = R->float($data);
          
          unless ($ret_ndarray is_type R::NDArray::Float) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
        
        {
          my $data = (float)1;
          my $ret_ndarray = R->float($data);
          
          unless ($ret_ndarray is_type R::NDArray::Float) {
            return 0;
          }
          
          unless (Array->equals_float($ret_ndarray->data, [(float)1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(float)1, 2, 3, 4, 5, 6];
          my $ret_ndarray = R->float(R::OP::Float->c($data));
          
          unless ($ret_ndarray is_type R::NDArray::Float) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
      }
      
      # R#double method
      {
        {
          my $data = [(double)1, 2, 3, 4, 5, 6];
          my $dim = [2, 3];
          my $ret_ndarray = R->double($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::Double) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(double)1, 2, 3, 4, 5, 6];
          my $data_length = @$data;
          my $ret_ndarray = R->double($data);
          
          unless ($ret_ndarray is_type R::NDArray::Double) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
        
        {
          my $data = (double)1;
          my $ret_ndarray = R->double($data);
          
          unless ($ret_ndarray is_type R::NDArray::Double) {
            return 0;
          }
          
          unless (Array->equals_double($ret_ndarray->data, [(double)1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(double)1, 2, 3, 4, 5, 6];
          my $ret_ndarray = R->double(R::OP::Double->c($data));
          
          unless ($ret_ndarray is_type R::NDArray::Double) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
      }
      
      # R#float_complex method
      {
        {
          my $data = [(Complex_2f)Math->complexf(1, 1), Math->complexf(2, 1), Math->complexf(3, 1), Math->complexf(4, 1), Math->complexf(5, 1), Math->complexf(6, 1)];
          my $dim = [2, 3];
          my $ret_ndarray = R->float_complex($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::FloatComplex) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(Complex_2f)Math->complexf(1, 1), Math->complexf(2, 1), Math->complexf(3, 1), Math->complexf(4, 1), Math->complexf(5, 1), Math->complexf(6, 1)];
          my $data_length = @$data;
          my $ret_ndarray = R->float_complex($data);
          
          unless ($ret_ndarray is_type R::NDArray::FloatComplex) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
      }
      
      # R#double_complex method
      {
        {
          my $data = [(Complex_2d)Math->complex(1, 1), Math->complex(2, 1), Math->complex(3, 1), Math->complex(4, 1), Math->complex(5, 1), Math->complex(6, 1)];
          my $dim = [2, 3];
          my $ret_ndarray = R->double_complex($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::DoubleComplex) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(Complex_2d)Math->complex(1, 1), Math->complex(2, 1), Math->complex(3, 1), Math->complex(4, 1), Math->complex(5, 1), Math->complex(6, 1)];
          my $data_length = @$data;
          my $ret_ndarray = R->double_complex($data);
          
          unless ($ret_ndarray is_type R::NDArray::DoubleComplex) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
      }
      
      # R#float_complex method
      {
        {
          my $data = [(float)1,1,  2,1,  3,1,  4,1,  5,1,  6,1];
          my $dim = [2, 3];
          my $ret_ndarray = R->complexf($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::FloatComplex) {
            return 0;
          }
          
          my $ret_data = new float[2 * 6];
          Fn->memcpy($ret_data, 0, $ret_ndarray->data, 0, 4 * 2 * 6);
          
          unless (Array->equals_float($ret_data, $data)) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(float)1,1,  2,1,  3,1,  4,1,  5,1,  6,1];
          my $data_length = @$data / 2;
          my $ret_ndarray = R->complexf($data);
          
          unless ($ret_ndarray is_type R::NDArray::FloatComplex) {
            return 0;
          }
          
          my $ret_data = new float[2 * 6];
          Fn->memcpy($ret_data, 0, $ret_ndarray->data, 0, 4 * 2 * 6);
          
          unless (Array->equals_float($ret_data, $data)) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
      }
      
      # R#double_complex method
      {
        {
          my $data = [(double)1,1,  2,1,  3,1,  4,1,  5,1,  6,1];
          my $dim = [2, 3];
          my $ret_ndarray = R->complex($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::DoubleComplex) {
            return 0;
          }
          
          my $ret_data = new double[2 * 6];
          Fn->memcpy($ret_data, 0, $ret_ndarray->data, 0, 8 * 2 * 6);
          
          unless (Array->equals_double($ret_data, $data)) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(double)1,1,  2,1,  3,1,  4,1,  5,1,  6,1];
          my $data_length = @$data / 2;
          my $ret_ndarray = R->complex($data);
          
          unless ($ret_ndarray is_type R::NDArray::DoubleComplex) {
            return 0;
          }
          
          my $ret_data = new double[2 * 6];
          Fn->memcpy($ret_data, 0, $ret_ndarray->data, 0, 8 * 2 * 6);
          
          unless (Array->equals_double($ret_data, $data)) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
      }
      
      # R#i method
      {
        {
          my $ret_ndarray = R->i;
          
          unless ($ret_ndarray is_type R::NDArray::DoubleComplex) {
            return 0;
          }
          
          unless ($ret_ndarray->data->[0]{re} == 0) {
            return 0;
          }
          
          unless ($ret_ndarray->data->[0]{im} == 1) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1])) {
            return 0;
          }
          
        }
      }
      
      # R#object method
      {
        {
          my $data = [(object)"1", "2", "3", "4", "5", "6"];
          my $dim = [2, 3];
          my $ret_ndarray = R->object($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::Object) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(object)"1", "2", "3", "4", "5", "6"];
          my $data_length = @$data;
          my $ret_ndarray = R->object($data);
          
          unless ($ret_ndarray is_type R::NDArray::Object) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
      }
      
      # R#string method
      {
        {
          my $data = [(string)"1", "2", "3", "4", "5", "6"];
          my $dim = [2, 3];
          my $ret_ndarray = R->string($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::String) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(string)"1", "2", "3", "4", "5", "6"];
          my $data_length = @$data;
          my $ret_ndarray = R->string($data);
          
          unless ($ret_ndarray is_type R::NDArray::String) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
      }

      # R#string_buffer method
      {
        {
          my $data = [(StringBuffer)StringBuffer->new("1"), StringBuffer->new("2"), StringBuffer->new("3"), StringBuffer->new("4"), StringBuffer->new("5"), StringBuffer->new("6")];
          my $dim = [2, 3];
          my $ret_ndarray = R->string_buffer($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::StringBuffer) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(StringBuffer)StringBuffer->new("1"), StringBuffer->new("2"), StringBuffer->new("3"), StringBuffer->new("4"), StringBuffer->new("5"), StringBuffer->new("6")];
          my $data_length = @$data;
          my $ret_ndarray = R->string_buffer($data);
          
          unless ($ret_ndarray is_type R::NDArray::StringBuffer) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
      }

      # R#time_piece method
      {
        {
          my $data = [(Time::Piece)Time::Piece->localtime, Time::Piece->localtime, Time::Piece->localtime, Time::Piece->localtime, Time::Piece->localtime, Time::Piece->localtime];
          my $dim = [2, 3];
          my $ret_ndarray = R->time_piece($data, $dim);
          
          unless ($ret_ndarray is_type R::NDArray::Time::Piece) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $ret_ndarray->dim)) {
            return 0;
          }
        }
        
        {
          my $data = [(Time::Piece)Time::Piece->localtime, Time::Piece->localtime, Time::Piece->localtime, Time::Piece->localtime, Time::Piece->localtime, Time::Piece->localtime];
          my $data_length = @$data;
          my $ret_ndarray = R->time_piece($data);
          
          unless ($ret_ndarray is_type R::NDArray::Time::Piece) {
            return 0;
          }
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [$data_length])) {
            return 0;
          }
        }
      }
      
      # R#seq method
      {
        {
          my $begin = 1;
          my $end = 5;
          my $ret_ndarray = R->seq($begin, $end);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 2, 3, 4, 5])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [5])) {
            return 0;
          }
        }
        
        {
          my $begin = 1;
          my $end = 5;
          my $by = 2;
          my $ret_ndarray = R->seq($begin, $end, $by);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 3, 5])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [3])) {
            return 0;
          }
        }
        
        {
          my $begin = 5;
          my $end = 1;
          my $by = -1;
          my $ret_ndarray = R->seq($begin, $end, $by);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [5, 4, 3, 2, 1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [5])) {
            return 0;
          }
        }
      }
      
      # R#undef method
      {
        my $undef = R->undef;
        
        unless ($undef is_compile_type R::NDArray::Int) {
          return 0;
        }
        
        if ($undef) {
          return 0;
        }
      }
    }
    
    # R::NDArray
    {
      # R::NDArray#is_empty method
      {
        {
          my $dim = new int[0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_empty) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_empty) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_empty) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_empty) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 3];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_empty) {
            return 0;
          }
        }
      }
      
      # R::NDArray#is_scalar method
      {
        {
          my $dim = new int[0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_scalar) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_scalar) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_scalar) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_scalar) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_scalar) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 3];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_scalar) {
            return 0;
          }
        }
      }
      
      # R::NDArray#is_vector method
      {
        {
          my $dim = new int[0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_vector) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_vector) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_vector) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_vector) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_vector) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 3];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_vector) {
            return 0;
          }
        }
      }
      
      # R::NDArray#is_matrix method
      {
        {
          my $dim = new int[0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 3];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_matrix) {
            return 0;
          }
        }
      }

      # R::NDArray#is_square_matrix method
      {
        {
          my $dim = new int[0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_square_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_square_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_square_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_square_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->is_square_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 3];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ret_ndarray->is_square_matrix) {
            return 0;
          }
        }
      }
      
      # R::NDArray#nrow method and R::NDArray#ncol method
      {
        {
          my $dim = [1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->nrow == 1) {
            return 0;
          }
          
          unless ($ret_ndarray->ncol == 1) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->nrow == 2) {
            return 0;
          }
          
          unless ($ret_ndarray->ncol == 1) {
            return 0;
          }
        }
        
        {
          my $dim = [3, 2];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->nrow == 3) {
            return 0;
          }
          
          unless ($ret_ndarray->ncol == 2) {
            return 0;
          }
        }
        
        {
          my $dim = [3, 2, 1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->nrow == 3) {
            return 0;
          }
          
          unless ($ret_ndarray->ncol == 2) {
            return 0;
          }
        }
      }
      
      # R::NDArray#dim
      {
        {
          my $dim = [2, 3];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 3])) {
            return 0;
          }
          
          unless ($ret_ndarray->dim != $dim) {
            return 0;
          }
        }
      }
      
      # R::NDArray#set_dim
      {
        {
          my $dim = [2, 3, 5];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          $ret_ndarray->set_dim([5, 3, 2]);
          unless (Array->equals_int($ret_ndarray->dim, [5, 3, 2])) {
            return 0;
          }
          
          $ret_ndarray->set_dim([5, 6]);
          unless (Array->equals_int($ret_ndarray->dim, [5, 6])) {
            return 0;
          }
          
          $ret_ndarray->set_dim([5, 6, 0]);
          unless (Array->equals_int($ret_ndarray->dim, [5, 6])) {
            return 0;
          }
          
          $ret_ndarray->set_dim([2, 3, 5, 1]);
          unless (Array->equals_int($ret_ndarray->dim, [2, 3, 5, 1])) {
            return 0;
          }
          
          # Exceptions
          {
            eval { $ret_ndarray->set_dim([2, 3, 4]); }
          }
          
          unless ($@) {
            return 0;
          }
        }
      }
      
      # R::NDArray#make_dim_read_only
      {
        {
          my $dim = [2, 3, 5];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          $ret_ndarray->make_dim_read_only;
          
          eval { $ret_ndarray->set_dim([5, 3, 2]); }
          
          unless ($@) {
            return 0;
          }
        }
      }
      
      # R::NDArray#drop_dim
      {
        {
          my $dim = [2, 1, 3, 5, 1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          $ret_ndarray->drop_dim;
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 3, 5])) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 1, 3, 5, 1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          my $dim_index = 1;
          
          $ret_ndarray->drop_dim($dim_index);
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 3, 5, 1])) {
            return 0;
          }
        }
        
        # Exceptions
        {
          {
            my $dim = [2, 1, 3, 5, 1];
            my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
            
            my $dim_index = 5;
            
            eval { $ret_ndarray->drop_dim($dim_index); }
            
            unless ($@) {
              return 0;
            }
          }
          
          {
            my $dim = [2, 1, 3, 5, 1];
            my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
            
            my $dim_index = 0;
            
            eval { $ret_ndarray->drop_dim($dim_index); }
            
            unless ($@) {
              return 0;
            }
          }
        }
      }
      
      # R::NDArray#expand_dim
      {
        {
          my $dim = [2, 3, 5];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          $ret_ndarray->expand_dim;
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 3, 5, 1])) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 3, 5];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          my $dim_index = 3;
          
          $ret_ndarray->expand_dim($dim_index);
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 3, 5, 1])) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 3, 5];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          my $dim_index = 1;
          
          $ret_ndarray->expand_dim($dim_index);
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 1, 3, 5])) {
            return 0;
          }
        }
        
        # Exceptions
        {
          {
            my $dim = [2, 3, 5];
            my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
            
            my $dim_index = 4;
            
            eval { $ret_ndarray->expand_dim($dim_index); }
            
            unless ($@) {
              return 0;
            }
          }
        }
      }
      
      # R::NDArray#length
      {
        {
          my $dim = new int[0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->length == 0) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->length == 1) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 3, 5];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ret_ndarray->length == 30) {
            return 0;
          }
        }
      }
      
      # R::NDArray#clone method
      {
        {
          my $dim = [2, 3];
          my $data = [1, 2, 3, 4, 5, 6];
          my $ndarray = R::NDArray::Int->new({data => $data, dim => $dim});
          
          my $ret_ndarray = $ndarray->clone;
          
          unless (Array->equals_int($ret_ndarray->data, $data)){
            return 0;
          }
          
          if ($ret_ndarray->data == $data){
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $dim)){
            return 0;
          }
          
        }
        
        {
          my $dim = [2, 3];
          my $data0 = "1";
          my $data = [$data0, "2", "3", "4", "5", "6"];
          my $ndarray = R::NDArray::String->new({data => $data, dim => $dim});
          
          my $ret_ndarray = $ndarray->clone;
          
          unless (Array->equals_string($ret_ndarray->data, $data)){
            return 0;
          }
          
          if ($ret_ndarray->data == $data){
            return 0;
          }
          
          if ($ret_ndarray->data->[0] == $data0){
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $dim)){
            return 0;
          }
        }
        
        {
          my $dim = [2, 3];
          my $data0 = "1";
          my $data = [$data0, "2", "3", "4", "5", "6"];
          my $ndarray = R::NDArray::String->new({data => $data, dim => $dim});
          
          my $elem_shallow_clone = 1;
          my $ret_ndarray = $ndarray->clone($elem_shallow_clone);
          
          unless (Array->equals_string($ret_ndarray->data, $data)){
            return 0;
          }
          
          if ($ret_ndarray->data == $data){
            return 0;
          }
          
          unless ($ret_ndarray->data->[0] == $data0){
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, $dim)){
            return 0;
          }
        }
      }
      
      # R::NDArray#slice method
      {

        {
          my $ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([R->int(0), R->int(0)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([R->int(1), R->int(0)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [2])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([R->int(2), R->int(0)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [3])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([R->int(0), R->int(1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [4])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([R->int(1), R->int(1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [5])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([R->int(2), R->int(1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [6])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = R->int(R->seq(1, 24), [4, 3, 2]);
          
          my $ret_ndarray = $ndarray->slice([R->int(3), R->int(2), R->int(1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [24])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 1, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = R->int(R->seq(1, 24), [4, 3, 2]);
          
          my $ret_ndarray = $ndarray->slice([R->int(1), R->int(1), R->int(1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [18])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 1, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([R->seq(0, 1), R->int(0)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 2])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([R->seq(0, 2), R->int(0)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 2, 3])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [3, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([R->int(0), R->seq(0, 1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 4])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 2])) {
            return 0;
          }
        }
        
        {
          my $ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([R->seq(1, 2), R->seq(0, 1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [2, 3, 5, 6])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 2])) {
            return 0;
          }
        }
        
        {
          my $ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([R->seq(0, 2), R->seq(0, 1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 2, 3, 4, 5, 6])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [3, 2])) {
            return 0;
          }
        }
        
        {
          my $ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([R->undef, R->int(1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [4, 5, 6])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [3, 1])) {
            return 0;
          }
        }
        
        {
          my $ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          my $ret_ndarray = $ndarray->slice([R->int(1)]);
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [2, 5])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [1, 2])) {
            return 0;
          }
        }
        
        # Exceptions
        {
          {
            my $ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
            
            eval { $ndarray->slice([R->int(3), R->int(0)]); }
            
            unless ($@) {
              return 0;
            }
          }
          
          {
            my $ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
            
            eval { $ndarray->slice([R->int(0), R->int(2)]); }
            
            unless ($@) {
              return 0;
            }
          }
        }
      }
      
      # R::NDArray#slice_set method
      {

        {
          my $ret_ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          $ret_ndarray->slice_set([R->int(0), R->int(0)], R->int(100));
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [100, 2, 3, 4, 5, 6])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [3, 2])) {
            return 0;
          }
        }
        
        {
          my $ret_ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          $ret_ndarray->slice_set([R->seq(0, 2), R->int(0)], R->int([100, 101, 102]));
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [100, 101, 102, 4, 5, 6])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [3, 2])) {
            return 0;
          }
        }
        
        {
          my $ret_ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          $ret_ndarray->slice_set([R->int(1), R->seq(0, 1)], R->int([100, 101], [1, 2]));
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 100, 3, 4, 101, 6])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [3, 2])) {
            return 0;
          }
        }
        
        {
          my $ret_ndarray = R->int([1, 2, 3, 4, 5, 6], [3, 2]);
          
          $ret_ndarray->slice_set([R->int(1), R->seq(0, 1)], R->int([100, 101], [2, 1]));
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 100, 3, 4, 101, 6])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [3, 2])) {
            return 0;
          }
        }
        
        {
          my $ret_ndarray = R->int(R->seq(1, 24), [4, 3, 2]);
          
          $ret_ndarray->slice_set([R->seq(0, 2), R->seq(0, 1)], R->int(R->seq(101, 112), [3, 2, 2]));
          
          unless ($ret_ndarray is_type R::NDArray::Int) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [101, 102, 103, 4, 104, 105, 106, 8, 9, 10, 11, 12, 107, 108, 109, 16, 110, 111, 112, 20, 21, 22, 23, 24])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->dim, [4, 3, 2])) {
            return 0;
          }
        }
      }
      
    }
    
    # R::NDArray::Int
    {
      # R::NDArray::Int#new method
      {
        {
          my $ret_ndarray = R::NDArray::Int->new;
          
          unless (Array->equals_int($ret_ndarray->data, new int[0])) {
            return 0;
          }
          
          unless ($ret_ndarray->elem_size == 4) {
            return 0;
          }
          
          unless ($ret_ndarray->is_numeric_ndarray == 1) {
            return 0;
          }
          
          unless ($ret_ndarray->is_any_numeric_ndarray == 1) {
            return 0;
          }
          
          unless ($ret_ndarray->is_mulnum_ndarray == 0) {
            return 0;
          }
          
          unless ($ret_ndarray->is_object_ndarray == 0) {
            return 0;
          }
          
          unless ($ret_ndarray->elem_type_name eq "int") {
            return 0;
          }
          
          unless ($ret_ndarray->is_dim_read_only == 0) {
            return 0;
          }
        }
        
        {
          my $data = [1, 2, 3];
          my $ret_ndarray = R::NDArray::Int->new({data => $data});
          
          unless ($ret_ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [1, 2, 3])) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ret_ndarray->dim, [1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [0])) {
            return 0;
          }
        }
        
        {
          my $dim = new int[0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ret_ndarray->dim, new int [0])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, new int[0])) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 3];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 3])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [0, 0, 0, 0, 0, 0])) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 1];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 1])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [0, 0])) {
            return 0;
          }
        }
        
        # Normalization
        {
          my $dim = [0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ret_ndarray->dim, new int [0])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, new int[0])) {
            return 0;
          }
        }
        
        # Normalization
        {
          my $dim = [2, 3, 0];
          my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 3])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [0, 0, 0, 0, 0, 0])) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 3];
          my $data = [0, 1, 2, 3, 4, 5];
          my $ret_ndarray = R::NDArray::Int->new({data => $data, dim => $dim});
          
          unless (Array->equals_int($ret_ndarray->dim, [2, 3])) {
            return 0;
          }
          
          unless (Array->equals_int($ret_ndarray->data, [0, 1, 2, 3, 4, 5])) {
            return 0;
          }
        }
        
        # Exceptions
        {
          {
            my $dim = [2, 3];
            my $data = [0, 1, 2, 3, 4, 5, 6];
            eval { R::NDArray::Int->new({data => $data, dim => $dim}); }
            
            unless ($@) {
              return 0;
            }
          }
          
        }
        
      }
    }
    
    $@ = undef;
    
    return 1;
  }
}
