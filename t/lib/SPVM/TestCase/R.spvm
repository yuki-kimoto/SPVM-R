class TestCase::R {
  use R;
  use R::NDArray;
  use R::NDArray::Int;
  use R::NDArray::Long;
  use R::NDArray::Float;
  use R::NDArray::Double;
  use R::NDArray::FloatComplex;
  use R::NDArray::DoubleComplex;
  
  use R::NDArray::Byte;
  use R::NDArray::Short;
  use R::NDArray::String;
  use R::NDArray::StringBuffer;
  use R::NDArray::Time::Piece;
  
  use R::OP;
  use R::OP::Int;
  use R::OP::Long;
  use R::OP::Float;
  use R::OP::Double;
  use R::OP::FloatComplex;
  use R::OP::DoubleComplex;
  
  use R::OP::Byte;
  use R::OP::Short;
  use R::OP::String;
  use R::OP::StringBuffer;
  use R::OP::Time::Piece;
  
  use R::DataFrame;
  use R::OP::Matrix;
  use R::OP::DataFrame;
  
  static method test : int () {
    
    # R::NDArray
    {
      # R::NDArray#is_empty method
      {
        {
          my $dim = new int[0];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ndarray->is_empty) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_empty) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_empty) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_empty) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 3];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_empty) {
            return 0;
          }
        }
      }
      
      # R::NDArray#is_scalar method
      {
        {
          my $dim = new int[0];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_scalar) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ndarray->is_scalar) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_scalar) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_scalar) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 3];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_scalar) {
            return 0;
          }
        }
      }
      
      # R::NDArray#is_vector method
      {
        {
          my $dim = new int[0];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_vector) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ndarray->is_vector) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ndarray->is_vector) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_vector) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 3];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_vector) {
            return 0;
          }
        }
      }
      
      # R::NDArray#is_matrix method
      {
        {
          my $dim = new int[0];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ndarray->is_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 3];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_matrix) {
            return 0;
          }
        }
      }

      # R::NDArray#is_square_matrix method
      {
        {
          my $dim = new int[0];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_square_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_square_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [2];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_square_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_square_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 2];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless ($ndarray->is_square_matrix) {
            return 0;
          }
        }
        
        {
          my $dim = [1, 2, 3];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          if ($ndarray->is_square_matrix) {
            return 0;
          }
        }
      }
    }
    
    # R::NDArray::Int
    {
      # R::NDArray::Int#new method
      {
        {
          my $ndarray = R::NDArray::Int->new;
          
          unless (Array->equals_int($ndarray->data, new int[0])) {
            return 0;
          }
          
          unless ($ndarray->element_size == 4) {
            return 0;
          }
          
          unless ($ndarray->is_numeric == 1) {
            return 0;
          }
          
          unless ($ndarray->type eq "int") {
            return 0;
          }
          
          unless ($ndarray->is_dim_read_only == 0) {
            return 0;
          }
        }
        
        {
          my $data = [1, 2, 3];
          my $ndarray = R::NDArray::Int->new({data => $data});
          
          unless ($ndarray->data == $data) {
            return 0;
          }
          
          unless (Array->equals_int($ndarray->data, [1, 2, 3])) {
            return 0;
          }
        }
        
        {
          my $dim = [1];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ndarray->dim, [1])) {
            return 0;
          }
          
          unless (Array->equals_int($ndarray->data, [0])) {
            return 0;
          }
        }
        
        {
          my $dim = new int[0];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ndarray->dim, new int [0])) {
            return 0;
          }
          
          unless (Array->equals_int($ndarray->data, new int[0])) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 3];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ndarray->dim, [2, 3])) {
            return 0;
          }
          
          unless (Array->equals_int($ndarray->data, [0, 0, 0, 0, 0, 0])) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 1];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ndarray->dim, [2, 1])) {
            return 0;
          }
          
          unless (Array->equals_int($ndarray->data, [0, 0])) {
            return 0;
          }
        }
        
        # Normalization
        {
          my $dim = [0];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ndarray->dim, new int [0])) {
            return 0;
          }
          
          unless (Array->equals_int($ndarray->data, new int[0])) {
            return 0;
          }
        }
        
        # Normalization
        {
          my $dim = [2, 3, 0];
          my $ndarray = R::NDArray::Int->new({dim => $dim});
          
          unless (Array->equals_int($ndarray->dim, [2, 3])) {
            return 0;
          }
          
          unless (Array->equals_int($ndarray->data, [0, 0, 0, 0, 0, 0])) {
            return 0;
          }
        }
        
        {
          my $dim = [2, 3];
          my $data = [0, 1, 2, 3, 4, 5];
          my $ndarray = R::NDArray::Int->new({data => $data, dim => $dim});
          
          unless (Array->equals_int($ndarray->dim, [2, 3])) {
            return 0;
          }
          
          unless (Array->equals_int($ndarray->data, [0, 1, 2, 3, 4, 5])) {
            return 0;
          }
        }
        
        # Exceptions
        {
          {
            my $dim = [2, 3];
            my $data = [0, 1, 2, 3, 4, 5, 6];
            eval { R::NDArray::Int->new({data => $data, dim => $dim}); }
            
            unless ($@) {
              return 0;
            }
          }
          
        }
        
      }
    }
    
    $@ = undef;
    
    return 1;
  }
}
