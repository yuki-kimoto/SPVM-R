class TestCase::R::NDArray {
  
  use R::NDArray;
  use R::OP::Int as IOP;
  
  static method data : int () {
    
    {
      my $data = [1, 2];
      my $ret_ndarray = (R::NDArray)R::NDArray::Int->new({data => $data});
      
      my $ret_data = $ret_ndarray->data;
      
      unless ($ret_data is_compile_type object) {
        return 0;
      }
      
      unless ($ret_data == $data) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method dim : int () {
    
    {
      my $dim = [2, 3];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless (Array->equals_int($ret_ndarray->dim, [2, 3])) {
        return 0;
      }
      
      unless ($ret_ndarray->dim != $dim) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method set_dim : int () {
    {
      my $dim = [2, 3, 5];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      $ret_ndarray->set_dim([5, 3, 2]);
      unless (Array->equals_int($ret_ndarray->dim, [5, 3, 2])) {
        return 0;
      }
      
      $ret_ndarray->set_dim([5, 6]);
      unless (Array->equals_int($ret_ndarray->dim, [5, 6])) {
        return 0;
      }
      
      $ret_ndarray->set_dim([5, 6, 0]);
      unless (Array->equals_int($ret_ndarray->dim, [5, 6])) {
        return 0;
      }
      
      $ret_ndarray->set_dim([2, 3, 5, 1]);
      unless (Array->equals_int($ret_ndarray->dim, [2, 3, 5, 1])) {
        return 0;
      }
      
      # Exceptions
      {
        eval { $ret_ndarray->set_dim([2, 3, 4]); }
      }
      
      unless ($@) {
        return 0;
      }
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method is_dim_read_only : int () {
    
    {
      my $dim = [2, 3, 5];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_dim_read_only == 0) {
        return 0;
      }
      $ret_ndarray->make_dim_read_only;
      
      unless ($ret_ndarray->is_dim_read_only == 1) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method make_dim_read_only : int () {
    
    {
      my $dim = [2, 3, 5];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      $ret_ndarray->make_dim_read_only;
      
      eval { $ret_ndarray->set_dim([5, 3, 2]); }
      
      unless ($@) {
        return 0;
      }
    }
    
    $@ = undef;
    
    return 1;
  }
  static method nrow : int () {
    
    {
      {
        my $dim = [1];
        my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
        
        unless ($ret_ndarray->nrow == 1) {
          return 0;
        }
        
        unless ($ret_ndarray->ncol == 1) {
          return 0;
        }
      }
      
      {
        my $dim = [2];
        my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
        
        unless ($ret_ndarray->nrow == 2) {
          return 0;
        }
        
        unless ($ret_ndarray->ncol == 1) {
          return 0;
        }
      }
      
      {
        my $dim = [3, 2];
        my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
        
        unless ($ret_ndarray->nrow == 3) {
          return 0;
        }
        
        unless ($ret_ndarray->ncol == 2) {
          return 0;
        }
      }
      
      {
        my $dim = [3, 2, 1];
        my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
        
        unless ($ret_ndarray->nrow == 3) {
          return 0;
        }
        
        unless ($ret_ndarray->ncol == 2) {
          return 0;
        }
      }
    }
    
    return 1;
  }
  static method ncol : int () {
    
    {
      {
        my $dim = [1];
        my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
        
        unless ($ret_ndarray->nrow == 1) {
          return 0;
        }
        
        unless ($ret_ndarray->ncol == 1) {
          return 0;
        }
      }
      
      {
        my $dim = [2];
        my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
        
        unless ($ret_ndarray->nrow == 2) {
          return 0;
        }
        
        unless ($ret_ndarray->ncol == 1) {
          return 0;
        }
      }
      
      {
        my $dim = [3, 2];
        my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
        
        unless ($ret_ndarray->nrow == 3) {
          return 0;
        }
        
        unless ($ret_ndarray->ncol == 2) {
          return 0;
        }
      }
      
      {
        my $dim = [3, 2, 1];
        my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
        
        unless ($ret_ndarray->nrow == 3) {
          return 0;
        }
        
        unless ($ret_ndarray->ncol == 2) {
          return 0;
        }
      }
    }
    
    return 1;
  }
  
  static method length : int () {
    {
      my $dim = new int[0];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->length == 0) {
        return 0;
      }
    }
    
    {
      my $dim = [1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->length == 1) {
        return 0;
      }
    }
    
    {
      my $dim = [2, 3, 5];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->length == 30) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method is_empty : int () {
    
    {
      my $dim = new int[0];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_empty) {
        return 0;
      }
    }
    
    {
      my $dim = [1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_empty) {
        return 0;
      }
    }
    
    {
      my $dim = [2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_empty) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_empty) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2, 3];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_empty) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method is_scalar : int () {
    
    {
      my $dim = new int[0];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_scalar) {
        return 0;
      }
    }
    
    {
      my $dim = [1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_scalar) {
        return 0;
      }
    }
    
    {
      my $dim = [2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_scalar) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_scalar) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_scalar) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2, 3];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_scalar) {
        return 0;
      }
    }
    
    return 1;
  }
  static method is_vector : int () {
    
    {
      my $dim = new int[0];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_vector) {
        return 0;
      }
    }
    
    {
      my $dim = [1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_vector) {
        return 0;
      }
    }
    
    {
      my $dim = [2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_vector) {
        return 0;
      }
    }
    
    {
      my $dim = [2, 1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_vector) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_vector) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2, 3];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_vector) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method is_matrix : int () {
    
    {
      my $dim = new int[0];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [2, 1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2, 1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2, 3];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_matrix) {
        return 0;
      }
    }
    
    return 1;
  }
  static method is_square_matrix : int () {
    
    {
      my $dim = new int[0];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_square_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_square_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_square_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_square_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [2, 2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_square_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2, 3];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_square_matrix) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method drop_dim : int () {
    {
      my $dim = [2, 1, 3, 5, 1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      $ret_ndarray->drop_dim;
      
      unless (Array->equals_int($ret_ndarray->dim, [2, 3, 5])) {
        return 0;
      }
    }
    
    {
      my $dim = [2, 1, 3, 5, 1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      my $dim_index = 1;
      
      $ret_ndarray->drop_dim($dim_index);
      
      unless (Array->equals_int($ret_ndarray->dim, [2, 3, 5, 1])) {
        return 0;
      }
    }
    
    # Exceptions
    {
      {
        my $dim = [2, 1, 3, 5, 1];
        my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
        
        my $dim_index = 5;
        
        eval { $ret_ndarray->drop_dim($dim_index); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $dim = [2, 1, 3, 5, 1];
        my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
        
        my $dim_index = 0;
        
        eval { $ret_ndarray->drop_dim($dim_index); }
        
        unless ($@) {
          return 0;
        }
      }
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method expand_dim : int () {
    
    {
      my $dim = [2, 3, 5];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      $ret_ndarray->expand_dim;
      
      unless (Array->equals_int($ret_ndarray->dim, [2, 3, 5, 1])) {
        return 0;
      }
    }
    
    {
      my $dim = [2, 3, 5];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      my $dim_index = 3;
      
      $ret_ndarray->expand_dim($dim_index);
      
      unless (Array->equals_int($ret_ndarray->dim, [2, 3, 5, 1])) {
        return 0;
      }
    }
    
    {
      my $dim = [2, 3, 5];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      my $dim_index = 1;
      
      $ret_ndarray->expand_dim($dim_index);
      
      unless (Array->equals_int($ret_ndarray->dim, [2, 1, 3, 5])) {
        return 0;
      }
    }
    
    # Exceptions
    {
      {
        my $dim = [2, 3, 5];
        my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
        
        my $dim_index = 4;
        
        eval { $ret_ndarray->expand_dim($dim_index); }
        
        unless ($@) {
          return 0;
        }
      }
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method create_default_data : int () {
    
    # This method is tested in child classes.
    
    return 1;
  }
  
  static method elem_to_string : int () {
    
    # This method is tested in child classes.
    
    return 1;
  }
  
  static method elem_assign : int () {
    
    # This method is tested in child classes.
    
    return 1;
  }
  
  static method elem_clone : int () {
    
    # This method is tested in child classes.
    
    return 1;
  }
  
  static method elem_cmp : int () {
    
    # This method is tested in child classes.
    
    return 1;
  }
  
  static method to_string_ndarray : int () { return 1; }
  
  static method elem_size : int () {
    
    {
      unless (R::NDArray::String->new->elem_size == Fn->sizeof_native_pointer) {
        return 0;
      }
      
      unless (R::NDArray::Int->new->elem_size == 4) {
        return 0;
      }
      
      unless (R::NDArray::DoubleComplex->new->elem_size == 16) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method elem_type_name : int () {
    
    {
      unless (R::NDArray::Int->new->elem_type_name eq "int") {
        return 0;
      }
    }
    
    return 1;
  }
  static method is_numeric_ndarray : int () {
    
    {
      unless (R::NDArray::String->new->is_numeric_ndarray == 0) {
        return 0;
      }
      
      unless (R::NDArray::Int->new->is_numeric_ndarray == 1) {
        return 0;
      }
      
      unless (R::NDArray::DoubleComplex->new->is_numeric_ndarray == 0) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method is_mulnum_ndarray : int () {
    
    {
      unless (R::NDArray::String->new->is_mulnum_ndarray == 0) {
        return 0;
      }
      
      unless (R::NDArray::Int->new->is_mulnum_ndarray == 0) {
        return 0;
      }
      
      unless (R::NDArray::DoubleComplex->new->is_mulnum_ndarray == 1) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method is_any_numeric_ndarray : int () {
    
    {
      unless (R::NDArray::String->new->is_any_numeric_ndarray == 0) {
        return 0;
      }
      
      unless (R::NDArray::Int->new->is_any_numeric_ndarray == 1) {
        return 0;
      }
      
      unless (R::NDArray::DoubleComplex->new->is_any_numeric_ndarray == 1) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method is_object_ndarray : int () {
    
    {
      unless (R::NDArray::String->new->is_object_ndarray == 1) {
        return 0;
      }
      
      unless (R::NDArray::Int->new->is_object_ndarray == 0) {
        return 0;
      }
      
      unless (R::NDArray::DoubleComplex->new->is_object_ndarray == 0) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method clone : int () {
    {
      my $dim = [2, 3];
      my $data = [1, 2, 3, 4, 5, 6];
      my $ndarray = R::NDArray::Int->new({data => $data, dim => $dim});
      
      my $ret_ndarray = $ndarray->clone;
      
      unless (Array->equals_int($ret_ndarray->data, $data)){
        return 0;
      }
      
      if ($ret_ndarray->data == $data){
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, $dim)){
        return 0;
      }
      
    }
    
    {
      my $dim = [2, 3];
      my $data0 = "1";
      my $data = [$data0, "2", "3", "4", "5", "6"];
      my $ndarray = R::NDArray::String->new({data => $data, dim => $dim});
      
      my $ret_ndarray = $ndarray->clone;
      
      unless (Array->equals_string($ret_ndarray->data, $data)){
        return 0;
      }
      
      if ($ret_ndarray->data == $data){
        return 0;
      }
      
      if ($ret_ndarray->data->[0] == $data0){
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, $dim)){
        return 0;
      }
    }
    
    {
      my $dim = [2, 3];
      my $data0 = "1";
      my $data = [$data0, "2", "3", "4", "5", "6"];
      my $ndarray = R::NDArray::String->new({data => $data, dim => $dim});
      
      my $shallow = 1;
      my $ret_ndarray = $ndarray->clone($shallow);
      
      unless (Array->equals_string($ret_ndarray->data, $data)){
        return 0;
      }
      
      if ($ret_ndarray->data == $data){
        return 0;
      }
      
      unless ($ret_ndarray->data->[0] == $data0){
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, $dim)){
        return 0;
      }
    }
    
    return 1;
  }
  static method slice : int () {
    {
      my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      my $ret_ndarray = $ndarray->slice([IOP->c(0), IOP->c(0)]);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [1])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
        return 0;
      }
    }
    
    {
      my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      my $ret_ndarray = $ndarray->slice([IOP->c(1), IOP->c(0)]);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [2])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
        return 0;
      }
    }
    
    {
      my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      my $ret_ndarray = $ndarray->slice([IOP->c(2), IOP->c(0)]);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [3])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
        return 0;
      }
    }
    
    {
      my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      my $ret_ndarray = $ndarray->slice([IOP->c(0), IOP->c(1)]);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [4])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
        return 0;
      }
    }
    
    {
      my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      my $ret_ndarray = $ndarray->slice([IOP->c(1), IOP->c(1)]);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [5])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
        return 0;
      }
    }
    
    {
      my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      my $ret_ndarray = $ndarray->slice([IOP->c(2), IOP->c(1)]);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [6])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [1, 1])) {
        return 0;
      }
    }
    
    {
      my $ndarray = IOP->c(IOP->seq(1, 24), [4, 3, 2]);
      
      my $ret_ndarray = $ndarray->slice([IOP->c(3), IOP->c(2), IOP->c(1)]);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [24])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [1, 1, 1])) {
        return 0;
      }
    }
    
    {
      my $ndarray = IOP->c(IOP->seq(1, 24), [4, 3, 2]);
      
      my $ret_ndarray = $ndarray->slice([IOP->c(1), IOP->c(1), IOP->c(1)]);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [18])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [1, 1, 1])) {
        return 0;
      }
    }
    
    {
      my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      my $ret_ndarray = $ndarray->slice([IOP->seq(0, 1), IOP->c(0)]);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [1, 2])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [2, 1])) {
        return 0;
      }
    }
    
    {
      my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      my $ret_ndarray = $ndarray->slice([IOP->seq(0, 2), IOP->c(0)]);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [1, 2, 3])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [3, 1])) {
        return 0;
      }
    }
    
    {
      my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      my $ret_ndarray = $ndarray->slice([IOP->c(0), IOP->seq(0, 1)]);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [1, 4])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [1, 2])) {
        return 0;
      }
    }
    
    {
      my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      my $ret_ndarray = $ndarray->slice([IOP->seq(1, 2), IOP->seq(0, 1)]);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [2, 3, 5, 6])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [2, 2])) {
        return 0;
      }
    }
    
    {
      my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      my $ret_ndarray = $ndarray->slice([IOP->seq(0, 2), IOP->seq(0, 1)]);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [1, 2, 3, 4, 5, 6])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [3, 2])) {
        return 0;
      }
    }
    
    {
      my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      my $ret_ndarray = $ndarray->slice([IOP->undef, IOP->c(1)]);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [4, 5, 6])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [3, 1])) {
        return 0;
      }
    }
    
    {
      my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      my $ret_ndarray = $ndarray->slice([IOP->c(1)]);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [2, 5])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [1, 2])) {
        return 0;
      }
    }
    
    # Exceptions
    {
      {
        my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
        
        eval { $ndarray->slice([IOP->c(3), IOP->c(0)]); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
        
        eval { $ndarray->slice([IOP->c(0), IOP->c(2)]); }
        
        unless ($@) {
          return 0;
        }
      }
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method slice_set : int () {
    
    {
      my $ret_ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      $ret_ndarray->slice_set([IOP->c(0), IOP->c(0)], IOP->c(100));
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [100, 2, 3, 4, 5, 6])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [3, 2])) {
        return 0;
      }
    }
    
    {
      my $ret_ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      $ret_ndarray->slice_set([IOP->seq(0, 2), IOP->c(0)], IOP->c([100, 101, 102]));
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [100, 101, 102, 4, 5, 6])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [3, 2])) {
        return 0;
      }
    }
    
    {
      my $ret_ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      $ret_ndarray->slice_set([IOP->c(1), IOP->seq(0, 1)], IOP->c([100, 101], [1, 2]));
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [1, 100, 3, 4, 101, 6])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [3, 2])) {
        return 0;
      }
    }
    
    {
      my $ret_ndarray = IOP->c([1, 2, 3, 4, 5, 6], [3, 2]);
      
      $ret_ndarray->slice_set([IOP->c(1), IOP->seq(0, 1)], IOP->c([100, 101], [2, 1]));
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [1, 100, 3, 4, 101, 6])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [3, 2])) {
        return 0;
      }
    }
    
    {
      my $ret_ndarray = IOP->c(IOP->seq(1, 24), [4, 3, 2]);
      
      $ret_ndarray->slice_set([IOP->seq(0, 2), IOP->seq(0, 1)], IOP->c(IOP->seq(101, 112), [3, 2, 2]));
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [101, 102, 103, 4, 104, 105, 106, 8, 9, 10, 11, 12, 107, 108, 109, 16, 110, 111, 112, 20, 21, 22, 23, 24])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [4, 3, 2])) {
        return 0;
      }
    }
    
    # Exceptions
    {
      # Invalid dimension
      {
        my $ret_ndarray = IOP->c(IOP->seq(1, 24), [4, 3, 2]);
        
        eval { $ret_ndarray->slice_set([IOP->seq(0, 2), IOP->seq(0, 1)], IOP->c(IOP->seq(101, 112), [2, 3, 2])); }
        
        unless ($@) {
          return 0;
        }
      }
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method to_string : int () {
    
    {
      my $ret_ndarray = IOP->c(new int[0]);
      
      unless ($ret_ndarray->to_string eq "Empty") {
        return 0;
      }
    }
    
    {
      my $ret_ndarray = IOP->c([1, 2]);
      
      unless ($ret_ndarray->to_string eq "[0]\t1\n[1]\t2") {
        return 0;
      }
    }
    
    {
      my $ret_ndarray = IOP->c(IOP->seq(1, 6), [3, 2]);
      
      unless ($ret_ndarray->to_string eq "\x{09}[,0]\x{09}[,1]\x{09}\x{0A}[0]\x{09}1\x{09}4\x{0A}[1]\x{09}2\x{09}5\x{0A}[2]\x{09}3\x{09}6") {
        return 0;
      }
      
    }
    
    {
      my $ret_ndarray = IOP->c(IOP->seq(1, 24), [4, 3, 2]);
      
      unless ($ret_ndarray->to_string eq "[,,0]\x{0A}\x{09}[,0]\x{09}[,1]\x{09}[,2]\x{09}\x{0A}[0]\x{09}1\x{09}5\x{09}9\x{0A}[1]\x{09}2\x{09}6\x{09}10\x{0A}[2]\x{09}3\x{09}7\x{09}11\x{0A}[3]\x{09}4\x{09}8\x{09}12\x{0A}\x{0A}[,,1]\x{0A}\x{09}[,0]\x{09}[,1]\x{09}[,2]\x{09}\x{0A}[0]\x{09}13\x{09}17\x{09}21\x{0A}[1]\x{09}14\x{09}18\x{09}22\x{0A}[2]\x{09}15\x{09}19\x{09}23\x{0A}[3]\x{09}16\x{09}20\x{09}24") {
        return 0;
      }
    }
    
    {
      my $ret_ndarray = IOP->c(IOP->seq(1, 120), [5, 4, 3, 2]);
      
      unless ($ret_ndarray->to_string eq "[,,,0]\x{0A}[,,0]\x{0A}\x{09}[,0]\x{09}[,1]\x{09}[,2]\x{09}[,3]\x{09}\x{0A}[0]\x{09}1\x{09}6\x{09}11\x{09}16\x{0A}[1]\x{09}2\x{09}7\x{09}12\x{09}17\x{0A}[2]\x{09}3\x{09}8\x{09}13\x{09}18\x{0A}[3]\x{09}4\x{09}9\x{09}14\x{09}19\x{0A}[4]\x{09}5\x{09}10\x{09}15\x{09}20\x{0A}\x{0A}[,,1]\x{0A}\x{09}[,0]\x{09}[,1]\x{09}[,2]\x{09}[,3]\x{09}\x{0A}[0]\x{09}21\x{09}26\x{09}31\x{09}36\x{0A}[1]\x{09}22\x{09}27\x{09}32\x{09}37\x{0A}[2]\x{09}23\x{09}28\x{09}33\x{09}38\x{0A}[3]\x{09}24\x{09}29\x{09}34\x{09}39\x{0A}[4]\x{09}25\x{09}30\x{09}35\x{09}40\x{0A}\x{0A}[,,2]\x{0A}\x{09}[,0]\x{09}[,1]\x{09}[,2]\x{09}[,3]\x{09}\x{0A}[0]\x{09}41\x{09}46\x{09}51\x{09}56\x{0A}[1]\x{09}42\x{09}47\x{09}52\x{09}57\x{0A}[2]\x{09}43\x{09}48\x{09}53\x{09}58\x{0A}[3]\x{09}44\x{09}49\x{09}54\x{09}59\x{0A}[4]\x{09}45\x{09}50\x{09}55\x{09}60\x{0A}\x{0A}\x{0A}[,,,1]\x{0A}[,,0]\x{0A}\x{09}[,0]\x{09}[,1]\x{09}[,2]\x{09}[,3]\x{09}\x{0A}[0]\x{09}61\x{09}66\x{09}71\x{09}76\x{0A}[1]\x{09}62\x{09}67\x{09}72\x{09}77\x{0A}[2]\x{09}63\x{09}68\x{09}73\x{09}78\x{0A}[3]\x{09}64\x{09}69\x{09}74\x{09}79\x{0A}[4]\x{09}65\x{09}70\x{09}75\x{09}80\x{0A}\x{0A}[,,1]\x{0A}\x{09}[,0]\x{09}[,1]\x{09}[,2]\x{09}[,3]\x{09}\x{0A}[0]\x{09}81\x{09}86\x{09}91\x{09}96\x{0A}[1]\x{09}82\x{09}87\x{09}92\x{09}97\x{0A}[2]\x{09}83\x{09}88\x{09}93\x{09}98\x{0A}[3]\x{09}84\x{09}89\x{09}94\x{09}99\x{0A}[4]\x{09}85\x{09}90\x{09}95\x{09}100\x{0A}\x{0A}[,,2]\x{0A}\x{09}[,0]\x{09}[,1]\x{09}[,2]\x{09}[,3]\x{09}\x{0A}[0]\x{09}101\x{09}106\x{09}111\x{09}116\x{0A}[1]\x{09}102\x{09}107\x{09}112\x{09}117\x{0A}[2]\x{09}103\x{09}108\x{09}113\x{09}118\x{0A}[3]\x{09}104\x{09}109\x{09}114\x{09}119\x{0A}[4]\x{09}105\x{09}110\x{09}115\x{09}120") {
        return 0;
      }
      
    }
      
    return 1;
  }
  static method order : int () {
    {
      my $data = [1, 2, 3, 4, 5];
      
      my $ndarray = IOP->c($data);
      
      my $ret_ndarray = $ndarray->order;
      
      unless (Array->equals_int($ret_ndarray->data, [0, 1, 2, 3, 4])) {
        return 0;
      }
    }
    
    {
      my $data = [5, 4, 3, 2, 1];
      
      my $ndarray = IOP->c($data);
      
      my $ret_ndarray = $ndarray->order;
      
      unless (Array->equals_int($ret_ndarray->data, [4, 3, 2, 1, 0])) {
        return 0;
      }
    }
    
    {
      my $data = [2, 1, 3, 4, 5];
      
      my $ndarray = IOP->c($data);
      
      my $ret_ndarray = $ndarray->order;
      
      unless (Array->equals_int($ret_ndarray->data, [1, 0, 2, 3, 4])) {
        return 0;
      }
    }
    
    {
      my $data = [3, 1, 2];
      
      my $ndarray = IOP->c($data);
      
      my $ret_ndarray = $ndarray->order;
      
      unless (Array->equals_int($ret_ndarray->data, [1, 2, 0])) {
        return 0;
      }
    }
    
    {
      my $data = [3, 1, 2];
      
      my $ndarray = IOP->c($data);
      
      my $ret_ndarray = $ndarray->order;
      
      unless (Array->equals_int($ret_ndarray->data, [1, 2, 0])) {
        return 0;
      }
    }
    
    {
      my $data = [2, 1, 3];
      
      my $ndarray = IOP->c($data);
      
      my $ret_ndarray = $ndarray->order;
      
      unless (Array->equals_int($ret_ndarray->data, [1, 0, 2])) {
        return 0;
      }
    }
    
    {
      my $data = [30, 10, 20];
      
      my $ndarray = IOP->c($data);
      
      my $ret_ndarray = $ndarray->order;
      
      unless (Array->equals_int($ret_ndarray->data, [1, 2, 0])) {
        return 0;
      }
      
      $ndarray->set_order($ret_ndarray);
      
      unless (Array->equals_int($ndarray->data, [10, 20, 30])) {
        return 0;
      }
    }
    
    {
      my $data = [30, 10, 20];
      
      my $ret_ndarray = IOP->c($data);
      
      $ret_ndarray->sort_asc;
      
      unless (Array->equals_int($ret_ndarray->data, [10, 20, 30])) {
        return 0;
      }
    }
    
    {
      my $data = [30, 10, 20];
      
      my $ret_ndarray = IOP->c($data);
      
      $ret_ndarray->sort_desc;
      
      unless (Array->equals_int($ret_ndarray->data, [30, 20, 10])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method set_order : int () {
    
    {
      my $data = [1, 2, 3];
      my $ret_ndarray = IOP->c($data);
      
      $ret_ndarray->set_order(IOP->c([2, 0, 1]));
      
      unless (Array->equals_int($ret_ndarray->data, [3, 1, 2])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [3])){
        return 0;
      }
      
    }
    return 1;
  }
  
  static method sort_asc : int () {
    {
      my $data = [30, 10, 20];
      
      my $ret_ndarray = IOP->c($data);
      
      $ret_ndarray->sort_asc;
      
      unless (Array->equals_int($ret_ndarray->data, [10, 20, 30])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method sort_desc : int () {
    
    {
      my $data = [30, 10, 20];
      
      my $ret_ndarray = IOP->c($data);
      
      $ret_ndarray->sort_desc;
      
      unless (Array->equals_int($ret_ndarray->data, [30, 20, 10])) {
        return 0;
      }
    }
    
    return 1;
  }
}
