class TestCase::R::NDArray {
  
  use R::NDArray;
  use R::OP::Int as IOP;
  
  static method data : int () {
    
    {
      my $data = [1, 2];
      my $ret_ndarray = (R::NDArray)R::NDArray::Int->new({data => $data});
      
      my $ret_data = $ret_ndarray->data;
      
      unless ($ret_data is_compile_type object) {
        return 0;
      }
      
      unless ($ret_data == $data) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method dim : int () {
    
    {
      my $dim = [2, 3];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless (Array->equals_int($ret_ndarray->dim, [2, 3])) {
        return 0;
      }
      
      unless ($ret_ndarray->dim != $dim) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method set_dim : int () {
    {
      my $dim = [2, 3, 5];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      $ret_ndarray->set_dim([5, 3, 2]);
      unless (Array->equals_int($ret_ndarray->dim, [5, 3, 2])) {
        return 0;
      }
      
      $ret_ndarray->set_dim([5, 6]);
      unless (Array->equals_int($ret_ndarray->dim, [5, 6])) {
        return 0;
      }
      
      $ret_ndarray->set_dim([5, 6, 0]);
      unless (Array->equals_int($ret_ndarray->dim, [5, 6])) {
        return 0;
      }
      
      $ret_ndarray->set_dim([2, 3, 5, 1]);
      unless (Array->equals_int($ret_ndarray->dim, [2, 3, 5, 1])) {
        return 0;
      }
      
      # Exceptions
      {
        eval { $ret_ndarray->set_dim([2, 3, 4]); }
      }
      
      unless ($@) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method is_dim_read_only : int () {
    
    {
      my $dim = [2, 3, 5];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_dim_read_only == 0) {
        return 0;
      }
      $ret_ndarray->make_dim_read_only;
      
      unless ($ret_ndarray->is_dim_read_only == 1) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method make_dim_read_only : int () {
    
    {
      my $dim = [2, 3, 5];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      $ret_ndarray->make_dim_read_only;
      
      eval { $ret_ndarray->set_dim([5, 3, 2]); }
      
      unless ($@) {
        return 0;
      }
    }
    
    $@ = undef;
    
    return 1;
  }
  static method nrow : int () { return 1; }
  static method ncol : int () { return 1; }
  
  static method length : int () {
    {
      my $dim = new int[0];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->length == 0) {
        return 0;
      }
    }
    
    {
      my $dim = [1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->length == 1) {
        return 0;
      }
    }
    
    {
      my $dim = [2, 3, 5];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->length == 30) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method is_empty : int () {
    
    {
      my $dim = new int[0];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_empty) {
        return 0;
      }
    }
    
    {
      my $dim = [1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_empty) {
        return 0;
      }
    }
    
    {
      my $dim = [2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_empty) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_empty) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2, 3];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_empty) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method is_scalar : int () {
    
    {
      my $dim = new int[0];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_scalar) {
        return 0;
      }
    }
    
    {
      my $dim = [1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_scalar) {
        return 0;
      }
    }
    
    {
      my $dim = [2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_scalar) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_scalar) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_scalar) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2, 3];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_scalar) {
        return 0;
      }
    }
    
    return 1;
  }
  static method is_vector : int () {
    
    {
      my $dim = new int[0];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_vector) {
        return 0;
      }
    }
    
    {
      my $dim = [1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_vector) {
        return 0;
      }
    }
    
    {
      my $dim = [2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_vector) {
        return 0;
      }
    }
    
    {
      my $dim = [2, 1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_vector) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_vector) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2, 3];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_vector) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method is_matrix : int () {
    
    {
      my $dim = new int[0];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [2, 1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2, 1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2, 3];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_matrix) {
        return 0;
      }
    }
    
    return 1;
  }
  static method is_square_matrix : int () {
    
    {
      my $dim = new int[0];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_square_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [1];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_square_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_square_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_square_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [2, 2];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      unless ($ret_ndarray->is_square_matrix) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 2, 3];
      my $ret_ndarray = R::NDArray::Int->new({dim => $dim});
      
      if ($ret_ndarray->is_square_matrix) {
        return 0;
      }
    }
    
    return 1;
  }
  static method drop_dim : int () { return 1; }
  static method expand_dim : int () { return 1; }
  static method create_default_data : int () { return 1; }
  static method elem_to_string : int () { return 1; }
  static method elem_assign : int () { return 1; }
  static method elem_clone : int () { return 1; }
  static method elem_cmp : int () { return 1; }
  static method to_string_ndarray : int () { return 1; }
  static method elem_size : int () { return 1; }
  static method elem_type_name : int () { return 1; }
  static method is_numeric_ndarray : int () { return 1; }
  static method is_mulnum_ndarray : int () { return 1; }
  static method is_any_numeric_ndarray : int () { return 1; }
  static method is_object_ndarray : int () { return 1; }
  static method clone : int () { return 1; }
  static method slice : int () { return 1; }
  static method slice_set : int () { return 1; }
  static method to_string : int () { return 1; }
  static method order : int () { return 1; }
  static method set_order : int () { return 1; }
  static method sort_asc : int () { return 1; }
  static method sort_desc : int () { return 1; }
}
