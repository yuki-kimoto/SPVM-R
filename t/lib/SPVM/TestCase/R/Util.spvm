class TestCase::R::Util {
  
  use R::Util;
  
  static method calc_data_length : int () {
    
    Fn->defer(method : void () { $@ = undef; });
    
    {
      my $dim = new int[0];
      my $data_length = R::Util->calc_data_length($dim);
      
      unless ($data_length == 0) {
        return 0;
      }
    }
    
    {
      my $dim = [1];
      my $data_length = R::Util->calc_data_length($dim);
      
      unless ($data_length == 1) {
        return 0;
      }
    }
    
    {
      my $dim = [1, 1];
      my $data_length = R::Util->calc_data_length($dim);
      
      unless ($data_length == 1) {
        return 0;
      }
    }
    
    {
      my $dim = [2, 3, 4];
      my $data_length = R::Util->calc_data_length($dim);
      
      unless ($data_length == 24) {
        return 0;
      }
    }
    
    # Exceptions
    {
      {
        my $dim = [2, 3, 4];
        eval { R::Util->calc_data_length(undef); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $dim = [0];
        eval { R::Util->calc_data_length($dim); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method normalize_dim : int () { return 1; }
  static method check_length : int () { return 1; }
  static method drop_dim : int () { return 1; }
  static method expand_dim : int () { return 1; }
  static method equals_dim : int () { return 1; }
  static method equals_dropped_dim : int () { return 1; }
}
