class TestCase::R::DataFrame {
  
  use R::OP::Int as IOP;
  use R::OP::String as STROP;
  use R::DataFrame;
  
  static method new : int () {
    
    {
      my $data_frame = R::DataFrame->new;
      
      unless ($data_frame is_type R::DataFrame) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method colnames : int () {
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name0", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name1", IOP->c([1, 2, 3]));
      
      my $colnames = $data_frame->colnames;
      
      unless (Array->equals_string($data_frame->colnames, ["Name0", "Name1"])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method exists_col : int () {
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name0", IOP->c([1, 2, 3]));
      
      unless ($data_frame->exists_col("Name0")) {
        return 0;
      }
      
      if ($data_frame->exists_col("Name1")) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method colname : int () {
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name0", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name1", IOP->c([1, 2, 3]));
      
      my $colname = $data_frame->colname(1);
      
      unless ($colname eq "Name1") {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method colindex : int () { 
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name0", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name1", IOP->c([1, 2, 3]));
      
      my $colindex = $data_frame->colindex("Name1");
      
      unless ($colindex == 1) {
        return 0;
      }
    }
    
    # Exceptions
    {
      my $data_frame = R::DataFrame->new;
      
      eval { $data_frame->colindex("Name1"); }
      
      unless ($@) {
        return 0;
      }
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method col_by_index : int () {
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name0", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name1", my $ndarray = IOP->c([1, 2, 3]));
      
      my $ret_ndarray = $data_frame->col_by_index(1);
      
      unless ($ret_ndarray == $ndarray) {
        return 0;
      }
    }
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name0", my $ndarray = IOP->c([1, 2, 3]));
      $data_frame->set_col("Name1", IOP->c([1, 2, 3]));
      
      my $ret_ndarray = $data_frame->col_by_index(0);
      
      unless ($ret_ndarray == $ndarray) {
        return 0;
      }
    }
    
    # Exceptions
    {
      {
        my $data_frame = R::DataFrame->new;
        
        $data_frame->set_col("Name0", IOP->c([1, 2, 3]));
        $data_frame->set_col("Name1", IOP->c([1, 2, 3]));
        
        eval { $data_frame->col_by_index(-1); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $data_frame = R::DataFrame->new;
        
        $data_frame->set_col("Name0", IOP->c([1, 2, 3]));
        $data_frame->set_col("Name1", IOP->c([1, 2, 3]));
        
        eval { $data_frame->col_by_index(2); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method first_col : int () {
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name0", my $ndarray = IOP->c([1, 2, 3]));
      $data_frame->set_col("Name1", IOP->c([1, 2, 3]));
      
      my $ret_ndarray = $data_frame->first_col;
      
      unless ($ret_ndarray == $ndarray) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method col : int () {
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name0", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name1", my $ndarray = IOP->c([1, 2, 3]));
      
      my $ret_ndarray = $data_frame->col("Name1");
      
      unless ($ret_ndarray == $ndarray) {
        return 0;
      }
    }
    
    # Exceptions
    {
      {
        my $data_frame = R::DataFrame->new;
        
        eval { $data_frame->col("Name0"); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method set_col : int () {
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name1", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name2", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name3", IOP->c([1, 2, 3]));
      
      unless (Array->equals_string($data_frame->colnames, ["Name1", "Name2", "Name3"])) {
        return 0;
      }
      
      unless (Array->equals_string($data_frame->colnames, ["Name1", "Name2", "Name3"])) {
        return 0;
      }
      
      unless ($data_frame->exists_col("Name1")) {
        return 0;
      }
      
      unless ($data_frame->exists_col("Name2")) {
        return 0;
      }
      
      unless ($data_frame->exists_col("Name3")) {
        return 0;
      }
      
      unless (Array->equals_string($data_frame->colnames, ["Name1", "Name2", "Name3"])) {
        return 0;
      }
      
      $data_frame->insert_col("Name4", IOP->c([1, 2, 3]));
      
      unless (Array->equals_string($data_frame->colnames, ["Name1", "Name2", "Name3", "Name4"])) {
        return 0;
      }
      
      $data_frame->insert_col("Name0", IOP->c([1, 2, 3]), "Name1");
      
      unless (Array->equals_string($data_frame->colnames, ["Name0", "Name1", "Name2", "Name3", "Name4"])) {
        return 0;
      }
      
      $data_frame->remove_col("Name0");
      
      unless (Array->equals_string($data_frame->colnames, ["Name1", "Name2", "Name3", "Name4"])) {
        return 0;
      }
      
      $data_frame->remove_col("Name4");
      
      unless (Array->equals_string($data_frame->colnames, ["Name1", "Name2", "Name3"])) {
        return 0;
      }
      
      $data_frame->set_col("Name2", IOP->c([1, 2, 3]));
      
      unless (Array->equals_string($data_frame->colnames, ["Name1", "Name2", "Name3"])) {
        return 0;
      }
    }
    
    # Exceptions
    {
      {
        my $data_frame = R::DataFrame->new;
        
        eval { $data_frame->col("Name0"); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method insert_col : int () {
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name1", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name2", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name3", IOP->c([1, 2, 3]));
      
      unless (Array->equals_string($data_frame->colnames, ["Name1", "Name2", "Name3"])) {
        return 0;
      }
      
      unless (Array->equals_string($data_frame->colnames, ["Name1", "Name2", "Name3"])) {
        return 0;
      }
      
      unless ($data_frame->exists_col("Name1")) {
        return 0;
      }
      
      unless ($data_frame->exists_col("Name2")) {
        return 0;
      }
      
      unless ($data_frame->exists_col("Name3")) {
        return 0;
      }
      
      unless (Array->equals_string($data_frame->colnames, ["Name1", "Name2", "Name3"])) {
        return 0;
      }
      
      $data_frame->insert_col("Name4", IOP->c([1, 2, 3]));
      
      unless (Array->equals_string($data_frame->colnames, ["Name1", "Name2", "Name3", "Name4"])) {
        return 0;
      }
      
      $data_frame->insert_col("Name0", IOP->c([1, 2, 3]), "Name1");
      
      unless (Array->equals_string($data_frame->colnames, ["Name0", "Name1", "Name2", "Name3", "Name4"])) {
        return 0;
      }
      
      $data_frame->remove_col("Name0");
      
      unless (Array->equals_string($data_frame->colnames, ["Name1", "Name2", "Name3", "Name4"])) {
        return 0;
      }
      
      $data_frame->remove_col("Name4");
      
      unless (Array->equals_string($data_frame->colnames, ["Name1", "Name2", "Name3"])) {
        return 0;
      }
      
      $data_frame->set_col("Name2", IOP->c([1, 2, 3]));
      
      unless (Array->equals_string($data_frame->colnames, ["Name1", "Name2", "Name3"])) {
        return 0;
      }
    }
    
    # Exceptions
    {
      {
        my $data_frame = R::DataFrame->new;
        
        eval { $data_frame->insert_col("", IOP->c([1, 2, 3])); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $data_frame = R::DataFrame->new;
        
        eval { $data_frame->insert_col(undef, IOP->c([1, 2, 3])); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $data_frame = R::DataFrame->new;
        
        eval { $data_frame->insert_col("Name0", undef); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $data_frame = R::DataFrame->new;
        
        $data_frame->insert_col("Name0", IOP->c([1, 2, 3]));
        
        eval { $data_frame->insert_col("Name1", IOP->c([1, 2, 3], [1, 3])); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method remove_col : int () {
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name0", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name1", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name2", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name3", IOP->c([1, 2, 3]));
      $data_frame->insert_col("Name4", IOP->c([1, 2, 3]));
      
      $data_frame->remove_col("Name0");
      
      unless (Array->equals_string($data_frame->colnames, ["Name1", "Name2", "Name3", "Name4"])) {
        return 0;
      }
      
      $data_frame->remove_col("Name4");
      
      unless (Array->equals_string($data_frame->colnames, ["Name1", "Name2", "Name3"])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method ncol : int () {
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name0", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name1", IOP->c([1, 2, 3]));
      
      unless ($data_frame->ncol == 2) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method nrow : int () {
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name0", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name1", IOP->c([1, 2, 3]));
      
      unless ($data_frame->nrow == 3) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method clone : int () {
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name0", my $ndarray0 = IOP->c([1, 2, 3]));
      $data_frame->set_col("Name1", my $ndarray1 = IOP->c([4, 5, 6]));
      
      my $ret_data_frame = $data_frame->clone;
      
      if ($ret_data_frame->col_by_index(0) == $ndarray0) {
        return 0;
      }
      
      if ($ret_data_frame->col_by_index(1) == $ndarray1) {
        return 0;
      }
      
      unless (Array->equals_int($ret_data_frame->col_by_index(0)->(R::NDArray::Int)->data, $ndarray0->data)) {
        return 0;
      }
      
      unless (Array->equals_int($ret_data_frame->col_by_index(1)->(R::NDArray::Int)->data, $ndarray1->data)) {
        return 0;
      }
    }
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name0", my $ndarray0 = STROP->c([(string)1, 2, 3]));
      $data_frame->set_col("Name1", my $ndarray1 = STROP->c([(string)4, 5, 6]));
      
      my $shallow = 0;
      my $ret_data_frame = $data_frame->clone($shallow);
      
      if ($ret_data_frame->col_by_index(0) == $ndarray0) {
        return 0;
      }
      
      if ($ret_data_frame->col_by_index(1) == $ndarray1) {
        return 0;
      }
      
      unless (Array->equals_string($ret_data_frame->col_by_index(0)->(R::NDArray::String)->data, $ndarray0->data)) {
        return 0;
      }
      
      unless (Array->equals_string($ret_data_frame->col_by_index(1)->(R::NDArray::String)->data, $ndarray1->data)) {
        return 0;
      }
      
      if ($ret_data_frame->col_by_index(0)->(R::NDArray::String)->data->[0] == $ndarray0->data->[0]) {
        return 0;
      }
    }
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name0", my $ndarray0 = STROP->c([(string)1, 2, 3]));
      $data_frame->set_col("Name1", my $ndarray1 = STROP->c([(string)4, 5, 6]));
      
      my $shallow = 1;
      my $ret_data_frame = $data_frame->clone($shallow);
      
      if ($ret_data_frame->col_by_index(0) == $ndarray0) {
        return 0;
      }
      
      if ($ret_data_frame->col_by_index(1) == $ndarray1) {
        return 0;
      }
      
      unless (Array->equals_string($ret_data_frame->col_by_index(0)->(R::NDArray::String)->data, $ndarray0->data)) {
        return 0;
      }
      
      unless (Array->equals_string($ret_data_frame->col_by_index(1)->(R::NDArray::String)->data, $ndarray1->data)) {
        return 0;
      }
      
      unless ($ret_data_frame->col_by_index(0)->(R::NDArray::String)->data->[0] == $ndarray0->data->[0]) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method to_string : int () {
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name1", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name2", IOP->c([4, 5, 6]));
      
      unless ($data_frame->to_string eq "Name1\x{09}Name2\x{0A}1\x{09}4\x{0A}2\x{09}5\x{0A}3\x{09}6\x{0A}") {
        return 0;
      }
      
    }
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name1", IOP->c([1, 2, 3], [1, 3]));
      $data_frame->set_col("Name2", IOP->c([4, 5, 6], [1, 3]));
      
      unless ($data_frame->to_string eq "Name1\x{0A}\x{09}[,0][,1]\x{09}[,2]\x{09}\x{0A}[0]\x{09}1\x{09}2\x{09}3\x{0A}\x{0A}Name2\x{0A}\x{09}[,0][,1]\x{09}[,2]\x{09}\x{0A}[0]\x{09}4\x{09}5\x{09}6\x{0A}\x{0A}") {
        return 0;
      }
      
    }
    
    return 1;
  }
  
  static method slice : int () {
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name1", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name2", my $col2 = IOP->c([4, 5, 6]));
      $data_frame->set_col("Name3", my $col3 = IOP->c([7, 8, 9]));
      
      my $ret_col = $data_frame->col("Name2");
      
      unless ($ret_col == $col2) {
        return 0;
      }
      
      my $slice_data_frame = $data_frame->slice(["Name2", "Name3"], [IOP->c([1, 2])]);
      
      unless ($slice_data_frame is_type R::DataFrame) {
        return 0;
      }
      
      unless (Array->equals_string($slice_data_frame->colnames, ["Name2", "Name3"])) {
        return 0;
      }
      
      unless (Array->equals_int($slice_data_frame->col("Name2")->(R::NDArray::Int)->data, [5, 6])) {
        return 0;
      }
      
      unless (Array->equals_int($slice_data_frame->col("Name3")->(R::NDArray::Int)->data, [8, 9])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method set_order : int () {
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name1", IOP->c([1, 2, 3]));
      $data_frame->set_col("Name2", my $col2 = IOP->c([4, 5, 6]));
      $data_frame->set_col("Name3", my $col3 = IOP->c([7, 8, 9]));
      
      $data_frame->set_order(IOP->c([2, 0, 1]));
      
      unless (Array->equals_int($data_frame->col("Name1")->(R::NDArray::Int)->data, [3, 1, 2])) {
        return 0;
      }
      
      unless (Array->equals_int($data_frame->col("Name2")->(R::NDArray::Int)->data, [6, 4, 5])) {
        return 0;
      }
      
    }
    
    return 1;
  }
  
  static method sort : int () {
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name1", IOP->c([3, 3, 1, 1, 2, 2]));
      $data_frame->set_col("Name2", my $col2 = IOP->c([5, 6, 3, 4, 1, 2]));
      
      $data_frame->sort(["Name2"]);
      
      unless (Array->equals_int($data_frame->col("Name1")->(R::NDArray::Int)->data, [2, 2, 1, 1, 3, 3])) {
        return 0;
      }
      
      unless (Array->equals_int($data_frame->col("Name2")->(R::NDArray::Int)->data, [1, 2, 3, 4, 5, 6])) {
        return 0;
      }
      
    }
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name1", IOP->c([3, 3, 1, 1, 2, 2]));
      $data_frame->set_col("Name2", my $col2 = IOP->c([5, 6, 3, 4, 1, 2]));
      
      $data_frame->sort(["Name2 desc"]);
      
      unless (Array->equals_int($data_frame->col("Name1")->(R::NDArray::Int)->data, [3, 3, 1, 1, 2, 2])) {
        return 0;
      }
      
      unless (Array->equals_int($data_frame->col("Name2")->(R::NDArray::Int)->data, [6, 5, 4, 3, 2, 1])) {
        return 0;
      }
      
    }
    
    return 1;
  }
  
  static method order : int () {
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name1", IOP->c([3, 3, 1, 1, 2, 2]));
      $data_frame->set_col("Name2", my $col2 = IOP->c([5, 6, 3, 4, 1, 2]));
      
      my $order_ndarray = $data_frame->order(["Name2"]);
      
      unless (Array->equals_int($order_ndarray->data, [4, 5, 2, 3, 0, 1])) {
        return 0;
      }
      
      $data_frame->set_order($order_ndarray);
      
      unless (Array->equals_int($data_frame->col("Name1")->(R::NDArray::Int)->data, [2, 2, 1, 1, 3, 3])) {
        return 0;
      }
      
      unless (Array->equals_int($data_frame->col("Name2")->(R::NDArray::Int)->data, [1, 2, 3, 4, 5, 6])) {
        return 0;
      }
      
    }
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name1", IOP->c([3, 3, 1, 1, 2, 2]));
      $data_frame->set_col("Name2", my $col2 = IOP->c([5, 6, 3, 4, 1, 2]));
      
      my $order_ndarray = $data_frame->order(["Name2 desc"]);
      
      unless (Array->equals_int($order_ndarray->data, [1, 0, 3, 2, 5, 4])) {
        return 0;
      }
      
      $data_frame->set_order($order_ndarray);
      
      unless (Array->equals_int($data_frame->col("Name1")->(R::NDArray::Int)->data, [3, 3, 1, 1, 2, 2])) {
        return 0;
      }
      
      unless (Array->equals_int($data_frame->col("Name2")->(R::NDArray::Int)->data, [6, 5, 4, 3, 2, 1])) {
        return 0;
      }
      
    }
    
    {
      my $data_frame = R::DataFrame->new;
      
      $data_frame->set_col("Name1", IOP->c([3, 3, 1, 1, 2, 2]));
      $data_frame->set_col("Name2", my $col2 = IOP->c([5, 6, 3, 4, 1, 2]));
      
      my $order_ndarray = $data_frame->order(["Name1", "Name2 desc"]);
      
      unless (Array->equals_int($order_ndarray->data, [3, 2, 5, 4, 1, 0])) {
        return 0;
      }
      
      $data_frame->set_order($order_ndarray);
      
      unless (Array->equals_int($data_frame->col("Name1")->(R::NDArray::Int)->data, [1, 1, 2, 2, 3, 3])) {
        return 0;
      }
      
      unless (Array->equals_int($data_frame->col("Name2")->(R::NDArray::Int)->data, [4, 3, 2, 1, 6, 5])) {
        return 0;
      }
      
    }
    
    # Exceptions
    {
      {
        my $data_frame = R::DataFrame->new;
        
        $data_frame->set_col("Name1", IOP->c([3, 3, 1, 1, 2, 2]));
        $data_frame->set_col("Name2", my $col2 = IOP->c([5, 6, 3, 4, 1, 2]));
        
        eval { $data_frame->order(["Name2 desc"]); }
      }
      
      {
        my $data_frame = R::DataFrame->new;
        
        $data_frame->set_col("Name1", IOP->c([3, 3, 1, 1, 2, 2]));
        $data_frame->set_col("Name2", my $col2 = IOP->c([5, 6, 3, 4, 1, 2]));
        
        eval { $data_frame->order(undef); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $data_frame = R::DataFrame->new;
        
        eval { $data_frame->order(["Name2 desc"]); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $data_frame = R::DataFrame->new;
        
        $data_frame->set_col("Name1", IOP->c([3, 3, 1, 1, 2, 2], [2, 3]));
        
        eval { $data_frame->order(["Name1"]); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $data_frame = R::DataFrame->new;
        
        $data_frame->set_col("Name1", IOP->c([3, 3, 1, 1, 2, 2]));
        
        eval { $data_frame->order(["Name2"]); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $data_frame = R::DataFrame->new;
        
        $data_frame->set_col("Name1", IOP->c([3, 3, 1, 1, 2, 2]));
        
        eval { $data_frame->order(["Name1 dasc"]); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    $@ = undef;
    
    return 1;
  }
  
}
