class TestCase::R::OP::Time::Piece {
  
  use Array;
  
  use R::OP::Time::Piece as TCOP;
  use R::OP::String as STROP;
  
  static method c : int () {
    
    {
      my $ret_ndarray = TCOP->c((string)"2000-01-01");
      
      unless ($ret_ndarray is_type R::NDArray::Time::Piece) {
        return 0;
      }
      
      unless (Array->equals_string(STROP->substr($ret_ndarray->to_string_ndarray, 0, 10)->data, [(string)"2000-01-01"])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [1])) {
        return 0;
      }
    }
    
    {
      my $data = [(string)"2000-01-01", "2000-01-02"];
      my $ret_ndarray = TCOP->c($data);
      
      unless ($ret_ndarray is_type R::NDArray::Time::Piece) {
        return 0;
      }
      
      unless (Array->equals_string(STROP->substr($ret_ndarray->to_string_ndarray, 0, 10)->data, [(string)"2000-01-01", "2000-01-02"])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [2])) {
        return 0;
      }
    }
    
    {
      my $data = [(string)"2000-01-01", "2000-01-02"];
      my $ret_ndarray = TCOP->c(TCOP->c($data));
      
      unless ($ret_ndarray is_type R::NDArray::Time::Piece) {
        return 0;
      }
      
      unless (Array->equals_string(STROP->substr($ret_ndarray->to_string_ndarray, 0, 10)->data, [(string)"2000-01-01", "2000-01-02"])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [2])) {
        return 0;
      }
    }
    
    {
      my $data = [(string)"2000-01-01", "2000-01-02"];
      my $ret_ndarray = TCOP->c(TCOP->c($data), [1, 2]);
      
      unless ($ret_ndarray is_type R::NDArray::Time::Piece) {
        return 0;
      }
      
      unless (Array->equals_string(STROP->substr($ret_ndarray->to_string_ndarray, 0, 10)->data, [(string)"2000-01-01", "2000-01-02"])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [1, 2])) {
        return 0;
      }
    }
    
    # Exceptions
    {
      {
        eval { TCOP->c(true); }
        
        unless ($@) {
          return 0;
        }
      }
    }
    
    return 1;
  }
  
  static method eq : int () {
    
    my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01"], [1, 2]);
    
    my $y_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-02"], [1, 2]);
    
    my $ret_ndarray = TCOP->eq($x_ndarray, $y_ndarray);
    
    unless ($ret_ndarray is_type R::NDArray::Int) {
      return 0;
    }
    
    unless (Array->equals_int($ret_ndarray->data, [1, 0])) {
      return 0;
    }
    
    unless (Array->equals_int($ret_ndarray->dim, [1, 2])) {
      return 0;
    }
    
    # Exceptions
    {
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-02"], [1, 2]);
        
        my $y_ndarray = TCOP->c([(string)"2000-01-03", "2000-01-04"], [1, 2]);
        
        eval { TCOP->eq(undef, $y_ndarray); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-02"], [1, 2]);
        
        my $y_ndarray = TCOP->c([(string)"2000-01-03", "2000-01-04"], [1, 2]);
        
        eval { TCOP->eq($x_ndarray, undef); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-02"], [1, 2]);
        
        my $y_ndarray = TCOP->c([(string)"2000-01-03", "2000-01-04"], [2, 1]);
        
        eval { TCOP->eq($x_ndarray, $y_ndarray); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method ne : int () {
    
    my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01"], [1, 2]);
    
    my $y_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-02"], [1, 2]);
    
    my $ret_ndarray = TCOP->ne($x_ndarray, $y_ndarray);
    
    unless ($ret_ndarray is_type R::NDArray::Int) {
      return 0;
    }
    
    unless (Array->equals_int($ret_ndarray->data, [0, 1])) {
      return 0;
    }
    
    unless (Array->equals_int($ret_ndarray->dim, [1, 2])) {
      return 0;
    }
    
    # Exceptions
    {
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-02"], [1, 2]);
        
        my $y_ndarray = TCOP->c([(string)"2000-01-03", "2000-01-04"], [1, 2]);
        
        eval { TCOP->ne(undef, $y_ndarray); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-02"], [1, 2]);
        
        my $y_ndarray = TCOP->c([(string)"2000-01-03", "2000-01-04"], [1, 2]);
        
        eval { TCOP->ne($x_ndarray, undef); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-02"], [1, 2]);
        
        my $y_ndarray = TCOP->c([(string)"2000-01-03", "2000-01-04"], [2, 1]);
        
        eval { TCOP->ne($x_ndarray, $y_ndarray); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method gt : int () {
    
    my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01", "2000-01-01"], [1, 3]);
    
    my $y_ndarray = TCOP->c([(string)"1999-12-31", "2000-01-01", "2000-01-02"], [1, 3]);
    
    my $ret_ndarray = TCOP->gt($x_ndarray, $y_ndarray);
    
    unless ($ret_ndarray is_type R::NDArray::Int) {
      return 0;
    }
    
    unless (Array->equals_int($ret_ndarray->data, [1, 0, 0])) {
      return 0;
    }
    
    unless (Array->equals_int($ret_ndarray->dim, [1, 3])) {
      return 0;
    }
    
    # Exceptions
    {
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01", "2000-01-01"], [1, 3]);
        
        my $y_ndarray = TCOP->c([(string)"1999-12-31", "2000-01-01", "2000-01-02"], [1, 3]);
        
        eval { TCOP->gt(undef, $y_ndarray); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01", "2000-01-01"], [1, 3]);
        
        my $y_ndarray = TCOP->c([(string)"1999-12-31", "2000-01-01", "2000-01-02"], [1, 3]);
        
        eval { TCOP->gt($x_ndarray, undef); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01", "2000-01-01"], [1, 3]);
        
        my $y_ndarray = TCOP->c([(string)"1999-12-31", "2000-01-01", "2000-01-02"], [3, 1]);
        
        eval { TCOP->gt($x_ndarray, $y_ndarray); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method ge : int () {
    
    my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01", "2000-01-01"], [1, 3]);
    
    my $y_ndarray = TCOP->c([(string)"1999-12-31", "2000-01-01", "2000-01-02"], [1, 3]);
    
    my $ret_ndarray = TCOP->ge($x_ndarray, $y_ndarray);
    
    unless ($ret_ndarray is_type R::NDArray::Int) {
      return 0;
    }
    
    unless (Array->equals_int($ret_ndarray->data, [1, 1, 0])) {
      return 0;
    }
    
    unless (Array->equals_int($ret_ndarray->dim, [1, 3])) {
      return 0;
    }
    
    # Exceptions
    {
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01", "2000-01-01"], [1, 3]);
        
        my $y_ndarray = TCOP->c([(string)"1999-12-31", "2000-01-01", "2000-01-02"], [1, 3]);
        
        eval { TCOP->ge(undef, $y_ndarray); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01", "2000-01-01"], [1, 3]);
        
        my $y_ndarray = TCOP->c([(string)"1999-12-31", "2000-01-01", "2000-01-02"], [1, 3]);
        
        eval { TCOP->ge($x_ndarray, undef); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01", "2000-01-01"], [1, 3]);
        
        my $y_ndarray = TCOP->c([(string)"1999-12-31", "2000-01-01", "2000-01-02"], [3, 1]);
        
        eval { TCOP->ge($x_ndarray, $y_ndarray); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method lt : int () {
    
    my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01", "2000-01-01"], [1, 3]);
    
    my $y_ndarray = TCOP->c([(string)"1999-12-31", "2000-01-01", "2000-01-02"], [1, 3]);
    
    my $ret_ndarray = TCOP->lt($x_ndarray, $y_ndarray);
    
    unless ($ret_ndarray is_type R::NDArray::Int) {
      return 0;
    }
    
    unless (Array->equals_int($ret_ndarray->data, [0, 0, 1])) {
      return 0;
    }
    
    unless (Array->equals_int($ret_ndarray->dim, [1, 3])) {
      return 0;
    }
    
    # Exceptions
    {
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01", "2000-01-01"], [1, 3]);
        
        my $y_ndarray = TCOP->c([(string)"1999-12-31", "2000-01-01", "2000-01-02"], [1, 3]);
        
        eval { TCOP->lt(undef, $y_ndarray); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01", "2000-01-01"], [1, 3]);
        
        my $y_ndarray = TCOP->c([(string)"1999-12-31", "2000-01-01", "2000-01-02"], [1, 3]);
        
        eval { TCOP->lt($x_ndarray, undef); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01", "2000-01-01"], [1, 3]);
        
        my $y_ndarray = TCOP->c([(string)"1999-12-31", "2000-01-01", "2000-01-02"], [3, 1]);
        
        eval { TCOP->lt($x_ndarray, $y_ndarray); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method le : int () {
    
    my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01", "2000-01-01"], [1, 3]);
    
    my $y_ndarray = TCOP->c([(string)"1999-12-31", "2000-01-01", "2000-01-02"], [1, 3]);
    
    my $ret_ndarray = TCOP->le($x_ndarray, $y_ndarray);
    
    unless ($ret_ndarray is_type R::NDArray::Int) {
      return 0;
    }
    
    unless (Array->equals_int($ret_ndarray->data, [0, 1, 1])) {
      return 0;
    }
    
    unless (Array->equals_int($ret_ndarray->dim, [1, 3])) {
      return 0;
    }
    
    # Exceptions
    {
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01", "2000-01-01"], [1, 3]);
        
        my $y_ndarray = TCOP->c([(string)"1999-12-31", "2000-01-01", "2000-01-02"], [1, 3]);
        
        eval { TCOP->le(undef, $y_ndarray); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01", "2000-01-01"], [1, 3]);
        
        my $y_ndarray = TCOP->c([(string)"1999-12-31", "2000-01-01", "2000-01-02"], [1, 3]);
        
        eval { TCOP->le($x_ndarray, undef); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-01", "2000-01-01"], [1, 3]);
        
        my $y_ndarray = TCOP->c([(string)"1999-12-31", "2000-01-01", "2000-01-02"], [3, 1]);
        
        eval { TCOP->le($x_ndarray, $y_ndarray); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method rep : int () {
    
    my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-02"]);
    
    my $ret_ndarray = TCOP->rep($x_ndarray, 2);
    
    unless (Array->equals_string(STROP->substr($ret_ndarray->to_string_ndarray, 0, 10)->data, [(string)"2000-01-01", "2000-01-02", "2000-01-01", "2000-01-02"])) {
      return 0;
    }
    
    unless (Array->equals_int($ret_ndarray->dim, [4])) {
      return 0;
    }
    
    return 1;
  }
  
  static method rep_length : int () {
    
    my $x_ndarray = TCOP->c([(string)"2000-01-01", "2000-01-02"]);
    
    my $ret_ndarray = TCOP->rep_length($x_ndarray, 4);
    
    unless (Array->equals_string(STROP->substr($ret_ndarray->to_string_ndarray, 0, 10)->data, [(string)"2000-01-01", "2000-01-02", "2000-01-01", "2000-01-02"])) {
      return 0;
    }
    
    unless (Array->equals_int($ret_ndarray->dim, [4])) {
      return 0;
    }
    
    return 1;
  }
  
}
