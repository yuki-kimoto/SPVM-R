class TestCase::R::OP::Matrix::Double {
  
  use R::OP::Double as DOP;
  use R::OP::Matrix::Double as MDOP;
  
  static method matrix : int () {
    
    {
      {
        my $seq_ndarray = DOP->seq(1, 6);
        
        my $nrow = 3;
        my $ncol = 2;
        my $ret_ndarray = MDOP->matrix($seq_ndarray, $nrow, $ncol);
        
        unless ($ret_ndarray is_type R::NDArray::Double) {
          return 0;
        }
        
        unless ($ret_ndarray->data == $seq_ndarray->data) {
          return 0;
        }
        
        unless (Array->equals_int($ret_ndarray->dim, [$nrow, $ncol])) {
          return 0;
        }
      }
      
      {
        my $data = [(double)1, 2, 3, 4, 5, 6];
        my $nrow = 3;
        my $ncol = 2;
        my $ret_ndarray = MDOP->matrix($data, $nrow, $ncol);
        
        unless ($ret_ndarray is_type R::NDArray::Double) {
          return 0;
        }
        
        unless ($ret_ndarray->data == $data) {
          return 0;
        }
        
        unless (Array->equals_int($ret_ndarray->dim, [$nrow, $ncol])) {
          return 0;
        }
      }
    }
    
    return 1;
  }
  
  static method matrix_byrow : int () {
    
    {
      my $seq_ndarray = DOP->seq(1, 6);
      
      my $nrow = 3;
      my $ncol = 2;
      my $ret_ndarray = MDOP->matrix_byrow($seq_ndarray, $nrow, $ncol);
      
      unless ($ret_ndarray is_type R::NDArray::Double) {
        return 0;
      }
      
      unless (Array->equals_double($ret_ndarray->data, [(double)1, 3, 5, 2, 4, 6])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [$nrow, $ncol])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method cbind : int () { return 1; }
  static method rbind : int () { return 1; }
  
  static method diag : int () {
    
    {
      my $seq_ndarray = DOP->seq(1, 3);
      
      my $x_ndarray = MDOP->diag($seq_ndarray);
      
      my $ret_ndarray = MDOP->t($x_ndarray);
      
      unless ($ret_ndarray is_type R::NDArray::Double) {
        return 0;
      }
      
      unless (Array->equals_double($ret_ndarray->data, [(double)1, 0, 0, 0, 2, 0, 0, 0, 3])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [3, 3])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method slice_diag : int () {
    
    {
      my $seq_ndarray = DOP->seq(1, 9);
      
      my $x_ndarray = MDOP->matrix($seq_ndarray, 3, 3);
      
      my $ret_ndarray = MDOP->slice_diag($x_ndarray);
      
      unless ($ret_ndarray is_type R::NDArray::Double) {
        return 0;
      }
      
      unless (Array->equals_double($ret_ndarray->data, [(double)1, 5, 9])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [3])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method identity : int () {
    
    {
      my $nrow = 3;
      my $ret_ndarray = MDOP->identity($nrow);
      
      unless ($ret_ndarray is_type R::NDArray::Double) {
        return 0;
      }
      
      unless (Array->equals_double($ret_ndarray->data, [(double)1, 0, 0, 0, 1, 0, 0, 0, 1])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [3, 3])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method mul : int () {
    
    {
      my $seq_ndarray = DOP->seq(1, 6);
      
      my $x_ndarray = MDOP->matrix(DOP->seq(1, 6), 2, 3);
      my $y_ndarray = MDOP->matrix(DOP->seq(1, 6), 3, 2);
      
      my $ret_ndarray = MDOP->mul($x_ndarray, $y_ndarray);
      
      unless ($ret_ndarray is_type R::NDArray::Double) {
        return 0;
      }
      
      unless (Array->equals_double($ret_ndarray->data, [(double)22, 28, 49, 64])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [2, 2])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method t : int () {
    
    {
      my $seq_ndarray = DOP->seq(1, 6);
      
      my $x_ndarray = MDOP->matrix(DOP->seq(1, 6), 2, 3);
      
      my $ret_ndarray = MDOP->t($x_ndarray);
      
      unless ($ret_ndarray is_type R::NDArray::Double) {
        return 0;
      }
      
      unless (Array->equals_double($ret_ndarray->data, [(double)1, 3, 5, 2, 4, 6])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [3, 2])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method det : int () {
    
    {
      my $seq_ndarray = DOP->seq(1, 4);
      
      my $x_ndarray = MDOP->matrix(DOP->seq(1, 4), 2, 2);
      
      my $ret_ndarray = MDOP->det($x_ndarray);
      
      unless ($ret_ndarray is_type R::NDArray::Double) {
        return 0;
      }
      
      unless (Array->equals_double($ret_ndarray->data, [(double)-2])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [1])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method solve : int () { return 1; }
  static method eigen : int () { return 1; }
}
