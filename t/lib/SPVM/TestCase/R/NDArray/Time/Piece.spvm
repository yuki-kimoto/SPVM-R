class TestCase::R::NDArray::Time::Piece {
  
  use R::NDArray::Time::Piece;
  use R::OP::Int as IOP;
  
  use R::OP::Time::Piece as TPOP;
  
  static method data : int () {
    
    my $data = TPOP->c([(string)"2000-01-01", "2000-01-02", "2000-01-03"])->data;
    my $dim = [1, 3];
    my $ndarray = R::NDArray::Time::Piece->new({data => $data, dim => $dim});
    
    my $got_data = $ndarray->data;
    
    unless ($got_data is_compile_type Time::Piece[]) {
      return 0;
    }
    
    unless ($got_data == $data) {
      return 0;
    }
    
    return 1;
  }
  
  static method new : int () {
    
    my $data = TPOP->c([(string)"2000-01-01", "2000-01-02", "2000-01-03"])->data;
    my $dim = [1, 3];
    my $ndarray = R::NDArray::Time::Piece->new({data => $data, dim => $dim});
    
    unless ($ndarray is_type R::NDArray::Time::Piece) {
      return 0;
    }
    
    unless ($ndarray->data == $data) {
      return 0;
    }
    
    unless (Array->equals_int($ndarray->dim, [1, 3])) {
      return 0;
    }
    
    return 1;
  }
  
  static method create_default_data : int () {
    
    {
      my $ndarray = R::NDArray::Time::Piece->new;
      
      my $default_data = $ndarray->create_default_data;
      
      unless ($default_data is_type Time::Piece[]) {
        return 0;
      }
      
      unless (@$default_data == 0) {
        return 0;
      }
    }
    
    {
      my $ndarray = R::NDArray::Time::Piece->new;
      
      my $length = 0;
      my $default_data = $ndarray->create_default_data($length);
      
      unless ($default_data is_type Time::Piece[]) {
        return 0;
      }
      
      unless (@$default_data == 0) {
        return 0;
      }
    }
    
    {
      my $ndarray = R::NDArray::Time::Piece->new;
      
      my $length = 2;
      my $default_data = $ndarray->create_default_data($length);
      
      unless ($default_data is_type Time::Piece[]) {
        return 0;
      }
      
      unless (@$default_data == 2) {
        return 0;
      }
      
      if ($default_data->[0]) {
        return 0;
      }
      
      if ($default_data->[1]) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method elem_to_string : int () { return 1; }
  
  static method elem_assign : int () { return 1; }
  
  static method elem_clone : int () { return 1; }
  
  static method elem_cmp : int () { return 1; }
  
  static method clone : int () {
    
    {
      my $data = TPOP->c([(string)"2000-01-01", "2000-01-02", "2000-01-03"])->data;
      my $dim = [1, 3];
      my $ndarray = R::NDArray::Time::Piece->new({data => $data, dim => $dim});
      
      my $ret_ndarray = $ndarray->clone;
      
      unless ($ret_ndarray is_type R::NDArray::Time::Piece) {
        return 0;
      }
      
      if ($ret_ndarray->to_string_ndarray->data == $ndarray->data) {
        return 0;
      }
      
      unless (Array->equals_string($ret_ndarray->to_string_ndarray->data, $ndarray->to_string_ndarray->data)) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [1, 3])) {
        return 0;
      }
    }
    
    {
      my $data = TPOP->c([(string)"2000-01-01", "2000-01-02", "2000-01-03"])->data;
      my $dim = [1, 3];
      my $ndarray = R::NDArray::Time::Piece->new({data => $data, dim => $dim});
      
      my $shallow = 1;
      my $ret_ndarray = $ndarray->clone($shallow);
      
      unless ($ret_ndarray is_type R::NDArray::Time::Piece) {
        return 0;
      }
      
      if ($ret_ndarray->to_string_ndarray->data == $ndarray->data) {
        return 0;
      }
      
      unless (Array->equals_string($ret_ndarray->to_string_ndarray->data, $ndarray->to_string_ndarray->data)) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [1, 3])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method slice : int () {
    
    {
      my $data = TPOP->c([(string)"2000-01-01", "2000-01-02", "2000-01-03", "2000-01-04", "2000-01-05", "2000-01-06"])->data;
      my $dim = [2, 3];
      my $ndarray = R::NDArray::Time::Piece->new({data => $data, dim => $dim});
      
      my $asix_indexes_product = [IOP->c([0, 1]), IOP->c([1])];
      my $ret_ndarray = $ndarray->slice($asix_indexes_product);
      
      unless ($ret_ndarray is_type R::NDArray::Time::Piece) {
        return 0;
      }
      
      unless (Array->equals_string($ret_ndarray->to_string_ndarray->data, [(string)"2000-01-03 00:00:00", "2000-01-04 00:00:00"])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [2, 1])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method to_string_ndarray : int () {
    
    {
      my $data = TPOP->c([(string)"2000-01-01", "2000-01-02", "2000-01-03"])->data;
      my $dim = [1, 3];
      my $ndarray = R::NDArray::Time::Piece->new({data => $data, dim => $dim});
      
      my $ret_ndarray = $ndarray->to_string_ndarray;
      
      unless ($ret_ndarray is_type R::NDArray::String) {
        return 0;
      }
      
      if ($ret_ndarray->to_string_ndarray->data == $ndarray->data) {
        return 0;
      }
      
      unless (Array->equals_string($ret_ndarray->to_string_ndarray->data, [(string)"2000-01-01 00:00:00", "2000-01-02 00:00:00", "2000-01-03 00:00:00"])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [1, 3])) {
        return 0;
      }
    }
    
    return 1;
  }
  
}
