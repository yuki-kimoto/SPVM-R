class TestCase::R::NDArray::Byte {
  
  use R::NDArray::Byte;
  
  static method data : int () {
    
    my $data = [(byte)1, 2, 3];
    my $dim = [1, 3];
    my $ndarray = R::NDArray::Byte->new({data => $data, dim => [1, 3]});
    
    my $got_data = $ndarray->data;
    
    unless ($got_data is_compile_type byte[]) {
      return 0;
    }
    
    unless ($got_data == $data) {
      return 0;
    }
    
    return 1;
  }
  
  static method new : int () {
    
    my $data = [(byte)1, 2, 3];
    my $dim = [1, 3];
    my $ndarray = R::NDArray::Byte->new({data => $data, dim => [1, 3]});
    
    unless ($ndarray is_type R::NDArray::Byte) {
      return 0;
    }
    
    unless ($ndarray->data == $data) {
      return 0;
    }
    
    unless (Array->equals_int($ndarray->dim, [1, 3])) {
      return 0;
    }
    
    return 1;
  }
  
  static method create_default_data : int () {
    
    {
      my $ndarray = R::NDArray::Byte->new;
      
      my $default_data = $ndarray->create_default_data;
      
      unless ($default_data is_type byte[]) {
        return 0;
      }
      
      unless (Array->equals_byte($default_data, new byte[0])) {
        return 0;
      }
    }
    
    {
      my $ndarray = R::NDArray::Byte->new;
      
      my $length = 0;
      my $default_data = $ndarray->create_default_data($length);
      
      unless ($default_data is_type byte[]) {
        return 0;
      }
      
      unless (Array->equals_byte($default_data, new byte[0])) {
        return 0;
      }
    }
    
    {
      my $ndarray = R::NDArray::Byte->new;
      
      my $length = 2;
      my $default_data = $ndarray->create_default_data($length);
      
      unless ($default_data is_type byte[]) {
        return 0;
      }
      
      unless (Array->equals_byte($default_data, [(byte)0, 0])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method elem_to_string : int () { return 1; }
  
  static method elem_assign : int () { return 1; }
  
  static method elem_clone : int () { return 1; }
  
  static method elem_cmp : int () { return 1; }
  
  static method clone : int () { return 1; }
  
  static method slice : int () { return 1; }
  
  static method to_int_ndarray : int () { return 1; }
  
}
