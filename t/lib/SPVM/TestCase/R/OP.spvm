class TestCase::R::OP {
  
  use R::OP::Int as IOP;
  
  static method equals_dim : int () {
    
    {
      my $x_ndarray = IOP->c(undef, [2, 3]);
      my $y_ndarray = IOP->c(undef, [2, 3]);
      my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
      
      unless ($equals_dim) {
        return 0;
      }
    }
    
    {
      my $x_ndarray = IOP->c(undef, [2, 3]);
      my $y_ndarray = IOP->c(undef, [2, 3, 1]);
      my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
      
      if ($equals_dim) {
        return 0;
      }
    }
    
    {
      my $x_ndarray = IOP->c(undef, new int[0]);
      my $y_ndarray = IOP->c(undef, new int[0]);
      my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
      
      unless ($equals_dim) {
        return 0;
      }
    }
    
    # Exceptions
    {
      {
        my $x_ndarray = IOP->c(undef, [2, 1, 3, 4]);
        my $y_ndarray = IOP->c(undef, [2, 1, 3, 4]);
        eval { R::OP->equals_dim($x_ndarray, undef); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method equals_dropped_dim : int () {
    
    {
      my $x_ndarray = IOP->c(undef, [2, 3]);
      my $y_ndarray = IOP->c(undef, [2, 3]);
      my $equals_dropped_dim = R::OP->equals_dropped_dim($x_ndarray, $y_ndarray);
      
      unless ($equals_dropped_dim) {
        return 0;
      }
    }
    
    {
      my $x_ndarray = IOP->c(undef, [2, 3]);
      my $y_ndarray = IOP->c(undef, [2, 3, 1]);
      my $equals_dropped_dim = R::OP->equals_dropped_dim($x_ndarray, $y_ndarray);
      
      unless ($equals_dropped_dim) {
        return 0;
      }
    }
    
    {
      my $x_ndarray = IOP->c(undef, new int[0]);
      my $y_ndarray = IOP->c(undef, new int[0]);
      my $equals_dropped_dim = R::OP->equals_dropped_dim($x_ndarray, $y_ndarray);
      
      unless ($equals_dropped_dim) {
        return 0;
      }
    }
    
    # Exceptions
    {
      {
        my $x_ndarray = IOP->c(undef, [2, 1, 3, 4]);
        my $y_ndarray = IOP->c(undef, [2, 1, 3, 4]);
        eval { R::OP->equals_dropped_dim($x_ndarray, undef); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    $@ = undef;
    
    return 1;
  }
  
  static method rep : int () { return 1; }
  static method rep_length : int () { return 1; }
  static method is_na : int () { return 1; }
}
