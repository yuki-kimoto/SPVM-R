class TestCase::R::OP {
  
  use R::OP::Int as IOP;
  use R::OP::Double as DOP;
  
  static method equals_dim : int () {
    
    {
      my $x_ndarray = IOP->c(undef, [2, 3]);
      my $y_ndarray = IOP->c(undef, [2, 3]);
      my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
      
      unless ($equals_dim) {
        return 0;
      }
    }
    
    {
      my $x_ndarray = IOP->c(undef, [2, 3]);
      my $y_ndarray = IOP->c(undef, [2, 3, 1]);
      my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
      
      if ($equals_dim) {
        return 0;
      }
    }
    
    {
      my $x_ndarray = IOP->c(undef, new int[0]);
      my $y_ndarray = IOP->c(undef, new int[0]);
      my $equals_dim = R::OP->equals_dim($x_ndarray, $y_ndarray);
      
      unless ($equals_dim) {
        return 0;
      }
    }
    
    # Exceptions
    {
      {
        my $x_ndarray = IOP->c(undef, [2, 1, 3, 4]);
        my $y_ndarray = IOP->c(undef, [2, 1, 3, 4]);
        eval { R::OP->equals_dim($x_ndarray, undef); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    
    
    return 1;
  }
  
  static method equals_dropped_dim : int () {
    
    {
      my $x_ndarray = IOP->c(undef, [2, 3]);
      my $y_ndarray = IOP->c(undef, [2, 3]);
      my $equals_dropped_dim = R::OP->equals_dropped_dim($x_ndarray, $y_ndarray);
      
      unless ($equals_dropped_dim) {
        return 0;
      }
    }
    
    {
      my $x_ndarray = IOP->c(undef, [2, 3]);
      my $y_ndarray = IOP->c(undef, [2, 3, 1]);
      my $equals_dropped_dim = R::OP->equals_dropped_dim($x_ndarray, $y_ndarray);
      
      unless ($equals_dropped_dim) {
        return 0;
      }
    }
    
    {
      my $x_ndarray = IOP->c(undef, new int[0]);
      my $y_ndarray = IOP->c(undef, new int[0]);
      my $equals_dropped_dim = R::OP->equals_dropped_dim($x_ndarray, $y_ndarray);
      
      unless ($equals_dropped_dim) {
        return 0;
      }
    }
    
    # Exceptions
    {
      {
        my $x_ndarray = IOP->c(undef, [2, 1, 3, 4]);
        my $y_ndarray = IOP->c(undef, [2, 1, 3, 4]);
        eval { R::OP->equals_dropped_dim($x_ndarray, undef); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    
    
    return 1;
  }
  
  static method rep : int () {
    
    {
      my $x_ndarray = IOP->c([(int)1, 2]);
      
      my $times = 2;
      my $ret_ndarray = IOP->rep($x_ndarray, $times);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
    }
    
    {
      my $x_ndarray = IOP->c([(int)1, 2]);
      
      my $times = 2;
      my $ret_ndarray = IOP->rep($x_ndarray, $times);
      
      unless (Array->equals_int($ret_ndarray->data, [(int)1, 2, 1, 2])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [4])) {
        return 0;
      }
    }
    
    {
      my $x_ndarray = IOP->c([(int)1, 2]);
      
      my $times = 1;
      my $ret_ndarray = IOP->rep($x_ndarray, $times);
      
      unless (Array->equals_int($ret_ndarray->data, [(int)1, 2])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [2])) {
        return 0;
      }
    }
    
    {
      my $x_ndarray = IOP->c([(int)1, 2]);
      
      my $times = 0;
      my $ret_ndarray = IOP->rep($x_ndarray, $times);
      
      unless (Array->equals_int($ret_ndarray->data, new int[0])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, new int[0])) {
        return 0;
      }
    }
    
    {
      my $x_ndarray = IOP->c([(int)1, 2], [1, 2]);
      
      my $times = 2;
      my $ret_ndarray = IOP->rep($x_ndarray, $times);
      
      unless (Array->equals_int($ret_ndarray->data, [(int)1, 2, 1, 2])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [4])) {
        return 0;
      }
    }
    
    # Exceptions
    {
      {
        my $x_ndarray = IOP->c([(int)1, 2]);
        
        my $times = 2;
        eval { IOP->rep($x_ndarray, $times); }
        
        
      }
      
      {
        my $x_ndarray = IOP->c([(int)1, 2]);
        
        my $times = 2;
        eval { IOP->rep(undef, $times); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $x_ndarray = IOP->c([(int)1, 2]);
        
        my $times = -1;
        eval { IOP->rep($x_ndarray, $times); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    
    
    return 1;
  }
  
  static method rep_length : int () {
    
    {
      my $x_ndarray = IOP->c([(int)1, 2]);
      
      my $rep_length = 4;
      my $ret_ndarray = IOP->rep_length($x_ndarray, $rep_length);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
    }
    
    {
      my $x_ndarray = IOP->c([(int)1, 2]);
      
      my $rep_length = 4;
      my $ret_ndarray = IOP->rep_length($x_ndarray, $rep_length);
      
      unless (Array->equals_int($ret_ndarray->data, [(int)1, 2, 1, 2])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, [4])) {
        return 0;
      }
    }
    
    {
      my $x_ndarray = IOP->c([(int)1, 2]);
      
      my $rep_length = 0;
      my $ret_ndarray = IOP->rep_length($x_ndarray, $rep_length);
      
      unless (Array->equals_int($ret_ndarray->data, new int[0])) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->dim, new int[0])) {
        return 0;
      }
    }
    
    # Exceptions
    {
      {
        my $x_ndarray = IOP->c([(int)1, 2]);
        
        my $rep_length = 4;
        my $ret_ndarray = IOP->rep_length($x_ndarray, $rep_length);
        
        eval { IOP->rep_length($x_ndarray, $rep_length); }
        
      }
      
      {
        my $x_ndarray = IOP->c([(int)1, 2]);
        
        my $rep_length = 4;
        
        eval { IOP->rep_length(undef, $rep_length); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $x_ndarray = IOP->c([(int)1, 2]);
        
        my $rep_length = -1;
        
        eval { IOP->rep_length($x_ndarray, $rep_length); }
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $x_ndarray = IOP->c([(int)1, 2, 3]);
        
        my $rep_length = 4;
        
        eval { IOP->rep_length($x_ndarray, $rep_length); }
        
        unless ($@) {
          return 0;
        }
      }
      
    }
    
    
    
    return 1;
  }
  
  static method is_na : int () {
    
    {
      my $x_ndarray = DOP->c([(double)1, Math->NAN]);
      
      my $ret_ndarray = R::OP->is_na($x_ndarray);
      
      unless ($ret_ndarray is_type R::NDArray::Int) {
        return 0;
      }
      
      unless (Array->equals_int($ret_ndarray->data, [0, 1])) {
        return 0;
      }
      
    }
    
    # Exceptions
    {
      {
        my $x_ndarray = DOP->c([(double)1, Math->NAN]);
        
        eval { R::OP->is_na(undef); }
        
        unless ($@) {
          return 0;
        }
      }
    }
    
    
    
    return 1;
  }
}
